{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2020-08-04T15:59:57.050114+00:00",
  "repo": "MikeBishop/dns-alt-svc",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "ee0701"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "33aa3f"
    },
    {
      "name": "good first issue",
      "description": null,
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    },
    {
      "name": "wg",
      "description": "This should be considered by the working group",
      "color": "b60205"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "4af7a6"
    },
    {
      "name": "proposed to close",
      "description": "Pending feedback prior to closing out",
      "color": "b3f22b"
    },
    {
      "name": "future draft",
      "description": "",
      "color": "bcff82"
    }
  ],
  "issues": [
    {
      "number": 23,
      "id": "MDU6SXNzdWU0NjE2MTUyNzM=",
      "title": "HTTPSSVC: Switch to null-delimited SvcDomainName",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/23",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "Right now SvcDomainName appears to be in presentation format (i.e. dot-delimited), which is inconvenient for recursive operators.  We should switch it to the usual DNS name encoding (but still uncompressed).",
      "createdAt": "2019-06-27T16:00:34Z",
      "updatedAt": "2019-06-28T01:05:41Z",
      "closedAt": "2019-06-28T01:05:41Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged PR  (which had a conflict so hopefully I didn't break things).",
          "createdAt": "2019-06-28T01:05:39Z",
          "updatedAt": "2019-06-28T01:05:39Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "MDU6SXNzdWU0NjE2NTY3NzM=",
      "title": "HTTPSSVC: Move \"pri\" out of the SvcFieldValue",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/24",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "It seems like it would be useful for DNS clients to be able to process the priority field directly, without having to gain Alt-Svc parsing capability.  Conversely, \"pri\" is not needed in Alt-Svc, where values are considered to be ordered already.  Therefore, we should consider a fourth value (`SvcFieldPriority`?) in the RR, present only when `SvcRecordType` is 1.",
      "createdAt": "2019-06-27T17:30:15Z",
      "updatedAt": "2019-06-28T00:58:48Z",
      "closedAt": "2019-06-28T00:58:48Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "That seems like a reasonable way to adapt this to DNS.",
          "createdAt": "2019-06-27T18:36:58Z",
          "updatedAt": "2019-06-27T18:36:58Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense.  Merged PR.",
          "createdAt": "2019-06-28T00:58:48Z",
          "updatedAt": "2019-06-28T00:58:48Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU0NjM5MjkwNzk=",
      "title": "Remove ambiguities/redundancies in encoding",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/32",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Ilari Liusvaara <ilariliusvaara@welho.com> \r\n\r\n- What if SvcDomainName has length different from its length field?\r\n  DNS wire-form names are self-delimiting (DNS message parsing relies\r\n  on this).\r\n- What does it mean for SvcDomainName to be absent in alternative\r\n  service form? I would guess it means \"same as RRNAME\".\r\n- Why there is length field for SvcFieldValue? Why not let it run to\r\n  the end of record?\r\n- 2 byte length field can encode values up to 65535, not 65536.\r\n  And the length of SvcFieldValue can not be that big, because\r\n  RRDATA and DNS message length limits (both 65535) would be hit.",
      "createdAt": "2019-07-03T20:00:45Z",
      "updatedAt": "2019-07-08T21:02:19Z",
      "closedAt": "2019-07-08T21:02:19Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Using the empty label (\".\") to specify an absent in alternative service form which means \"same as RRName\" would address both of the first two items.",
          "createdAt": "2019-07-03T20:33:51Z",
          "updatedAt": "2019-07-03T20:33:51Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "But what if the root wants to serve QUIC?  OK, that seems unlikely, but technically it does seem like squatting on their name.  I'm not sure what the formalities of that are.  (I wonder if Let's Encrypt would issue a cert for \".\"...)\r\n\r\nThinking about the text representation, the clearest way I can think of to indicate an omitted uri-host is to write the SvcDomainName as \"*\".  I'm not sure what that suggests for the RR serialization though.",
          "createdAt": "2019-07-03T20:40:56Z",
          "updatedAt": "2019-07-03T20:40:56Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like SRV and MX use \".\" to mean \"no service available\".  (See RFC 2782.)\r\n\r\nWould \"\"  be better to mean \"same as RRNAME\"?  Or does that mean \"same as hostname\"?\r\n",
          "createdAt": "2019-07-05T12:42:36Z",
          "updatedAt": "2019-07-05T12:42:36Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems like some special cases for SvcDomainName to cover for SvcRecordType=1:\r\n\r\n* How to indicate it should be equivalent to the RRNAME?\r\n* How to indicate it should be equivalent to the hostname?\r\n* What happens if it has the value \".\"?  SRV and MX have this\r\n  mean \"no service available.\r\n",
          "createdAt": "2019-07-05T12:47:48Z",
          "updatedAt": "2019-07-05T12:47:48Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Released in -02.",
          "createdAt": "2019-07-08T21:02:19Z",
          "updatedAt": "2019-07-08T21:02:19Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU0NjM5MzAwNzc=",
      "title": "HTTPSSVC: Be more clear on chaining behaviors",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/34",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Ilari Liusvaara <ilariliusvaara@welho.com> \r\n\r\n\r\n- Is there any envisioned use for chained HTTPSSVC records, except\r\n  for type 0 record pointing to type 1 record?\r\n- The MUST requirement to have only one type 0 record and then\r\n  SHOULD behave non-deterministically if this is violated is pretty\r\n  odd.",
      "createdAt": "2019-07-03T20:03:36Z",
      "updatedAt": "2019-11-04T16:40:45Z",
      "closedAt": "2019-11-04T16:40:45Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #57.\r\n\r\n> MUST requirement to have only one type 0 record\r\n\r\nI think this has already been reduced to SHOULD.",
          "createdAt": "2019-09-27T21:18:21Z",
          "updatedAt": "2019-09-27T21:18:21Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Moving discussion to #57.",
          "createdAt": "2019-11-04T16:40:44Z",
          "updatedAt": "2019-11-04T16:40:44Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWU0NjU0Mzc2NTM=",
      "title": "Tracking through Alt SVC lifetimes",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/39",
      "state": "CLOSED",
      "author": "pes10k",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Similar to how HSTS super cookies are used to track users, I think the Alt SVC lifetime instructions could be used to create implicit long term identifiers for users.  \r\n\r\nB/c of local DNS caching, its unlikely that popular (e.g. Apple) protections for HSTS cookies could be applied here (since the context of the DNS request would be lost, there'd be no sense of 1p / 3p requests).\r\n\r\nI'm not sure how this issue could be addressed given then proposal, but would be happy to think through one.  This is less a problem with the existing markup / header ALT-SVC options, since the browser can control the life time of those.",
      "createdAt": "2019-07-08T20:09:27Z",
      "updatedAt": "2019-12-13T18:44:11Z",
      "closedAt": "2019-12-13T18:44:11Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "It sounds like you're concerned about DNS-based tracking that can identify a user whose IP address has changed.  This is a concern, but it's already present with standard A records.  You can see an implementation of this kind of supercookie at http://dnscookie.com/.\r\n\r\nThe only solution is for the client to tie its DNS cache to its IP address, so that the cache is cleared when the client's IP address changes.  I don't think HTTPSSVC changes that.",
          "createdAt": "2019-07-08T21:13:36Z",
          "updatedAt": "2019-07-08T21:13:36Z"
        },
        {
          "author": "pes10k",
          "authorAssociation": "NONE",
          "body": "@bemasc A difference here between the DNS cookie and the tracking enabled here is that I could perform it w/o needing to operate any DNS records, I just need a website.  If I can find enough domains sending ALT-SVC DNS headers, I can make requests to those domains from page, see where frame request ends up (or use something like [Performance Nav API](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceNavigationTiming) or [Resource Timing API](https://www.w3.org/TR/resource-timing-2/), and use that information as a tracking bit. (its also a very handy history leak\u2026)\r\n\r\nGiven enough examples, and varying TTLs, i should be able to uniquely identify users.\r\n\r\nHowever, i think the history leak issue here is more alarming",
          "createdAt": "2019-07-09T17:57:47Z",
          "updatedAt": "2019-07-09T17:57:47Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> see where frame request ends up\r\n\r\nDo you mean the selected server IP address?  I don't understand the proposed attack.  I don't see why the connection destination would be highly variable, and I don't see how the webpage would learn this IP address (which is not exposed to javascript).",
          "createdAt": "2019-07-09T19:02:35Z",
          "updatedAt": "2019-07-09T19:02:35Z"
        },
        {
          "author": "pes10k",
          "authorAssociation": "NONE",
          "body": "The IP address is not learned.  Whether or not the user has visited a domain previously can probably be teased out (If I understand the proposal correctly).\r\n\r\n1) Domain sets up DNS ALTSVC instruction with non-zero lifetime\r\n2) Website includes a resource from that domain on its site\r\n3) Website looks at the [nextHopProtocol](https://www.w3.org/TR/resource-timing-2/#dom-performanceresourcetiming-nexthopprotocol) from the Resource Timing API.  If it request goes to the ALTSVC end point immediately, the user very likely has visited that page before.  If the request goes HTTP -> ALTSVC end point, the user def has not visited that page before",
          "createdAt": "2019-07-09T19:48:23Z",
          "updatedAt": "2019-07-09T19:48:23Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the explanation.  I wasn't aware of nextHopProtocol.\r\n\r\nI think you are describing the status quo with Alt-Svc, regardless of these DNS-related proposals.  Additionally, the Resource Timing API is guarded by CORS headers (opt-in for each destination domain), and the proposed test is \"destructive\": after the test is complete, all the tested domains are in-cache, and the tracking information is destroyed.\r\n\r\nIf there is a privacy concern here, I don't think it is specific to the drafts in this repository.",
          "createdAt": "2019-07-09T20:09:20Z",
          "updatedAt": "2019-07-09T20:09:20Z"
        },
        {
          "author": "pes10k",
          "authorAssociation": "NONE",
          "body": "Yep, Alt-SVC in general has this issue, its not specific to DNS for sure.  But:\r\n\r\n1) Its also present in the DNS proposal, so seems important do deal with here before further entrenching Alt-SVC w/o a solution :)\r\n2) Alt-SVC in HTTP headers and markup can be (usually) dealt with in browser privacy tools (Brave is deploying protections, but extensions could also hook into this functionality to protect users).  Browser privacy tools wouldn't have the option of protecting browser users if the info is moved to DNS\r\n3) re CORS-opt in: unfortunately, if there is any lesson from web privacy, its that you can't expect websites to be good at protecting / opt-ing into user privacy (in general), it needs to be something the client / user stack mandates; I don't think CORS is a solution here\r\n4) Thats true for the lifetime of the instruction, sure, but leaking browsing history once per DNS record lifetime is bad!",
          "createdAt": "2019-07-09T23:25:59Z",
          "updatedAt": "2019-07-09T23:25:59Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> Browser privacy tools wouldn't have the option of protecting browser users if the info is moved to DNS\r\n\r\nHTTPSSVC cannot be handled by the operating system; it has to be handled by the browser.  I don't know how this would interact with current extension APIs in different browsers, but there's nothing preventing a browser from exposing custom behavior controls for HTTPSSVC.\r\n\r\n> you can't expect websites to be good at protecting / opt-ing into user privacy\r\n\r\nTo be clear, origins have to _add_ a special `Timing-Allow-Origin` header to specify which other origins are permitted to measure their timing.  By default, the Resource Timing API is same-origin only.  I think the odds of an origin accidentally enabling cross-origin resource timing seems very low.",
          "createdAt": "2019-07-10T14:34:41Z",
          "updatedAt": "2019-07-10T14:34:41Z"
        },
        {
          "author": "pes10k",
          "authorAssociation": "NONE",
          "body": "@bemasc apologies for this dropping off\r\n\r\nPoint taken on the above. I take your point that `Resource Timing API` not being the most likely way of leveraging this.  The main concern is just that the standard allows a site owner / DNS record controller to get the browser to store persistent information that pages can access (indirectly), but which is not (mostly?) w/in the realm of attacks privacy folks are considering.\r\n\r\nWhat are your thoughts on where / if it makes sense to make changes to the standard (or privacy considerations style text) to either alert privacy-oriented implementors of the new attack surface and or reduce it? (i dont have compelling ideas at the moment, saddly)",
          "createdAt": "2019-07-26T22:15:19Z",
          "updatedAt": "2019-07-26T22:15:19Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think your first step should be to lay out a clear and plausible attack, and ideally put up a demo.  Alt-Svc (and HTTPSSVC) are designed with this class of attacks in mind, and designed with the belief that no such attacks are in fact possible.  If you can demonstrate an attack, I expect the IETF will act forcefully to fix the problem.\r\n\r\nYou're right that we need to be careful with client-side caching, but HTTP has cookies precisely to allow persistent client identification, along with rules about exactly how to ensure that state is managed appropriately.  These documents are both designed to follow those rules, and thereby avoid introducing privacy problems.",
          "createdAt": "2019-07-27T00:15:33Z",
          "updatedAt": "2019-07-27T00:15:33Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Alt-Svc provides a couple of different levers here:\r\n\r\n- The `persist=` option indicates whether an entry should be flushed on address change.  Obviously, this is intended to indicate whether the alternative is being recommended because of location (this node is closer to you!) or because of capability (all IPs behind this hostname speak HTTP/3), but an attacker trying to track you wouldn't tell you to flush proactively.\r\n- The Alt-Svc cache is supposed to be flushed whenever cookies are cleared.  This implies that any Cookie partitioning strategy (as Brave is doing) should also partition Alt-Svc records.\r\n\r\nHowever, when Cookies are cleared, I don't believe browsers also force a flush of the OS DNS cache.  This is particularly relevant when the cache contains HTTPSSVC records, since such cached records could reintroduce an Alt-Svc entry the user intended to clear.\r\n\r\nIt almost seems like we want the records to be short-lived, but the Alt-Svc records they contain to live longer.  Or just use short-lifetime HTTPSSVC records, and provide a longer Alt-Svc entry over HTTPS once the connection is made.",
          "createdAt": "2019-08-14T17:50:07Z",
          "updatedAt": "2019-08-14T17:50:07Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU0NjU1MjQ4MDk=",
      "title": "HTTPSSVC: Comments from Brian Dickson",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/40",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "One minor issue is that wherever CNAME is referenced, you probably want to also include a reference to DNAME, including any implied or explicit chaining of CNAMEs (which could be sequences of CNAME and/or DNAME modulo their respective behavior.)\r\n\r\nYou might also want to explain the motivation for keeping the FQDN separate from the alt-svc parameters (to make it trivial to parse, and thus to do DNS substitutions like CNAME/DNAME). It is there, just not as up-front as it could be.\r\n\r\n\r\nIt might be a little clearer if the list of alt-svc values (h2, h3, etc) that can occur were to be listed in the document. In particular, the association between h3 and QUIC is inferred but not explicitly called out (at least not that I noticed.)\r\n",
      "createdAt": "2019-07-09T01:24:04Z",
      "updatedAt": "2019-12-13T18:44:56Z",
      "closedAt": "2019-12-13T18:44:56Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "These are not yet addressed in the proposed draft-nygren-dnsop-svcb-httpssvc-00.\r\nWe should include in the next version.",
          "createdAt": "2019-09-23T21:30:34Z",
          "updatedAt": "2019-09-23T21:30:34Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> It might be a little clearer if the list of alt-svc values (h2, h3, etc) that can occur were to be listed in the document.\r\n\r\nThe values are in an IANA registry, and I don't think the \"alpn\" SVCB parameter is intended to be restricted to a subset of those values.  However, it is true that only some of those values make sense in the context of HTTPSSVC, and their meaning is indeed nontrivial.  I don't think we could enumerate them in the text in any permanent way, but I suppose we could explain the present state of affairs more explicitly.",
          "createdAt": "2019-11-08T16:35:53Z",
          "updatedAt": "2019-11-08T16:35:53Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "MDU6SXNzdWU0NjU3NTQ2NjQ=",
      "title": "HTTPSSVC: Feedback from Mark Andrews ",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/41",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Mark Andrews:\r\n\r\n================================\r\n\r\nIntroductory Example: The example record\r\n\r\nexample.com.      2H  IN HTTPSSVC 0 0 svc.example.net.\r\n\r\ndoes not match the description of the record (missing last field). It should be:\r\n\r\nexample.com.      7200  IN HTTPSSVC 0 0 svc.example.net. \u201c\u201d\r\n\r\nSimilarly in 2.4.  HTTPSSVC records: alias form\r\n\r\nAlso don\u2019t use 2H for the TTL.  While some servers will accept it, it is not RFC compliant.\r\n\r\nUnless these is a real reason for the record to be class agnostic please specify that\r\nit is class IN specific.",
      "createdAt": "2019-07-09T12:32:54Z",
      "updatedAt": "2019-11-04T21:31:07Z",
      "closedAt": "2019-11-04T21:31:07Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "All of these should be addressed now except for \r\nthis not being class-agnostic.  That is proposed in PR: \r\n   https://github.com/MikeBishop/dns-alt-svc/pull/54",
          "createdAt": "2019-09-23T21:29:20Z",
          "updatedAt": "2019-09-23T21:29:20Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWU0NjU3NTY4NzI=",
      "title": "HTTPSSVC: Security considerations: add note that unauthenticated",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/42",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should add a note to Security Considerations indicating that HTTPSSVC is unauthenticated in many cases (ie, unless DNSSEC is present and verified) and thus care should be taken around Alt-Svc parameters that imply trust.\r\n\r\nI wonder if we should be explicit to say that Alt-Svc parameters must opt-in to indicate that they can be used in HTTPSSVC?  (As even with \"ma\" we've had to define constraints.)\r\n\r\n",
      "createdAt": "2019-07-09T12:37:48Z",
      "updatedAt": "2019-11-04T21:32:28Z",
      "closedAt": "2019-11-04T21:32:28Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is now addressed pretty clearly: \"Alt-Svc parameters that cannot be safely received in this model MUST NOT have a corresponding defined SvcParamKey.\"",
          "createdAt": "2019-11-04T21:32:28Z",
          "updatedAt": "2019-11-04T21:32:28Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWU0NzE3NzQ4NjU=",
      "title": "HTTPSSVC: make more generic?  and change record name?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/44",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A question from the DNSOP WG discussion is whether to make this record somewhat more generic, inclduing whether to change the record name.  Some options:\r\n\r\n0. Leave as-is and clarify that HTTPS is not just about web browsers.\r\n\r\n1.  Rename to ALTSVC.  Keep default behavior for https:// and http:// but clarify that _$label use-cases can be used more generically for other protocols.\r\n\r\n2. Make even more generic  (SRVBIS?  SRV2?).  Define that format of the SvcFieldValue is specific to the protocol/scheme.  (ie, might be Alt-Svc for HTTPS.)   \r\n\r\n3. Define a generic format with SvcFieldValue being specific to protocol/scheme. But then define a set of RRTYPES that are specific instantiations of this generic format.  For example: HTTPSSVC as an instantiation for HTTPS with Alt-Svc in SvcFieldFalue.  SRV2 as something purely generic.  NS2 for handling secure delegations to DoH/DoT authorities with specification of protocols, ESNIKEYS, ports, etc, in some format of SvcFieldValue.  \r\n\r\n",
      "createdAt": "2019-07-23T15:45:08Z",
      "updatedAt": "2019-09-23T21:21:25Z",
      "closedAt": "2019-09-23T21:21:25Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "In talking with Tommy Pauly (@tfpauly) and he was leaning towards 1 (ALTSVC).\r\nIf we also use this for recursive-to-authoritative DNS then it would want a separate RRTYPE (eg, NS2).",
          "createdAt": "2019-07-25T17:47:23Z",
          "updatedAt": "2019-07-25T18:09:51Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 for option 1.\r\n\r\nI'm definitely also eager to get an RRTYPE (like NS2) to point to the authoritative DoH server, in a way that clients can use to discover available trusted DoH servers for given domains. I would also want to the ability for the content to carry a set of keys that can be used with the DoH server (for both ESNI and allowing further encryption of inner queries for obfuscation).",
          "createdAt": "2019-07-26T14:07:37Z",
          "updatedAt": "2019-07-26T14:07:37Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's a cut at something like option 3, or maybe even more generic:\r\n\r\nAn _Indirection RRTYPE_ is an RRTYPE whose contents are _either_ (a) an FQDN or (b) a list of QTYPEs.\u00a0 To look up an Indirection RRTYPE, a recursive follows the chain of FQDNs (case a) until it reaches case b.\u00a0 In case b, the authoritative gathers all the listed QTYPEs for the QNAME and returns them (as Additional) along with the Indirection RR.\u00a0 The recursive returns all this to the stub.\r\n\r\nIf the recursive is delinquent, this can (and MUST) all be done by the stub/client.\r\n\r\nHTTPSSVC\u00a0is an Indirection RRTYPE initially intended for use with the A, AAAA, *ESNIKEYS*, and *HTTPSALT* QTYPEs.\r\n- ESNIKEYS is just the ESNIKeys.\r\n- HTTPSALT is the ALPN and port (i.e. `h2=:8002` in a compact encoding)\r\n\r\nRationale:\u00a0\r\n- Avoids adding another key-value layer on top of the DNS itself\r\n- Keeps all info for one endpoint in one name (unlike current draft)\r\n- Implementing any future Indirection RRTYPE (NS2?) is a one-line change to DNS code (just handle it identically to HTTPSSVC).\r\n- Can easily drop support for IPv4\r\n- Can easily add new types of info (just define an RRTYPE and add it to your QTYPE list)\r\n- Still fully equivalent to Alt-Svc\r\n- No base64\r\n\r\nProblems:\r\n- No binding between multiple ESNIKEYS and HTTPSALT\u00a0values in a single name.\u00a0 If h2 and h3 have different ESNIKeys, they have to have different names (as in our draft's example with svc2.example.com and svc3.example.com).\r\n- Zone files could end up with a lot of lines.\r\n- Possible to screw up by listing a QTYPE for a sister record that isn't actually present.\u00a0 This should probably be a parse error when loading the zone, but is there a precedent for multi-entry consistency checking?\r\n- Every future Alt-Svc key also needs a new RRTYPE to be usable in HTTPSSVC.  (On the plus side, keys that aren't safe for use in DNS are unrepresentable.)\r\n- Not clear how this interacts with DNS64.  (Doesn't seem worse than current draft.)\r\n\r\nOpen question: Is there a way to extend the [Unknown RRTYPE](https://tools.ietf.org/html/rfc3597) system to support handling an \"Unknown Indirection RRTYPE\", so further future Indirection RRTYPEs can be handled by future legacy DNS code?",
          "createdAt": "2019-07-27T01:28:51Z",
          "updatedAt": "2019-07-27T01:28:51Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I worry that the Indirection RRType doesn't solve enough problems (such as service bindings).  It also seems like yet another attempt at the multi-query style approach of which there have been a huge number of failed drafts.",
          "createdAt": "2019-08-01T20:49:48Z",
          "updatedAt": "2019-08-01T20:49:48Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "What I'd been thinking of for option 2/3 (although option 1 may just be safer/simpler and good enough):\r\n\r\n* Generalize the HTTPSSVC record as something like \"B\" (or \"SRV2\") and remove the HTTPS-specific semantics from the doc.  Specify that other documents may create service-specific instantiations with their own RRtypes.  Protocols/services without special needs and willing to use SRV-style attribute leaf labels could also just use \"B\" directly. \r\n\r\n* In a separate draft define the \"HTTPS\" RRtype as an instantiation of \"B\" and define the HTTPS-specific semantics and behaviors, such as the mapping to AltSvc.  (A similar separate draft could also define \"NS2\".)  Separate RRTypes are really only needed when differentiation between services is needed on a name without attribute leaf labels.\r\n* How to handle the SvcFieldValue key=value pairs is one of the biggest open questions for me:\r\n    * The simple model would be to leave this as plain text and leave it up to application/service protocol bindings to define meanings.  HTTPS could then continue to use the Alt-Svc format.\r\n    * A much more ambitious approach would be to define the key=value pairs in a much structured way (perhaps but with a mapping for HTTPS over to Alt-Svc format in that separate draft).  This could allow for a few types of values (and I'm not sure what the right set of these is):  strings;  binary blobs (eg, for keys);  inlined RRDATA; references over to other {RRNames/RRTypes}.  This could become especially powerful if done right by allowing something like an ESNI key to either be literally included in the SvcFieldValue, or to be the name of another record (with a different TTL) containing the ESNI key, for example.  This could also support inlining AAAA/A records into a SvcFieldValue value element, perhaps.  This pushes even more complexity into clients, perhaps.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2019-08-01T20:51:55Z",
          "updatedAt": "2019-08-01T20:51:55Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "NONE",
          "body": "I think we need to make the decision on your approval speed.  Doing something more generic will definitely slow down DNSOP as they debate minutia, and perhaps spending all goodwill.   ",
          "createdAt": "2019-08-02T20:01:59Z",
          "updatedAt": "2019-08-02T20:01:59Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ">   * The simple model would be to leave this as plain text and leave it up to application/service protocol bindings to define meanings.  HTTPS could then continue to use the Alt-Svc format.\r\n>   * A much more ambitious approach would be to define the key=value pairs in a much structured way\r\n\r\nAs an intermediate option, I propose a binary type-length-value store (16-bit keys and lengths).  Type codes are controlled by a new IANA registry.  Data format is type-dependent.\r\n\r\nHTTPSSVC (and NS2, etc.) would share the global IANA type code registry, adding type codes for port, ALPN, and ESNIKeys (which are all we need right now).  Some type codes (like port, ESNIKeys) are likely to be useful in multiple RRTYPEs, while others (like ALPN) are likely to be exclusive to a single RRTYPE.\r\n\r\nHTTPSSVC's zone-file representation remains unchanged.  SRV2/B also has a host file representation that doesn't require parsing the TLV data, and HTTPSSVC can be represented in this form if the implementation doesn't recognize one of the keys.\r\n\r\nWhat do you think?",
          "createdAt": "2019-08-05T22:18:32Z",
          "updatedAt": "2019-08-05T22:18:32Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I have a first pass at doing a proposed generalization on this branch:\r\n\r\nhttps://github.com/MikeBishop/dns-alt-svc/blob/enygren-svcb-generalization-1/draft-nygren-httpbis-httpssvc.md\r\n\r\nIt does something roughly equivalent to what @bemasc proposes in the previous comment.  It has a SVCB record (name is a placeholder) that is general with an IANA parameter key registry (with 16-bit key values).  It separates out HTTPS and Alt-Svc into a dedicated section of the document where it specifies HTTPS-specific behaviors as well as the mapping from SVCB RRs to Alt-Svc values.\r\n\r\n",
          "createdAt": "2019-08-09T22:34:45Z",
          "updatedAt": "2019-08-09T22:34:45Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Included in the latest draft draft-nygren-dnsop-svcb-httpssvc which will be published shortly.",
          "createdAt": "2019-09-23T21:21:25Z",
          "updatedAt": "2019-09-23T21:21:25Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWU0NzI5MTc4MzI=",
      "title": "HTTPSSVC: clarify behavior when using a proxy",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/45",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clients using a proxy want special handling.  Rather than simply doing a CONNECT through the proxy to the origin hostname, clients should attempt to resolve HTTPSSVC and then issue the CONNECT to the terminal SvcDomainName (ie, still the same name that a CONNECT for an Alt-Svc  received via a header would have used).\r\n\r\nFor background rfc7838 says:\r\n>    A client configured to use a proxy for a given request SHOULD NOT\r\n>    directly connect to an alternative service for this request, but\r\n>    instead route it through that proxy.\r\n\r\nOne caveat here is that environments requiring a proxy may not allow clients to do DNS resolution.  (Although clients doing HTTPSSVC resolutions via DoH through the proxy may not have this issue.)\r\n\r\nThe proxy case is another good reason/case to NOT inline the address records into the HTTPSSVC record.  (or into an ESNI record)",
      "createdAt": "2019-07-25T15:02:33Z",
      "updatedAt": "2019-09-23T21:20:43Z",
      "closedAt": "2019-09-23T21:20:43Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Gets its own section \"Clients using a Proxy\" in draft-nygren-dnsop-svcb-httpssvc",
          "createdAt": "2019-09-23T21:20:43Z",
          "updatedAt": "2019-09-23T21:20:43Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWU0NzI5OTIxOTQ=",
      "title": "HTTPSSVC: make SvcRecordType implicit?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/46",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "One suggestion in DNSOP was to make the SvcRecordType implicit.\r\nFor example, remove the field and distinguish between the two forms by\r\nwhether the SvcRecordValue is empty or not.",
      "createdAt": "2019-07-25T17:48:35Z",
      "updatedAt": "2019-09-23T21:19:45Z",
      "closedAt": "2019-09-23T21:19:45Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "This is included in the first pass of generalizing:\r\n\r\nhttps://github.com/MikeBishop/dns-alt-svc/blob/enygren-svcb-generalization-1/draft-nygren-httpbis-httpssvc.md",
          "createdAt": "2019-08-09T22:31:08Z",
          "updatedAt": "2019-08-09T22:31:08Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Incorporated into the latest draft (draft-nygren-dnsop-svcb-httpssvc).",
          "createdAt": "2019-09-23T21:19:45Z",
          "updatedAt": "2019-09-23T21:19:45Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWU0ODA4NzAwMTU=",
      "title": "HTTPSSVC: incorporate comments from discussion on 2019-08-14",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/47",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Concrete changes to make based on todays' discussion with Mike, Erik, Tommy, Chris, Ben, and Tim:\r\n\r\n- Have one draft defining two rrtypes, making it easier to keep it all in DNSOP.\r\n- Define a separate HTTPSSVC RRTYPE in the draft\r\n\r\n- Add a separate draft that adds an optional A/AAAA stapling parameter (and altsvc parameter).\r\n    - Having this be a generic \"rrdata\" parameter is cute, but might add more problems.\r\n\r\n- Keep using expert review for the key type registry.  (No changes needed.)\r\n- Clarify that recursives should be able to treat key types as opaque.\r\n\r\n- Remove the \"esnikeysref\".  (But perhaps move it back to an issue.)   Helpful for separating operational management, but pull this out for now.\r\n    - Having an authoritative feature for copying this into place might be cute down-the-road but not needed here.\r\n\r\n- Remove general parameter type specifications.\r\n\r\n- Ben: remove the \"can ignore\" optimization.  (That Ben added in)\r\n\r\n- Bike shed: what to name the records.   Keep with them for now, and get consensus later on what to rename them with.\r\n  - SVCB            (later to ???)\r\n  - HTTPSSVC   (later to HTTPS or SVCHTTPS ?)\r\n\r\n- For delimiters between parameters and their encoding:\r\n  - Just leave delimiter as space.  \r\n  - Copy over or reference string quoting from TXT record RFC (or some similar but more recent RFC)\r\n",
      "createdAt": "2019-08-14T20:20:46Z",
      "updatedAt": "2019-09-23T21:19:28Z",
      "closedAt": "2019-09-23T21:19:28Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Most of this is now on this branch:\r\n\r\nhttps://github.com/MikeBishop/dns-alt-svc/blob/enygren-svcb-generalization-1/draft-nygren-dnsop-svcb-httpssvc.md",
          "createdAt": "2019-08-19T22:00:08Z",
          "updatedAt": "2019-08-19T22:00:08Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Incorporated into the latest draft (draft-nygren-dnsop-svcb-httpssvc).",
          "createdAt": "2019-09-23T21:19:28Z",
          "updatedAt": "2019-09-23T21:19:28Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "MDU6SXNzdWU0ODI1Mzg5NTI=",
      "title": "HTTPSSVC: reintroduce esnikeysref?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/48",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I'm pulling esnikeysref out of the existing version.  \r\nThis also allows DNS servers to treat the Params as opaque which I've added a SHOULD regarding.\r\n\r\nThe removed text is here in-case we wish to re-insert it:\r\n\r\n## in {#resolution}\r\n\r\n* If the selected alternative service\r\n   has parameters which reference other names (such as \"esnikeysref\")\r\n   the client will also need to resolve those prior to making a connection.\r\n\r\n## In DNS Server Behaviors:\r\n\r\nFor ServiceForm, recursive DNS servers\r\nMAY also include names referenced by SvcParamValue (such\r\nas \"esnikeysref\") when those records are available and fit\r\nwithin the response.\r\n\r\nFor ServiceForm, authoritative DNS\r\nservers MAY also include in-bailiwick names referenced by\r\nSvcParamValue (such as \"esnikeysref\").\r\n\r\n\r\n### External references to esnikeys\r\n\r\nA SVCB parameter \"esnikeysref\" is also defined for specifying a\r\nreference to ESNI keys.  This allows for both separation\r\nof ESNI keys operational management as well as allows\r\nESNI keys to be cached with a longer TTL than the\r\nSVCB record.\r\n\r\nThe value is a domain name which references a TXT RRSet containing\r\nexactly one RR with a base64-encoded ESNIKeys structure.\r\n\r\nThe presentation format of the SvcParamValue is a fully qualified\r\ndomain name.  The wire format of the SvcParamValue is the domain name\r\nrepresented as a sequence of length-prefixed labels as in Section 3.1\r\nof {{!RFC1035}}.\r\n\r\nTo translate this parameter to Alt-Svc, an \"esnikeys\"\r\nparameter should be generated with the contents of the \r\nTXT record pointed to by the domain name in the SvcParamValue.\r\n\r\nIf both \"esnikeys\" and \"esnikeysref\" parameters are specified in a\r\nSVCB RR, the \"esnikeysref\" parameter MUST be ignored.\r\n\r\n\r\nTODO: what happens if the TTL of the esnikeysref target is *shorter*\r\nthan that of the SVCB record?  Requiring replacement adds lots\r\nof complexity.  Perhaps a SHOULD on relative TTLs with a warning\r\nthat clients may not reconstruct the Alt-Svc?\r\n\r\nTODO: add logic on failure handling, perhaps also on when\r\nto wait, as well as on prefering entries with literal \"esnikeys\"\r\nwhen no \"esnikeysref\" value is in the DNS cache.\r\n\r\nTODO: does this add to much complexity?  This is in this draft to\r\nexpore the viability of external references since some people seemed\r\ninterested.\r\n\r\n\r\n\r\n",
      "createdAt": "2019-08-19T21:33:17Z",
      "updatedAt": "2019-08-19T21:51:46Z",
      "closedAt": "2019-08-19T21:51:46Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as WONTFIX for the moment.",
          "createdAt": "2019-08-19T21:51:45Z",
          "updatedAt": "2019-08-19T21:51:45Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "MDU6SXNzdWU0ODI1NDU4MDI=",
      "title": "HTTPSSVC: define \"ips\" SvcParamKey",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/49",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Define a way to include/inline a list of A and AAAA values to optimize for when SvcDomainName has not yet been resolved.  \r\n\r\nThe current proposal is to create a separate draft for this purpose defining an \"ips\" SvcParamKey that can be used as a hint while waiting on SvcDomainName.\r\n\r\nThis is likely needed to retain parity with optimizations in the ESNI draft.",
      "createdAt": "2019-08-19T21:52:30Z",
      "updatedAt": "2019-09-23T21:18:15Z",
      "closedAt": "2019-09-23T21:18:15Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Included as ipv4hint and ipv6hint in the latest draft.",
          "createdAt": "2019-09-23T21:18:15Z",
          "updatedAt": "2019-09-23T21:18:15Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWU0OTc3NjUzNTc=",
      "title": "Clarify RRset preservation with multiple AliasForm records [Bob Harold]",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/55",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently says that recursives must ignore additional AliasForm records, because only one is allowed.  (Following all aliases in parallel would allow some terrifying exponential blowup.)  We should clarify that recursives should nevertheless forward the entire RRset intact, in order to preserve DNSSEC validity.",
      "createdAt": "2019-09-24T15:32:33Z",
      "updatedAt": "2019-11-04T15:10:32Z",
      "closedAt": "2019-11-04T15:10:32Z",
      "comments": []
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWU0OTg5NTQwMTM=",
      "title": "Consider limiting chain lengths to 1",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/57",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wg"
      ],
      "body": "It's not clear that we have a use case for SVCB chains containing more than one AliasForm record.  The purpose of AliasForm is mostly for aliasing the apex; everything else can pretty much be handled with CNAME (e.g. AliasForm -> CNAME -> CNAME -> SvcForm)\r\n\r\nAt a minimum, limiting the chain length to 1 would seem to reduce the likelihood of a performance footgun.",
      "createdAt": "2019-09-26T15:18:15Z",
      "updatedAt": "2020-05-29T19:41:04Z",
      "closedAt": "2020-05-29T19:41:04Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I'd agree, at least as a SHOULD?  The counter-argument would be that clients will do SVCB lookups on the SvcDomainName of the AliasForm record and if they get back another AliasForm record we could enter ambiguous territory.  (I believe CNAME originally prohibited chaining but it ended up being a common pattern that got used anyways.)",
          "createdAt": "2019-09-26T15:22:49Z",
          "updatedAt": "2019-09-26T15:22:49Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's only ambiguous if we choose to make it ambiguous. I think, in that case, the client ought to reject the record. That way administrators know their config didn't work and get back on the well-lit path.\r\n\r\nI'm not familiar with the history of CNAMEs, but my guess is it was prohibited but clients accepted it anyway? In that case, yeah, the natural result is the prohibition gets dropped. Invariants are only invariants if enforced.",
          "createdAt": "2019-09-26T17:32:45Z",
          "updatedAt": "2019-09-26T17:32:45Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "AliasForm only exists to provide apex aliasing, so I think the question is: can we imagine any need for a chain of aliases where more than one is the apex of its zone.  For example:\r\n\r\n```\r\nfoo.example -> www.foo.example -> cdn.example -> cdn2.example.com -> us-east.cdn2.example.com\r\nAliasForm      CNAME              AliasForm      ServiceForm         AAAA\r\n```\r\n\r\nIn this example, \"cdn.example\" is a vanity alias for \"cdn2.example.com\", but because it's a zone apex, it can't use CNAME.  If the CDN were willing to add a label to the vanity alias, it could use a CNAME instead.  Alternatively, the CDN could place the ServiceForm record there, although that might be inconvenient if \"cdn.example\" is a simple static domain, because the ServiceForm record is highly \"dynamic\" (frequently updated and geo-targeted).\r\n\r\nGiven that CDN apex vanity aliases are currently impossible, I don't think this is a motivating use case, but I would still like to ask the working group before ruling it out.\r\n\r\nEDIT: A more compelling use case might be for zone structure flexibility.  If AliasForm can appear more than once, that makes it easier for CNAME users to add zone cuts that would put the CNAME at an apex, since they can replace the CNAME with an AliasForm without worrying that there might already be an AliasForm earlier in the chain.",
          "createdAt": "2019-11-04T16:57:45Z",
          "updatedAt": "2019-11-04T19:27:54Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF 106, the consensus of DNSOP seemed to oppose this kind of limit.  Recursive resolver developers explained that applying different limits to SVCB and CNAME would be difficult to implement, and some also declared that domain owners are to be blamed if they choose an inefficient layout of their own zone.  Some declared that, regardless of the spec, they would not enforce any low limit on the number of alias steps in their implementations.\r\n\r\nI think we could still specify that domain owners MUST NOT include more than one alias in a chain, and recursive/client implementors MAY impose limits as low as 1.",
          "createdAt": "2019-11-25T20:21:40Z",
          "updatedAt": "2019-11-25T20:21:40Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "After some further discussion, a new idea: \r\n * domain owners MUST NOT include more than one alias in a chain\r\n * recursive implementors MAY stop following aliases after the first\r\n * client implementors SHOULD stop following aliases after the first\r\n * client implementors SHOULD reject responses from recursive resolvers that contain chains with multiple aliases\r\n\r\nThis gets us reliable, consistent behavior without imposing any extra constraints on the recursive implementor.\r\n\r\nTODO: Figure out what happens when the chain length is exceeded in each case.  Does resolution fail or fall back?  Does HSTS still apply?",
          "createdAt": "2019-12-05T01:57:38Z",
          "updatedAt": "2019-12-05T01:57:38Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That seems reasonable to me. On the HSTS side, you don't actually need to follow anything when resolving an HTTP URL, right? Once you see an HTTPSSVC record of any flavor, you know you're going to abandon this URL and try a different URL. (Of course, that retry is likely going to make the same DNS query---though not necessarily depending on HTTP cache or Alt-Svc---so it's not a waste to follow it anyway.)",
          "createdAt": "2019-12-05T15:31:29Z",
          "updatedAt": "2019-12-05T15:31:29Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "We should remove the \"(8?)\" guidance and instead propose that AliasForm can't point to AliasForm (without imposing any restrictions on CNAMEs before, during, and after).  We'll need to review this with the commenters from the WG.",
          "createdAt": "2019-12-13T18:55:00Z",
          "updatedAt": "2019-12-13T18:55:00Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I brought this proposal to the group in December, but there did not appear to be consensus for a tight limit like this: https://mailarchive.ietf.org/arch/msg/dnsop/Fim9mbPIfSBwBQg-3uU6wwSfmhg/",
          "createdAt": "2020-05-25T02:07:47Z",
          "updatedAt": "2020-05-25T02:07:47Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Please review #151, which relaxes the requirement here in a way that I hope reflects the WG consensus (or lack thereof).",
          "createdAt": "2020-05-25T02:44:47Z",
          "updatedAt": "2020-05-25T02:44:47Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "I wonder if the MUST rules around following at least one link should be changed to a SHOULD since, while it's necessary in the general case to support apex delegation, it seems like you could come up with special-case situations where it would be fine to skip chain following eg looking up specific records where the stub has specific knowledge that there shouldn't be a chain at all.\r\n\r\nBut either way, I think this new language works well for Chrome.",
          "createdAt": "2020-05-26T21:09:27Z",
          "updatedAt": "2020-05-26T21:09:27Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU0OTg5NjMyMzg=",
      "title": "Consider removing the in-band Alt-Svc precedence guarantee",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/58",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, in-band Alt-Svc always has precedence over HTTPSSVC, and the presence of a cached Alt-Svc is supposed to disable the HTTPSSVC query altogether.  However, this could be a problem for Chrome.\r\n\r\nChrome currently implements only \"local Alt-Svc\", i.e. Alt-Svc where the origin hostname is empty.  All other Alt-Svc headers are ignored.\r\n\r\nConsider a site hosted in a multi-CDN configuration, using QUIC on both CDNs.  Currently, that site could send a header like `h3=:443`, and Chrome would upgrade to QUIC.\r\n\r\nNow suppose that both CDNs support ESNI.  The site could send additional Alt-Svc headers like `h3=cdn1.example:443; esnikeys=ABC...` and `h3=cdn2.example:443; esnikeys=123...`, but Chrome would ignore both of these, so Chrome users would get QUIC but not ESNI.\r\n\r\nIf some Chrome users can query HTTPSSVC, those users could get the full package for ESNI through the DNS.  However, the presence of `h3=:443` in the Alt-Svc cache would prevent them from even doing the HTTPSSVC query (in the current draft).\r\n\r\nA straightforward solution here would be to declare that the precedence of HTTPSSVC vs. Alt-Svc is implementation-defined.  This might reduce the ability of origins to fine-tune suboptimal HTTPSSVC, but it gives clients more flexibility to do what makes sense for them.",
      "createdAt": "2019-09-26T15:34:12Z",
      "updatedAt": "2019-11-04T21:30:03Z",
      "closedAt": "2019-11-04T21:30:03Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Another example of the sort of complex interactions between Alt-Svc and HTTPSSVC: HTTPSSVC's http-to-https upgrade does not have an Alt-Svc analog. That means an existing Alt-Svc entry on an http origin would mask off the upgrade behavior and prevent a client from discovering it.\r\n\r\nAlt-Svc is mostly an https-only thing, so this mostly doesn't matter, though I believe RFC8164 defines an http use. (Although clients [shouldn't implement](https://www.mozilla.org/en-US/security/advisories/mfsa2015-44/) RFC8164 anyway.)\r\n\r\nIn general, any property provided by HTTPSSVC but not Alt-Svc becomes a bit of a pickle.",
          "createdAt": "2019-09-26T16:36:06Z",
          "updatedAt": "2019-09-26T16:36:06Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "@davidben, I think you're incorrect in pointing to that vulnerability as a reason not to implement RFC8164.  Mozilla had a bug, wherein certificate verification could be bypassed.  They fixed it.  That doesn't say anything about the mechanism itself, which continues to require that the certificate be checked.",
          "createdAt": "2019-10-09T14:22:51Z",
          "updatedAt": "2019-10-09T14:22:51Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right, it's possible to implement it correctly. But it's a huge source of complexity risk in a very security-sensitive part of a modern HTTP client, with that Mozilla bug demonstrating that risk. Such a risk needs to be matched by benefit, which I don't believe exists.\r\n\r\nRegardless, that's an aside. RFC8164, not the lack of it, is a reason why the alt-svc/httpssvc interactions are a problem.",
          "createdAt": "2019-10-09T16:57:04Z",
          "updatedAt": "2019-10-09T16:57:21Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This precedence rule has been removed, replaced by a \"MAY\".",
          "createdAt": "2019-11-04T21:30:03Z",
          "updatedAt": "2019-11-04T21:30:03Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "MDU6SXNzdWU0OTg5NjQzNzU=",
      "title": "Clarify rationale for SVCB/HTTPSSVC split",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/59",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "We've gotten a few questions about why these aren't a single RR type.  The text could be more explicit on the design rationale for this.",
      "createdAt": "2019-09-26T15:36:08Z",
      "updatedAt": "2020-01-14T22:54:29Z",
      "closedAt": "2020-01-14T22:54:29Z",
      "comments": []
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWU0OTg5NjYzMTM=",
      "title": "Reduce emphasis on HTTPSSVC <-> Alt-Svc equivalence",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/60",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Given that conversion between HTTPSSVC and Alt-Svc is now potentially quite lossy (any unmapped or unrecognized keys are dropped) and has unclear security properties, we should probably de-emphasize the idea of converting between them, and focus on their parallel structure instead.",
      "createdAt": "2019-09-26T15:39:28Z",
      "updatedAt": "2019-11-04T15:07:40Z",
      "closedAt": "2019-11-04T15:07:40Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On the unclear security properties front, I'm a little dubious of this text:\r\n\r\n> SVCB/HTTPSSVC RRs and Alt-Svc Field Values are intended for distribution over untrusted channels, and clients are REQUIRED to verify that the alternative service is authoritative for the origin (Section 2.1 of {{!AltSvc}}).\r\n\r\nThe second clause does follow from section 2.1, but I'm not sure the first clause does. Alt-Svc is currently only ever delivered over a connection that is authoritative for the origin. HTTPSSVC is not. For more fun, neither is even strictly more secure than the other, depending on to what extent URLs like https://university.example/~some-student/evil.php are in your threat model.\r\n\r\nThis is somewhat a theoretical issue since HTTPSSVC is appropriate for all the Alt-Svc keys that are currently defined. Perhaps we need to freeze Alt-Svc or be very discerning about how to define it going forwards. There's already been some confusion in the security models in https://github.com/httpwg/http-extensions/pull/866.\r\n\r\n(Really this reflects flaws in Alt-Svc than anything else. It tries to solve too many problems at once and awkwardness like this and #58 are the result.)",
          "createdAt": "2019-09-26T16:28:03Z",
          "updatedAt": "2019-09-26T16:28:03Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Alt-Svc is supposed to be delivered over a connection that is a) authorized to speak for the origin (either the origin itself or a duly appointed alternative), and b) at least as secure as the origin.  For an https:// origin, that means it came over TLS; for an http:// origin, it's fine if it didn't.\r\n\r\nHowever, if you can control the origin's DNS records and possess a certificate for the origin, you're as authorized to speak for the origin as it gets, in practice.  I think to achieve the second requirement, you probably do want guarantees that it wasn't modified in transit -- at least DoT/DoH (because the DNS server and anything upstream of it could have subverted DNS anyway), but even better if you have DNSsec.",
          "createdAt": "2019-10-09T14:20:49Z",
          "updatedAt": "2019-10-09T14:20:49Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "DoT/DoH does not give you the second requirement because the resolver does not have a certificate. That's exactly the unclear security property.",
          "createdAt": "2019-10-09T16:54:07Z",
          "updatedAt": "2019-10-09T16:54:07Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "RFC 8484 says that the resolver's identity is validated per RFC2818, i.e. with a cert, so you do have some authentication of the resolver -- but no proof of any relationship to the site.  A cursory read of DoT suggests that the client at a minimum *need not* check the server's validity, so you're definitely correct there.\r\n\r\nRegardless, this seems to all circle back to the question of whether DNS is a security factor in HTTP.  If a DNS entry has come from an unauthenticated source, but the certificate is valid -- is that sufficient?  What if the DNS entry was DNSsec-signed?\r\n\r\nThere has been fairly strong consensus that holding the relevant certificate is enough proof of authority, DNS notwithstanding.  I happen to think that consensus is somewhat misguided, but it's at least consistent.",
          "createdAt": "2019-10-11T19:03:43Z",
          "updatedAt": "2019-10-11T19:04:54Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "My conclusion from this discussion is that, while nothing in Alt-Svc currently requires secure delivery, the requirements on Alt-Svc delivery security are not actually specified anywhere, so Alt-Svc could theoretically be extended in a way that relies on secure delivery.  I'll update the text to avoid implying otherwise.",
          "createdAt": "2019-10-11T20:11:48Z",
          "updatedAt": "2019-10-11T20:11:48Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Right, what @bemasc says. @MikeBishop, I think you and I are talking about different things. My comments have nothing to do with the DNS second factor. It's the much more important origin certificate first factor that's missing. While I certainly hope any DoT or DoH client will check the resolver's certificate (otherwise what is the point?), that just strengthens the second factor. It doesn't replace the first factor.",
          "createdAt": "2019-10-11T20:37:19Z",
          "updatedAt": "2019-10-11T20:37:19Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And, to clarify, this isn't a comment on HTTPSSVC in a vacuum. DNS-delivered HTTPSSVC is just fine without that first factor because all fields currently defined there give no more power than the resolver already has. (It can make the site unavailable, or cause information it already has (SNI) to be leaked.)\r\n\r\nThe concern is simply that HTTPSSVC asserts a strong association with Alt-Svc (happily less so now), which is typically delivered in a context that has *both* factors. (With the footnote that, if your threat model includes `users/attacker/evil.php` delivering a bad origin-wide header, Alt-Svc isn't quite strictly stronger.) I'd like to avoid a situation where someone adds an Alt-Svc field which only makes sense in the latter but not the former, such as https://github.com/httpwg/http-extensions/pull/866.",
          "createdAt": "2019-10-11T20:44:12Z",
          "updatedAt": "2019-10-11T20:44:12Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "@davidben, I think I see what you're suggesting.  Does this capture it?\r\n\r\nWhen Alt-Svc is delivered over HTTPS, you have trust -- from the certificate and possibly from the earlier DNS resolution -- that the record was in fact delivered by the origin.  That is, you trust the record itself, and the certificate check on connection is only to verify that the alternative connection hasn't been subverted.\r\n\r\nWith HTTPSSVC, unless you have DNSsec, there are one or more intermediaries who might have changed that record en route, meaning you can't fully trust it.  The certificate check on the declared alternative therefore serves to confirm the authenticity of the record itself, not just the connection to the alternative.\r\n\r\nThis is also true for Alt-Svc delivered over HTTP -- it could have been tampered with in transit, and therefore only the certificate confirms that the Alt-Svc field was legitimate.  An intermediary who could tamper with the Alt-Svc field could also have tampered with the content, but Alt-Svc permits them to persistent that control.  They couldn't otherwise do that, not even controlling the resolver and a certificate for the target.",
          "createdAt": "2019-10-14T18:25:48Z",
          "updatedAt": "2019-10-14T18:26:29Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we're broadly in agreement. Some nitpicks:\r\n\r\n> That is, you trust the [Alt-Svc] record itself, and the certificate check on connection is only to verify that the alternative connection hasn't been subverted.\r\n>\r\n> [...] The certificate check on the [HTTPSSVC-]declared alternative therefore serves to confirm the authenticity of the record itself, not just the connection to the alternative.\r\n\r\nI think your framing uses assumptions from the currently defined Alt-Svc and HTTPSSVC parameters. Both systems are extensible and I don't see any text in Alt-Svc which implies new parameters must account for the possibility of untrusted records, which means treating them equivalent is problematic.\r\n\r\nNote also the certificate check on the HTTPSSVC alternative does *not* confirm authenticity of the record. Maybe one of the parameters not directly involved in verification was bad. Or maybe it was all invalid, but the network directed the invalid alternative name to the real server, in an attempt to get you to believe the rest of the HTTPSSVC record. (This is in the same way certificate checks do not validate the A/AAAA record you used. You can't skip TLS tomorrow assuming the IP was good.)\r\n\r\n> [...] unless you have DNSsec [...]\r\n\r\nThe Web PKI and DNSSEC are different PKIs with different properties, so they're not automatically interchangeable. For better or worse, most HTTPS uses these days are based off the Web PKI, not the DNSSEC PKI. But, yeah, DNSSEC is certainly trying to actually authenticate the record, unlike DoT/DoH.\r\n\r\n> This is also true for Alt-Svc delivered over HTTP -- it could have been tampered with in transit, and therefore only the certificate confirms that the Alt-Svc field was legitimate.\r\n\r\nI not quite sure what this is referring to. You shouldn't be able to deliver an Alt-Svc for https://example.com over http://example.com and the latter has no certificate. (And, per above, the certificate check wouldn't retroactively verify the Alt-Svc record.)\r\n\r\nIs this a reference to our RFC8164 discussion in issue #58? That was about a different (but related) issue: believing Alt-Svc shadows HTTPSSVC means Alt-Svc will shadow any HTTPSSVC-only features, current or future. We already have one HTTPSSVC-only feature: for HTTP origins, HTTPSSVC automatically redirects. Alt-Svc is mostly HTTPS, but RFC8164 defines one for HTTP origins.",
          "createdAt": "2019-10-15T01:24:34Z",
          "updatedAt": "2019-10-15T01:24:34Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWU0OTkyNjUwMTA=",
      "title": "Semi-colon also needs to be escaped when used in master files.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/61",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\r\n   basic-visible = %x21 / %x23-5B / %x5D-7E ; VCHAR minus DQUOTE and \"\\\"\r\n   escaped-char  = \"\\\" (VCHAR / WSP)\r\n   contiguous    = *(basic-visible / escaped-char)\r\n   quoted-string = DQUOTE *(contiguous / WSP) DQUOTE\r\n   value         = quoted-string / contiguous\r\n   pair          = display-key \"=\" value\r\n```\r\nfails to account for ';' which is the comment leader in master files.",
      "createdAt": "2019-09-27T06:41:12Z",
      "updatedAt": "2019-10-13T02:20:31Z",
      "closedAt": "2019-10-13T02:20:31Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!  Would you also want to require semicolons to be escaped when they are inside a pair of double-quotes?",
          "createdAt": "2019-09-27T11:07:54Z",
          "updatedAt": "2019-09-27T11:07:54Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "No as they are already escaped. \n\n-- \nMark Andrews\n\n> On 27 Sep 2019, at 21:07, Benjamin M. Schwartz <notifications@github.com> wrote:\n> \n> \ufeff\n> Thanks! Would you also want to require semicolons to be escaped when they are inside a pair of double-quotes?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
          "createdAt": "2019-09-29T06:59:51Z",
          "updatedAt": "2019-09-29T06:59:51Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWU0OTk2MzQzNTI=",
      "title": "Consider switching the SvcDomainName and SvcFieldPriority in presentation format",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/63",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wg"
      ],
      "body": "Currently, the format is `[SvcFieldPriority] [SvcDomainName] [SvcFieldValue]`.  I think it should probably be `[SvcDomainName] [SvcFieldPriority] [SvcFieldValue]`.  Then in AliasForm, the redundant `0` priority can be omitted without making the parser more complex.\r\n\r\nWe could maintain the current wire format, or reverse the order there too.",
      "createdAt": "2019-09-27T20:25:03Z",
      "updatedAt": "2019-11-25T20:23:39Z",
      "closedAt": "2019-11-25T20:23:38Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "The counter-point and why I chose the current ordering is for consistency with SRV, URI, and MX,\r\nboth of which have the priority come before the target domain name.  NAPTR also has order and pref come before other things.  \r\n\r\nIt seems like it could be a usability issue here to have ordering that is less consistent than the precedent set by most other record types.",
          "createdAt": "2019-09-27T20:38:22Z",
          "updatedAt": "2019-09-27T20:38:22Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "(Crazy idea could be for SvcFieldPriority to be a weight in AliasForm.  ie, if multiple are present then clients pick between one based on weight?  Not sure if this is worth complexity.)",
          "createdAt": "2019-09-27T20:39:56Z",
          "updatedAt": "2019-09-27T20:39:56Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think there's any risk of users getting it wrong (you'll get a parse error if you put them in backwards), but I take your point that there is a strong tradition here.  I'd like to poll some implementers and come back to this.",
          "createdAt": "2019-09-27T20:44:19Z",
          "updatedAt": "2019-09-27T20:44:19Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "WG seems to favor the current format",
          "createdAt": "2019-11-25T20:23:38Z",
          "updatedAt": "2019-11-25T20:23:38Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "MDU6SXNzdWU1MTg1ODE0MjQ=",
      "title": "Redesign ALPN mismatch handling",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/73",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "wg"
      ],
      "body": "Currently, if a server publishes a QUIC-only HTTPSSVC RRSet with ESNI, there is no way for a client to fall back to a non-QUIC connection, because doing so would reveal the SNI.  This could increase the likelihood of partial outages for server admins who haven't considered the small fraction of users whose network path does not support QUIC.\r\n\r\nReviewers have reported concerns that this creates an undesirable level of fragility.  We should consider whether there is an alternative design that would be less likely to result in accidental breakage.",
      "createdAt": "2019-11-06T16:23:13Z",
      "updatedAt": "2020-02-14T21:28:51Z",
      "closedAt": "2020-02-14T21:28:51Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "After some thought, I'm leaning towards just declaring that if an \"h3\" attempt fails you should (may?) fall back to \"h2\" with the rest of the parameters unchanged.  That's a hack, and it won't always work (e.g. when H3 and H2 aren't colocated), but it avoids the \"footgun\" where an ordinary H3+H2 server becomes QUIC-only due to a server admin publishing an H3-only HTTPSSVC RRSet.",
          "createdAt": "2019-11-18T10:32:51Z",
          "updatedAt": "2019-11-18T10:32:51Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I've just learned of another closely related case: HTTP/1.1-only clients.  Just like an HTTP/2 client can't use an RR that has `alpn=h3`, an HTTP/1.1-only client can't use an RR that has `alpn=h2`.  This seems like a common mistake that people might make, but there are significant use cases for HTTP/1.1 with HTTPSSVC (e.g. WebSocket, which is currently mostly HTTP/1.1-only despite RFC 8441).\r\n\r\nAs with QUIC fallback, this can be handled within the current draft, but it requires any server that uses ESNI to remember to publish RRs for both `alpn=http/1.1` and `alpn=h2` (and `alpn=h3` if they do QUIC) in each RRSet.  Failure to include an `alpn=http/1.1` RR will cause silent loss of ESNI protection for HTTP/1.1 clients, which seems like a footgun.\r\n\r\nWe should think a little bit harder about what the ALPN field means, and whether there's a way to convey the right information (mostly whether this endpoint supports QUIC) in a way that makes misconfiguration harder.",
          "createdAt": "2019-12-04T19:10:28Z",
          "updatedAt": "2019-12-04T19:10:28Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "New plan: `proto` (I promise I support) and `no_proto`* (I don't support so don't bother trying).  For HTTPSSVC, \"http/1.1\" and \"h2\" are in the default set.  Multiple keys are allowed.\r\n\r\nBoth share the ALPN registry.\r\n\r\n*Need to add \"_\" to the allowed characters.",
          "createdAt": "2019-12-13T18:43:40Z",
          "updatedAt": "2019-12-13T18:43:40Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How does this interact with someone adding a new ALPN token that's used out of the TCP + TLS + {http/1.1, h2} entrypoint? What is the mapping to Alt-Svc, given that Alt-Svc got ALPN wrong? How does one handle the HTTPSSVC http/1.1 vs h2 subsetting getting out of sync with the server?\r\n\r\nThe root problem here is we're trying to repurpose ALPN, an in-band mid-connection-establishment variant selector, for out-of-band pre-connection-establishment entrypoint selector. These two objects don't have the same type. Specifying either \"http/1.1\" or \"h2\" in there doesn't make sense. Rather, we should add a name for the TCP + TLS + {any applicable HTTPS variant} stack to stick in there and drop the in-band vs. out-of-band interactions.",
          "createdAt": "2019-12-14T03:56:56Z",
          "updatedAt": "2019-12-14T03:57:26Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "One option may be to share the ALPN registry but be explicit about the differences here.  (ie, require each of the tokens to have a semantic meaning defined here.)\r\n\r\nShould clients only offer (or only accept server offers) of ALPN tokens in the set \"allowed\" by the HTTPSSVC set?  Or is that counter-productive?",
          "createdAt": "2019-12-14T03:59:43Z",
          "updatedAt": "2019-12-14T03:59:43Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Should clients only offer (or only accept server offers) of ALPN tokens in the set \"allowed\" by the HTTPSSVC set? Or is that counter-productive?\r\n\r\nRight, this mess is why Alt-Svc's use of ALPN was wrong. If we say yes here, we break downgrade protection of the protocol negotiation. That's a nonstarter. If we say no here, we have to worry about what happens if the server picks something outside of the set. Alt-Svc says it's an error, which means instead we have a deployment hazard. The PR just says any client behavior is fine. Ambiguity breeds interoperability problems, so that's no good. The spec should say what it means. We can't say anything in the same entrypoint is good because that's not defined. It's also bizarre because that means \"http/1.1\" and \"h2\" are just aliases for the thing we've failed to define.",
          "createdAt": "2019-12-14T04:08:35Z",
          "updatedAt": "2019-12-14T04:10:06Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "That might be a good argument for disconnecting these protocols from ALPN and having a separate registry for them with definitions that are independent of Alt-Svc?  I think what we want is:\r\n* Extensible (ie, can add new protocols down the road)\r\n* Able to have service endpoint support a subset of protocols.  (eg, HTTP/3 using unstable anycast IPs because the connection IDs are big enough to fix up and reforward during route changes, whereas TCP-based H/1.1 and H2 stick somewhere more stable).  Or another use-case is rolling out a new protocol to a subset of endpoints.\r\n* Minimize deployment hazards of all forms.\r\n* Have good downgrade protection (especially given DNS is often unauthenticated)\r\n* ... (maybe some other properties?)",
          "createdAt": "2019-12-14T04:15:06Z",
          "updatedAt": "2019-12-14T04:15:06Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(I meant to do a proper writeup of this issue this week but didn't end up having time. :-( Ah well, discussion on GitHub works.)\r\n\r\nI think separate registry or just overloading the existing one works. Separate is probably cleaner, but allocating new tokens may be easier to wedge back into Alt-Svc. I do want to touch on two of your points though, deployment hazards and downgrade protection. I think these attributes may be somewhat forced by whether the negotiation is in-band or out-of-band.\r\n\r\nALPN, in its original form, is an in-band protocol variant selector. It's negotiated in the TLS handshake, which gives us nice properties:\r\n* Deployment concerns are minimal. A single server can unilaterally reconfigure itself without consequences, so gradual rollout, rollback, etc., is natural.\r\n* Downgrade protection is natural. TLS promises that the protocol you get is the one you should have gotten.\r\n\r\nThis makes this a nice pattern for HTTP/2. We get the above for free. QUIC runs over UDP and can't use this trick. It needs an out-of-band signal, perhaps in an HTTP header (`Alt-Svc`, formerly `Alternate-Protocol`) or the DNS (this draft). Both of these involve some client state (caching, etc.). This has analogous consequences:\r\n* The server's configuration may get out of sync with the client's state. A priori, this means connection failure, so we must handle this. We pair QUIC with a TCP fallback (or run in parallel), which we need anyway due to network intolerance. Corollary: the TCP fallback is critical.\r\n* We do not have natural downgrade protection. An attacker can cause us to negotiate the \"wrong\" one of the two. Indeed we *want* this for network intolerance. Corollary: the QUIC and TCP flows must be capable of comparable security.\r\n\r\nI may be overgeneralizing from these examples, but these two properties seem closely related. Downgrade protection means you selected the thing you were supposed to, but if your selection is based on possibly stale information, it's hard to have downgrade protection. (Unless maybe the server reacts to your stale information and has an in-band fixup operation, in which case the out-of-band signal is more a hint than a selection mechanism.)\r\n\r\nAnyway, I think this framing helps illustrate how different of animals TLS/ALPN and HTTPSSVC/ALPN are.",
          "createdAt": "2019-12-14T04:33:17Z",
          "updatedAt": "2019-12-14T04:35:46Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm OK with replacing \"h2\" with \"tls\" in HTTPSSVC, but I want to point out that this would cause the spec to lean _more_ heavily on clients having a full implementation of fallback.\r\n\r\nConsider a future CDN that drops HTTP/1.1 support for some of its fleet.  In the scheme of PR #89, endpoints without HTTP/1.1 support are clearly marked, so clients that need HTTP/1.1 can identify the relevant endpoints before the connection attempt.  If instead of (h2, h3) the protocol set was (tls, quic), clients would have to attempt the connection before learning that \"http/1.1\" is not supported.\r\n\r\nTo generalize, whenever a client might be compatible with only a subset of endpoints, the client must either be able to tell this from the DNS record or must implement fallback.  The list of ALPNs isn't necessary for enabling the client to attempt a connection to an endpoint, but it is useful to allow clients to avoid attempts that will fail.",
          "createdAt": "2019-12-15T22:18:36Z",
          "updatedAt": "2019-12-15T22:18:36Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think that holds. Rather, I think we stop pretending to support a deployment doing that. If you're ready to drop HTTP/1.1 support (maybe you only care about modern clients), go ahead and drop it. If you're not, your fleet should still support HTTP/1.1.\r\n\r\nYou could make the same set of statements about a server deployment that wants to disable TLS 1.2 on some machines but not others. Or a server deployment that wants a completely different set of TLS cipher suite capabilities on each machine. With unbounded complexity we could express and handle unbounded partial deployments, but that doesn't mean it's a good idea.",
          "createdAt": "2019-12-15T23:05:25Z",
          "updatedAt": "2019-12-15T23:06:14Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "In the eventual world where QUIC has version negotiation and ALPN happens in-band for both TCP and UDP, most of what you really need is an indication of TCP vs. UDP and let TLS take care of the specifics at connection-time.  However, a hint about what is supported can make things faster, especially in the QUIC case.\r\n\r\nThe only case that doesn't cover is when you don't speak any of the protocol variants supported by that endpoint.  The current system lets you discover that without trying a connection.",
          "createdAt": "2019-12-19T16:35:56Z",
          "updatedAt": "2019-12-19T16:35:56Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An ALPN hint is somewhere between not useful at all and barely useful. I say barely useful because the one-bit \"only HTTP/1.1\" vs \"supports something not HTTP/1.1\" does allow us to avoid opening some connections that we'd otherwise throw away if, say, 10 HTTP requests enter the net stack at once and we've never talked to this server before.\r\n\r\nHowever, if you want an ALPN or QUIC version hint, the needs to be explicit that it is a hint. The key thing about hints is that they are non-binding. They do not impact how an individual connection is negotiated, which is important for both the downgrade protection and deployability aspects above.\r\n\r\nIn contrast, the TCP+TLS vs QUIC indication is not a hint. It fundamentally impacts how an individual connection is negotiated. It does not have the downgrade protection and deployability properties. And if you want to support separate IPs for HTTP/2 and HTTP/3, it cannot be a hint.\r\n\r\nThese two use cases cannot be mixed up. Otherwise we land in exactly this problem. Any solution here *must* split the two apart.",
          "createdAt": "2019-12-19T17:50:09Z",
          "updatedAt": "2019-12-19T17:50:52Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, here's a stronger reason why having different ALPN tokens on different parts of your fleet is no good. Suppose the CDN wanted to have some h1-only machines and some h2-only machines. Even if I get directed to the right one via HTTPSSVC, the network can redirect my packets to the h1-only machines and I get force down to h1.\r\n\r\nThe security model for multi-instance TLS services has always that we assume all instances of a service are equivalent and downgrade protection is limited to the weakest instance. Due to deployment requirements, instances may have different configurations temporarily, but we assume it eventually converges over time.\r\n\r\nThus these kinds of uneven deployment games are only acceptable in scenarios where we don't care about downgrade protection (TCP vs QUIC) because we met the same needs in other ways (QUIC must be able to meet TCP's security level).",
          "createdAt": "2019-12-19T19:20:42Z",
          "updatedAt": "2019-12-19T19:21:06Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I've opened a new PR to explore a version where we negotiate the transport up front, instead of the ALPN: https://github.com/MikeBishop/dns-alt-svc/pull/97",
          "createdAt": "2019-12-19T20:25:47Z",
          "updatedAt": "2019-12-19T20:25:47Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "MDU6SXNzdWU1MjIzMjkyMTI=",
      "title": "Remove TTL shortening recommendation",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/74",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "The current text recommends shortening the TTL to compensate for misbehaving clients.  This is not a good recommendation, since some clients will just ignore the shorter TTL.  Instead, we should just mention that servers cannot rely on prompt expiration.\r\n\r\nCredit: @puneetsood",
      "createdAt": "2019-11-13T16:23:04Z",
      "updatedAt": "2020-01-15T22:51:41Z",
      "closedAt": "2020-01-15T22:51:41Z",
      "comments": []
    },
    {
      "number": 75,
      "id": "MDU6SXNzdWU1MjIzMzQxMTM=",
      "title": "Clarity improvements",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/75",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "* Disentangle description of recursive and authoritative server behavior in section 4\r\n* Explain why alias and service forms need to share an RR type\r\n* Clarify interaction between CNAME and AliasForm in Section 4\r\n* State clearly that only A and AAAA records will ever need to be added to the response\r\n",
      "createdAt": "2019-11-13T16:31:01Z",
      "updatedAt": "2020-01-15T22:50:12Z",
      "closedAt": "2020-01-15T22:50:12Z",
      "comments": []
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU1MjI0ODY1NjE=",
      "title": "Clarify behavior when alpn=h2 but origin only supports http/1.1 (and vice-versa)",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/79",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should clarify the behavior for how alpn=h2 and alpn=http/1.1 interact with ALPN negotiation over TLS with an origin, including in cases where only one is specified in the DNS but where only the other can get negotiated via TLA.\r\n\r\nOne option would be to call this out and recommend that \"h2\" can negotiate to http/1.1 and/or h2 if only one is specified in HTTPSSVC records.",
      "createdAt": "2019-11-13T21:36:04Z",
      "updatedAt": "2019-11-14T18:17:49Z",
      "closedAt": "2019-11-14T18:17:48Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I could see something like \"client MUST include the specified ALPN and SHOULD include any others that it would also support\".\r\n\r\n> in cases where only one is specified in the DNS but where only the other can get negotiated\r\n\r\nWhy would this happen?\r\n",
          "createdAt": "2019-11-13T21:46:33Z",
          "updatedAt": "2019-11-13T21:46:33Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@MikeBishop What do you think is supposed to happen with ALPN in Alt-Svc?  If the Alt-Svc says \"h2=...\", can the client also offer \"http/1.1\" in the ClientHello?  RFC 7838 doesn't seem very clear on this.",
          "createdAt": "2019-11-13T21:49:26Z",
          "updatedAt": "2019-11-13T21:49:26Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Synchronization between DNS configuration and HTTP/TLS server configuration seems challenging.  I suspect it is highly likely that mismatches here will happen regularly, especially as the h2 vs http/1.1 variations may be a little more subtle than QUIC.  It would be nice if things here had good usability and just worked as long as behaviors are safe and robust.",
          "createdAt": "2019-11-13T22:04:22Z",
          "updatedAt": "2019-11-13T22:04:22Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I added text for this to #78.",
          "createdAt": "2019-11-13T22:22:12Z",
          "updatedAt": "2019-11-13T22:22:12Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "As best I recall and without rechecking 7838:  With Alt-Svc, the client can offer anything, but if the connection winds up not having the properties the Alt-Svc entry told it to expect, it's not usable.  We might choose to depart from that, however.",
          "createdAt": "2019-11-14T01:58:08Z",
          "updatedAt": "2019-11-14T01:58:08Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the explanation.  Please take a look at #78 for the proposed change.",
          "createdAt": "2019-11-14T02:24:44Z",
          "updatedAt": "2019-11-14T02:24:44Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Yes, RFC7838 says:\r\n> If the connection to the alternative service does not negotiate the expected protocol (for example, ALPN fails to negotiate h2, or an Upgrade request to h2c is not accepted), the connection to the alternative service MUST be considered to have failed.\r\n\r\nThe softer stance of \"SHOULD include others with equivalent security\" seems reasonable, but we might get some pushback on the divergence.",
          "createdAt": "2019-11-14T18:07:03Z",
          "updatedAt": "2019-11-14T18:07:03Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged #78",
          "createdAt": "2019-11-14T18:17:48Z",
          "updatedAt": "2019-11-14T18:17:48Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU1MjI0ODc1MTg=",
      "title": "Bikeshed and finalize the record names",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/80",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wg"
      ],
      "body": "We should finalize the record names with community input (along with pronunciation for SVCB).\r\nIt's possible that \"SVCB\" is just fine, but \"HTTPSSVC\" is a constant pain due to the double-S.\r\n\"SVCHTTPS\" might be slightly better.  \"HTTPS\" is great but makes text less readable.\r\n",
      "createdAt": "2019-11-13T21:38:09Z",
      "updatedAt": "2020-06-12T20:12:25Z",
      "closedAt": "2020-06-12T20:12:25Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal based on survey and discussions is to call the records \"SVCB\" and \"HTTPS\" but to talk about an \"SVCB-form HTTPS\" record to help disambiguate.",
          "createdAt": "2020-03-09T19:45:45Z",
          "updatedAt": "2020-03-09T19:45:45Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "MDU6SXNzdWU1MjQxNzY2NTU=",
      "title": "Clarify fallback behaviour",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/81",
      "state": "OPEN",
      "author": "c-taylor",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "proposed to close",
        "question"
      ],
      "body": "I believe that either this draft or a revision of rfc7838 should clarify the client behaviour or provide stronger guidance for the scenarios:\r\n- Fallback to origin from alternates\r\n-- Both with and without downgrade considerations\r\n- Multiple same priority alternates\r\n-- After random shuffle do I use one? all?\r\n-- Should client fail to origin or same priority?\r\n- Multiple differing priority alternates\r\n-- Fail down the tree or straight to origin?\r\n\r\n \r\n\r\nrfc7838 was not explicit here either, which has (probably) led to the fail-back having low implementation. Defined/predictable client failover behaviour is a big win.\r\n\r\nHappy to help with words if you think there's a place for this...",
      "createdAt": "2019-11-18T07:08:47Z",
      "updatedAt": "2020-06-11T15:00:16Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "One thing I've learned here is that browser vendors do not like being told how to structure their fallback logic, which it seems is often deeply entangled with other aspects of their codebase and full of hard-won performance and compatibility hacks.  We should be clear in our recommendations about what is mandatory, but I don't think we should be more prescriptive than necessary.",
          "createdAt": "2019-11-18T10:07:46Z",
          "updatedAt": "2019-11-18T10:07:46Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Current text is \"If the connection fails, the client MAY try to connect using values from a lower-priority record.\"",
          "createdAt": "2020-05-29T19:46:15Z",
          "updatedAt": "2020-05-29T19:46:15Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "@c-taylor : there is a bunch more on this in the draft since November.  Do you think the current text is good enough?  (The current fallback description is a \"MAY\".)",
          "createdAt": "2020-05-29T19:46:25Z",
          "updatedAt": "2020-05-29T19:46:25Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "MDU6SXNzdWU1MjQyOTcyMzE=",
      "title": "Adjust CamelCase names",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/82",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Some of the CamelCase names could be improved.  For example, SvcFieldPriority is now used in AliasForm, so maybe it should just be SvcPriority or SvcIndex.",
      "createdAt": "2019-11-18T11:11:46Z",
      "updatedAt": "2020-07-13T17:32:13Z",
      "closedAt": "2020-07-13T17:32:12Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "These are the CamelCase names I found\r\n\r\nSvcDomainName\r\nSvcFieldPriority\r\nSvcFieldValue\r\nSvcParamKey\r\nSvcParamValue\r\nSvcRecordType\r\nAliasForm\r\nServiceForm\r\nClientHello\r\n",
          "createdAt": "2020-06-19T02:02:02Z",
          "updatedAt": "2020-06-19T02:02:02Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "Personally I'm happy with SvcFieldPriority.  If it has to change then SvcPriority.",
          "createdAt": "2020-06-19T02:28:31Z",
          "updatedAt": "2020-06-19T02:28:31Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Of these I think only SvcFieldPriority might want to change to SvcPriority but I don't strongly care either way.",
          "createdAt": "2020-06-19T02:36:10Z",
          "updatedAt": "2020-06-19T02:36:10Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "SvcPriority makes more sense as it is the priority for the RR itself, ",
          "createdAt": "2020-06-19T03:22:52Z",
          "updatedAt": "2020-06-19T03:22:52Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed that SvcFieldPriority can simply be SvcPriority.\r\n\r\nIs there a reason we need \"field\" in SvcFieldValue? Is SvcValue too value? Could that be SvcParams, to indicate that its the parameter list?",
          "createdAt": "2020-06-19T03:27:34Z",
          "updatedAt": "2020-06-19T03:27:34Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We should do that, but we will also have to expand the ABNF to ref;ect ot\r\n\r\nSVCParams = SVCParam *(SVCParam)\r\n",
          "createdAt": "2020-06-19T03:36:30Z",
          "updatedAt": "2020-06-19T03:36:30Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I like \"SvcPriority\" and \"SvcParams\".\r\n\r\nI wrote up a more radical proposal in #160 that gets rid of all the camel case names.  From that analysis, some comments:\r\n\r\n* AliasForm/ServiceForm have generated some confusion because they are in fact a single form as far as parsing is concerned.  I think \"mode\" is probably more accurate than \"form\".\r\n* \"SvcDomainName\" is potentially confusing, given that it appears in both ServiceForm and AliasForm, and can itself contain either ServiceForm or AliasForm records.  Also, \"DomainName\" seems redundant.\r\n* SvcRecordType is vestigial.  It's now computed implicitly from SvcFieldPriority.  I would rephrase to remove it entirely.",
          "createdAt": "2020-06-22T19:46:56Z",
          "updatedAt": "2020-06-22T19:46:56Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps \"TargetName\" or \"TargetDomain\" instead of \"SvcDomainName\" ?\r\nSvcParams and SvcPriority sound good.\r\nAliasMode/ServiceMode also seem fine if \"Form\" causes confusion.",
          "createdAt": "2020-06-22T20:33:18Z",
          "updatedAt": "2020-06-22T20:33:18Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like \"TargetName\" - it is a fully qualified domain name and not just a domain name correct ?  \r\nThat should be more explicit",
          "createdAt": "2020-06-22T20:42:26Z",
          "updatedAt": "2020-06-22T20:42:26Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One thing in favor of keeping SvcDomainName is that it is the Alt-Svc name, so having \"Svc\" is nice.",
          "createdAt": "2020-06-22T20:43:34Z",
          "updatedAt": "2020-06-22T20:43:34Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "But given the decoupling from Alt-Svc, \"TargetName\" might actually reduce confusion.",
          "createdAt": "2020-06-22T20:48:55Z",
          "updatedAt": "2020-06-22T20:48:55Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fair!",
          "createdAt": "2020-06-22T21:06:57Z",
          "updatedAt": "2020-06-22T21:06:57Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I updated PR #160 to match the names discussed here.  Please review.",
          "createdAt": "2020-07-06T17:56:01Z",
          "updatedAt": "2020-07-06T17:56:01Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, I went back through this and everything looks good Ben. ",
          "createdAt": "2020-07-07T01:35:13Z",
          "updatedAt": "2020-07-07T01:35:13Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #160",
          "createdAt": "2020-07-13T17:32:12Z",
          "updatedAt": "2020-07-13T17:32:12Z"
        }
      ]
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU1MjgzNTIwNzY=",
      "title": "Grammar for presentation format does not produce parentheses",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/83",
      "state": "CLOSED",
      "author": "dmcardle",
      "authorAssociation": "NONE",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "Examples like this one (from section 1.1) use a notation where the SvcFieldValue is surrounded by parentheses.\r\n```\r\n   ; ServiceForm\r\n   svc.example.net.  7200  IN HTTPSSVC 2 svc3.example.net. ( alpn=h3\r\n                                       port=8003 esniconfig=\"...\" )\r\n```\r\n\r\nIt looks like the top-level production rule is this:\r\n```\r\n   pair          = display-key \"=\" value\r\n```\r\n\r\nShouldn't there be a rule just one level higher? Something like this?\r\n```\r\n   svc-field-value = [ \"(\" 1*pair \")\" ]\r\n```\r\n",
      "createdAt": "2019-11-25T21:39:19Z",
      "updatedAt": "2020-01-15T21:25:20Z",
      "closedAt": "2020-01-15T21:25:20Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "The parentheses are zone file format for spanning a line break (RFC 1035 Section 5.1).  They're not part of the SVCB presentation format.\r\n\r\nIf this is confusing maybe we can structure the examples differently.  The examples originally used \"\\\\\" to indicate a line break that readers should ignore, but this is not valid zone file syntax.",
          "createdAt": "2019-11-25T21:42:28Z",
          "updatedAt": "2019-11-25T21:42:54Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "Aha, thanks!  I think it's worth mentioning how this grammar hooks up to the zone file syntax so newcomers like me can follow along mechanically.\r\n\r\nIt looks like RFC 1035 predates the ABNF syntax defined in RFC 5234, so maybe \"hooking up\" the grammars is not really possible/meaningful?",
          "createdAt": "2019-11-25T21:59:22Z",
          "updatedAt": "2019-11-25T21:59:22Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I will try to make that clearer.\r\n\r\nYeah, there's no ABNF for zone files, which is why we had to define this ugly `basic-visible` thing, etc.  I'm pretty sure it's still not exactly right but it's close enough.",
          "createdAt": "2019-11-25T22:54:31Z",
          "updatedAt": "2019-11-25T22:54:31Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "MDU6SXNzdWU1MjgzNTU0Mzc=",
      "title": "Add a simple example",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/84",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "After looking at the examples, several readers came away with the impression that an alias is required to use SVCB.  In fact, aliasing is bad for performance and should be avoided when possible, but we've included it in all of our examples to show how all the pieces of the system work.\r\n\r\nWe should include an optimized example, and make it clear that many common cases can be handled without adding any indirection.",
      "createdAt": "2019-11-25T21:46:42Z",
      "updatedAt": "2020-05-29T19:48:02Z",
      "closedAt": "2020-05-29T19:47:51Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "This should be resolved now.",
          "createdAt": "2020-05-29T19:48:02Z",
          "updatedAt": "2020-05-29T19:48:02Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "MDU6SXNzdWU1Mjg0MDIwNTQ=",
      "title": "Clarify server behavior",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/86",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "We need a careful implementor review on Section 4, particularly regarding what to put in the Additional section for negative responses (with and without DNSSEC).\r\n\r\nI also wonder how this would interact with the CHAIN query.",
      "createdAt": "2019-11-25T23:43:40Z",
      "updatedAt": "2020-07-13T20:25:06Z",
      "closedAt": "2020-07-13T20:25:06Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "We also need more thought about what goes in the Answer vs. Additional.  If the authoritative puts more stuff in the Answer, will non-SVCB-aware recursives be more likely to forward that stuff to the client?",
          "createdAt": "2019-12-13T21:53:39Z",
          "updatedAt": "2019-12-13T21:53:39Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@marka63 Would you be able to review Section 4 with an eye toward DNSSEC and negative responses?  I'd like to make sure that the recommendations really make sense.",
          "createdAt": "2020-05-29T19:52:53Z",
          "updatedAt": "2020-05-29T19:52:53Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks like we're waiting on @marka63 to review Section 4 with an eye toward DNSSEC and negative responses before we can close this.",
          "createdAt": "2020-06-11T14:58:14Z",
          "updatedAt": "2020-06-11T14:58:14Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will talk to Benno if someone on the Unbound team can also review this. ",
          "createdAt": "2020-06-18T04:09:27Z",
          "updatedAt": "2020-06-18T04:09:27Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #199",
          "createdAt": "2020-07-13T20:25:06Z",
          "updatedAt": "2020-07-13T20:25:06Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWU1MzM0Mjc2NTQ=",
      "title": "Should HTTPSSVC make certificate errors fatal?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/87",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "davidben"
      ],
      "labels": [],
      "body": "Elsewhere, HTTPSSVC's redirect was referred to as HSTS and it occurred to me we're missing one of HSTS's properties. It redirects and then it directs the browser to suppress the certificate click through button.\r\n\r\nWe could do something similar and say that HTTPS connections made off an HTTPSSVC record are assumed to have a competent TLS config and don't get a bypass button.",
      "createdAt": "2019-12-05T15:36:40Z",
      "updatedAt": "2019-12-19T16:50:21Z",
      "closedAt": "2019-12-19T16:50:21Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Relevant parts of HSTS spec:\r\nhttps://tools.ietf.org/html/rfc6797#section-8.4\r\nhttps://tools.ietf.org/html/rfc6797#section-12.1",
          "createdAt": "2019-12-05T15:38:11Z",
          "updatedAt": "2019-12-05T15:38:11Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@davidben There's a potential \"footgun escalation\" here, compared to HSTS.  With HSTS, we at least know that the site had correctly configured HTTPS at some point in the past; otherwise HSTS could not have been enabled (except for HSTS preload...).  With HTTPSSVC, there's no such guarantee.  The server could have been misconfigured all along.\r\n\r\nPersonally, I think it would be perfectly reasonable for a client to adopt the behavior you're describing, but I don't see why it needs to be part of the standard.  However, if you think it should be in the draft, we can certainly add it (e.g. \"Clients MAY/SHOULD disable security bypass UI as per RFC 6797 Section 12.1.\").",
          "createdAt": "2019-12-13T19:15:58Z",
          "updatedAt": "2019-12-13T19:15:58Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It needs to be part of the standard because the standard talks about what HTTPSSVC *means*. Right now it means \"you can assume my http URL is a redirect\". Does it also mean \"you can assume my https URL is sensible\"?\r\n\r\nThe point of standards is to promote interoperability. That means we need to all agree on the meanings of things.\r\n\r\nMy inclination is that it should mean this. A promise (up to DNS TTL) to deploy certificates correctly is not that much of a tall order over the existing promise to do https, and we nudge the web a little more towards security.",
          "createdAt": "2019-12-14T00:26:12Z",
          "updatedAt": "2019-12-14T00:26:56Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWU1MzQyMjc4MDQ=",
      "title": "ESNI is not up-to-date with ESNIConfig => ESNIConfigs change",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/88",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We changed the ESNI configuration from a single ESNIConfig to a list of ESNIConfigs in https://github.com/tlswg/draft-ietf-tls-esni/pull/200. HTTPSSVC/SVCB needs to be updated to match.",
      "createdAt": "2019-12-06T19:49:51Z",
      "updatedAt": "2020-05-29T19:52:42Z",
      "closedAt": "2020-05-29T19:52:41Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #127 which may replace the need for this?",
          "createdAt": "2020-04-13T20:59:47Z",
          "updatedAt": "2020-04-13T20:59:47Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "This section has been substantially reworked.",
          "createdAt": "2020-05-29T19:52:41Z",
          "updatedAt": "2020-05-29T19:52:41Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "MDU6SXNzdWU1MzUwOTcwMzE=",
      "title": "WebSockets should use HTTPSSVC",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/90",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "Despite having their own scheme (ws://, wss://), WebSockets should actually use HTTPSSVC.  This has a firm basis on the Fetch spec, which says that [each WebSocket has an equivalent http(s) URL](https://fetch.spec.whatwg.org/#websocket-opening-handshake), but it has come up as a point of confusion so I think it deserves a sentence in the draft.",
      "createdAt": "2019-12-09T18:11:31Z",
      "updatedAt": "2020-06-11T02:22:29Z",
      "closedAt": "2020-06-11T02:22:29Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should just be a SHOULD",
          "createdAt": "2020-05-29T19:54:15Z",
          "updatedAt": "2020-05-29T19:54:15Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Especially now that we have HTTPS and SVCB, clarify that clients with a wss:// URL SHOULD use the equivalent https-scheme HTTPS record lookup",
          "createdAt": "2020-05-29T19:54:20Z",
          "updatedAt": "2020-05-29T19:54:20Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "MDU6SXNzdWU1Mzc2OTA5NDY=",
      "title": "Does HSTS apply if you fall back to A?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/91",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc",
        "MikeBishop"
      ],
      "labels": [],
      "body": "We should clarify whether the HSTS implication applies to the fallback IPs, and also clarify that it _does_ apply to AliasForm.",
      "createdAt": "2019-12-13T18:05:22Z",
      "updatedAt": "2020-06-11T14:32:57Z",
      "closedAt": "2020-06-11T14:32:57Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Conclusion: yes, and we need to be explicit about it.",
          "createdAt": "2019-12-13T19:16:09Z",
          "updatedAt": "2019-12-13T19:16:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2019-12-17T17:15:36Z",
          "updatedAt": "2019-12-17T17:15:36Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Example corner-case to think through as part of this: if something causes you to give up (eg, chain too long) should the HSTS-style behavior still apply?  And in the failure-case regime how long should this behavior change be cached?",
          "createdAt": "2020-05-29T19:57:42Z",
          "updatedAt": "2020-05-29T19:57:42Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think HTTP and HTTPS URLs would trigger the same HTTPSSVC handling logic anyway. If the HSTS behavior is triggered from DNS, the HTTP stack would need to effectively fail the HTTP request and bubble the error up past the HTTP cache to the redirect-handling and URL-dispatching layer (otherwise the URL can't change) to retry the request. Any DNS queries would most likely then be *reissued* for the HTTPS URL, though almost certainly cached.\r\n\r\nThat means that following AliasForms and whatnot doesn't really apply the HSTS flow. As soon as you see an HTTPSSVC record, you can bail. (Real HSTS does not have this oddity because we resolve HSTS before we decide to hit the network or anything.)",
          "createdAt": "2020-05-29T22:09:23Z",
          "updatedAt": "2020-05-29T22:09:55Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "MDU6SXNzdWU1Mzc3MDE1NjQ=",
      "title": "Consider requiring support for SNI",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/92",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "enygren"
      ],
      "labels": [],
      "body": "Clients that do HTTPSSVC should be modern enough to do SNI.",
      "createdAt": "2019-12-13T18:27:47Z",
      "updatedAt": "2020-06-11T16:12:46Z",
      "closedAt": "2020-06-11T03:30:39Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bemasc what is the rationale for this?",
          "createdAt": "2020-06-11T14:38:00Z",
          "updatedAt": "2020-06-11T14:38:00Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood : Same as with the SNI requirement in Alt-Svc and HTTP/2.  Servers must be able to assume that they will have a way to provide the proper server certificate to a client based on either SNI or the inner-SNI in ECH without needing to have an IP address per service endpoint.\r\nOne use-case for HTTPSSVC is to allow the default A/AAAA records to point to a per-certificate-per-cluster virtual IP (limited to a subset of clusters) for legacy client support but where the SvcDomainName points to a name that covers a much broader set of server clusters that support multiplexing via SNI. Almost all clients do support SNI, but we prevent backslide to avoid causing problems with continued growth/scaling of HTTPS adoption. ",
          "createdAt": "2020-06-11T15:26:57Z",
          "updatedAt": "2020-06-11T15:26:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What seems strange (to me) is that HTTPSSVC is purely a DNS artifact, and can (in theory) be used without TLS. As a silly example, imagine we used HTTPSSVC to publish public keys used for a protocol that is *not* TLS. Imagine further that the client consuming one of these records only uses this other fictitious protocol, and doesn't implement TLS. Would this prevent said client from using the record? If so, that seems needlessly prohibitive. Perhaps the text should say that clients using HTTPSSVC records for subsequent TLS connections must support SNI, to be more clear? ",
          "createdAt": "2020-06-11T15:32:07Z",
          "updatedAt": "2020-06-11T15:32:07Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood This requirement only applies to HTTPSSVC, not SVCB, so it's not used for any protocol other than HTTPS, i.e. TLS.  As such, I can't think of a way to encounter the problem you're describing (unless HTTP/4 doesn't use TLS...).",
          "createdAt": "2020-06-11T16:05:38Z",
          "updatedAt": "2020-06-11T16:05:38Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Got it. That does clarify!",
          "createdAt": "2020-06-11T16:12:45Z",
          "updatedAt": "2020-06-11T16:12:45Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWU1MzkyMTcwOTI=",
      "title": "Why allow multiple values for the same parameter at all?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/95",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seems the only parameters which allow this is ipv4hint and ipv6hint, which is not necessary because the value serialization supports multiple addresses (https://github.com/MikeBishop/dns-alt-svc/pull/94).\r\n\r\nWhy do we need this? I think we should only allow one value per parameter.\r\n\r\nThis means duplicate values can be rejected generically in the parser. Right now the spec says individual parameters silently ignore all but the first value. Silently ignoring things isn't great. Other protocols like Roughtime further require keys be sorted, which makes it easy for the parser to reject duplicates generically.\r\n\r\nThis also avoids questions when designing a new parameter as to whether to use multiple parameter values or to encode multiple structures in the value. We should have one way to do things, so let's use the latter.",
      "createdAt": "2019-12-17T17:45:58Z",
      "updatedAt": "2020-04-13T20:58:58Z",
      "closedAt": "2020-04-13T20:58:58Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "The other argument would be to always do the former (multiple parameter values) in the wireformat and to strongly discourage things from having values that encode multiple structures in the value.  Presentation format multi-value parameters could be syntactic sugar and convert to to multiple parameters on the wire",
          "createdAt": "2019-12-17T17:51:55Z",
          "updatedAt": "2019-12-17T17:51:55Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed that we should be consistent here.\r\n\r\nPresumably ESNIConfig is another use-case?",
          "createdAt": "2019-12-17T17:52:16Z",
          "updatedAt": "2019-12-17T17:52:16Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe HTTPSSVC's ESNI story, as currently specified, does not allow for multiple ESNIConfigs. It doesn't say anything and thus gets the default. This is indeed a mistake, but we're fixing it by doing the multiple values at the TLS level, which lets us handle it consistently at all sources of ESNI config. (See #88.)\r\n\r\nIt's also generally more compact to handle multiplicity within the value. Each HTTPSSVC value costs four bytes of framing per value. If the value is self-delimiting (true for addresses and ESNIConfig), you have a one-time four byte cost from HTTPSSVC, then each additional value costs no extra framing. If the value is not self-delimiting, you need length prefixes internally, costing two bytes per value. That's two bytes extra at one value, breaking even at two values, and a win beyond that.\r\n\r\n(The difference comes from not repeating the parameter name each time.)",
          "createdAt": "2019-12-17T18:38:55Z",
          "updatedAt": "2019-12-17T18:39:47Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dmcardle FYI",
          "createdAt": "2019-12-18T21:20:11Z",
          "updatedAt": "2019-12-18T21:20:11Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Your argument seems reasonable.  We should make this clear and deterministic especially at the wireformat layer (eg, must only use the first instance of a parameter, provisioning systems should warn on duplicates, etc).\r\n\r\nAllowing syntactic sugar at the presentation layer (eg, concatenation of parameters that are duplicated?) might be helpful usability-wise or could create many more problems and instead we should recommend that provisioning systems prevent this (or at least warn).",
          "createdAt": "2019-12-19T20:56:35Z",
          "updatedAt": "2019-12-19T20:56:35Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with this proposal, but it's going to collide heavily with #97, so I'd prefer to get that settled before updating the text.  I have updated #97 to make transport names easier to delimit.",
          "createdAt": "2020-01-15T19:00:27Z",
          "updatedAt": "2020-01-15T19:00:27Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "Could we revisit this? Given the current state of #97, it looks like it is expecting that multiple values are allowed, e.g. `transport=foo transport=bar no-default-transport`. \r\n\r\nEquivalently, the wire format could simply encode a length-prefixed sequence of protocol IDs, eliminating the need for repeated SvcParamKeys. A slight annoyance is that the protocol IDs don't have fixed lengths. We could (1) invent uint16 values in our registry, (2) add length prefixes to each protocol ID, or (3) use null terminators.",
          "createdAt": "2020-01-31T16:22:48Z",
          "updatedAt": "2020-01-31T16:22:48Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think I've lost track of what \"this\" is and what is being revisited where. :-) I think the encoding should be:\r\n\r\n* You only get one parameter per key, with one value.\r\n* As is already the case, that value has whatever internal format it needs. That internal format may be a single structure, a list of structures, or something more complicated.\r\n* Duplicate parameters are a syntax error. The receiver treats this as a parse error.\r\n* Keys must be listed in ascending order, so the receiver can check for duplicates without maintaining much state. Non-sorted keys are a parse error.\r\n\r\nRe protocol IDs not having fixed lengths, just add length prefixes as needed. That's all a multi-valued parameter is doing anyway. (I don't think we should use NUL-termination. That sort of thing is prone to injection problems. See also all the problems when things get stuck into C-style strings.)\r\n\r\n(I still need to review #97, but I doubt a `vector<transport>` would work anyway given that you need a port number. If it ends up being a `vector<tuple<transport, port>>` or a different design, that further suggests a key-specific serialization. A `vector<tuple<transport, port>>` needs a length prefix on the transport, not on the overall tuple.)",
          "createdAt": "2020-01-31T17:30:54Z",
          "updatedAt": "2020-01-31T17:30:54Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we pretty much have consensus on this encoding.\r\n\r\nSince #97 is a major semantic change, I'd like to get it finalized and merged before we make this syntax change.\r\n\r\nRegarding ports, the current plan is to have a single fixed port number for each SvcFieldValue, even if it has multiple transports.  This port number applies to all transports.  Endpoints with different port numbers will only be representable as separate RRs within the RRSet.  I'm not aware of a use case that would motivate putting multiple port numbers in one RR.",
          "createdAt": "2020-02-03T17:26:57Z",
          "updatedAt": "2020-02-03T17:26:57Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been incorporated.",
          "createdAt": "2020-04-13T20:58:58Z",
          "updatedAt": "2020-04-13T20:58:58Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "MDU6SXNzdWU1MzkyNDk2ODc=",
      "title": "Require sorted order of SvcFieldParams?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/96",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The order of the SvcFieldParams is not meaningful.  Should we require (and enforce?) that they appear in key order?  This makes serialization more annoying to implement, but also removes a source of entropy that could be used to fingerprint authoritative implementations.",
      "createdAt": "2019-12-17T18:54:50Z",
      "updatedAt": "2020-05-29T20:01:19Z",
      "closedAt": "2020-05-29T20:00:11Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "no.   they should be easy to sort when they arrive, yes? \r\n",
          "createdAt": "2020-04-20T23:02:42Z",
          "updatedAt": "2020-04-20T23:02:42Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Done.",
          "createdAt": "2020-05-29T20:00:11Z",
          "updatedAt": "2020-05-29T20:00:11Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in #109 ",
          "createdAt": "2020-05-29T20:01:19Z",
          "updatedAt": "2020-05-29T20:01:19Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "MDU6SXNzdWU1NDM5OTI3Njg=",
      "title": "Explicitly state semantics of SvcParamKey ranges",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/98",
      "state": "CLOSED",
      "author": "dmcardle",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Can we nail down the semantics of the different SvcParamKey ranges?\r\n\r\nTo start with:\r\n\r\n* Reserved => FAIL_PARSE\r\n* PrivateUse => EXTRACT_OR_SKIP\r\n* ALPN | PORT | ESNICONFIG | ... => EXTRACT_OR_SKIP\r\n\r\nI can't see any reason why we should accept records that contain reserved keys.",
      "createdAt": "2019-12-30T19:53:34Z",
      "updatedAt": "2020-05-29T20:01:00Z",
      "closedAt": "2020-05-29T20:00:56Z",
      "comments": [
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "@davidben ",
          "createdAt": "2019-12-30T19:53:54Z",
          "updatedAt": "2019-12-30T19:53:54Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Usually private use stuff isn't treated different from other unknown keys since it's just a way for folks to allocate things without going through the registries. Not sure what the reserved ones are for. I guess `key0` is so people can conveniently use zero for a nullable `SvcParamKey`. Was `key5` just used in an earlier iteration of the draft? In that case, we probably want to treat it as unknown since it's just a marker to not allocate it.",
          "createdAt": "2019-12-30T22:22:12Z",
          "updatedAt": "2019-12-30T22:22:12Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "As best as I can tell, key5 is there so that ipv4=4 and ipv6=6!\r\n\r\nCan you expand on nullable SvcParamKey? Seems you could just omit the SvcParam entirely in that situation.",
          "createdAt": "2019-12-30T23:09:56Z",
          "updatedAt": "2019-12-30T23:09:56Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just mean that if you're writing some function that wants to return a `std::optional<SvcParamKey>` or `Option<SvcParamKey>` or `SvcParamKey?` or whatever but your language doesn't have a convenient way to express option types, you can just return a `uint16_t` and have zero be the null value. :-)",
          "createdAt": "2019-12-30T23:26:32Z",
          "updatedAt": "2019-12-30T23:26:32Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "\"Reserved\" doesn't really mean \"disallowed\", exactly.  It's more like \"not yet allocated\".  Parsers can't generally reject reserved values, because they could have been allocated after the code was written.\r\n\r\nI like the idea of clarifying that zero is \"permanently reserved\" for the use @davidben described.  Maybe we can call it \"null\" or something...",
          "createdAt": "2020-01-02T16:49:12Z",
          "updatedAt": "2020-01-02T16:49:12Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "OK, I'm not entirely sure I get the distinction.\r\n\r\nI figured the unmentioned key values (7..65279) were the \"not yet allocated\" keys, and that the \"reserved\" keys (0, 5, 65535) were permanently reserved.\r\n\r\nAre you saying that \"reserved\" lies somewhere between \"permanently reserved\" (never to be used) and \"not yet allocated\"?\r\n\r\nI think it's worth explicitly describing what to do with each *type* of key.  My instinct was to reject records that contain reserved keys, since they must be nonsense :stuck_out_tongue:.",
          "createdAt": "2020-01-02T17:00:53Z",
          "updatedAt": "2020-01-02T17:00:53Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, we should improve the table to avoid this ambiguity.",
          "createdAt": "2020-01-02T17:03:23Z",
          "updatedAt": "2020-01-02T17:03:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW I don't have a preference either way about whether we reserve zero like that. That was me attempting to divine what it was reserved for. If it's a new idea to you, apparently I was wrong! :-)",
          "createdAt": "2020-01-02T17:20:24Z",
          "updatedAt": "2020-01-02T17:20:24Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would advocate not having random permanently reserved values that parsers are meant to reject though. That's more fuss for no benefit. If we want zero to be null, that's a reason, but key5 has no reason to be special.\r\n\r\nPerhaps just delete the key5 row? Then it's the same as the remaining unassigned range.",
          "createdAt": "2020-01-02T17:27:38Z",
          "updatedAt": "2020-01-02T17:27:38Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "Agreed, fewer rules is better. I'd support squashing key5.\r\n\r\nWhat's the rationale for key65535 being reserved?\r\n",
          "createdAt": "2020-01-02T17:42:33Z",
          "updatedAt": "2020-01-02T17:42:33Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Closing in favor of #154.",
          "createdAt": "2020-05-29T20:00:56Z",
          "updatedAt": "2020-05-29T20:00:56Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #154 which may be worth addressing at the same time.",
          "createdAt": "2020-05-29T20:01:00Z",
          "updatedAt": "2020-05-29T20:01:00Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "MDU6SXNzdWU1NDY5MzM5MDU=",
      "title": "Clarify Alias wire format and motivation for binary SvcFieldValue encoding",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/99",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "@miekg has asked for two related clarifications:\r\n1. How is it that the AliasForm and ServiceForm encodings are compatible?\r\n2. Why not reuse the TXT/SPF format?",
      "createdAt": "2020-01-08T15:30:04Z",
      "updatedAt": "2020-06-18T03:27:51Z",
      "closedAt": "2020-06-18T03:27:51Z",
      "comments": [
        {
          "author": "miekg",
          "authorAssociation": "NONE",
          "body": "If this is previously discussed I am happy to read those emails.\r\n\r\nRe 1.: the text in the 01 draft is unclear to me that these two encoding (as proposed) are in fact identical.\r\n\r\nRe 2.: Easiest for us is to just re-use the TXT encoding, the draft talks about limit length (255 octets) per txt segment, which is true, but the total size can still be more than that. Downside is that parsing of the key, values must be done by the client, instead of the DNS client. But things like \\DDD are supported within TXT as well.\r\n\r\nSee https://github.com/miekg/dns/issues/1064 for our bug to add this.",
          "createdAt": "2020-01-12T13:25:38Z",
          "updatedAt": "2020-01-12T13:25:38Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been extensively discussed in the WG.  Can we close this?",
          "createdAt": "2020-06-11T02:52:16Z",
          "updatedAt": "2020-06-11T02:52:16Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWU1NDk4NjQyNTc=",
      "title": "Parameter to indicate no HSTS-like behavior?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/100",
      "state": "OPEN",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "future draft"
      ],
      "body": "In digging into production use-cases, there may be scenarios where the \"HTTPSSVC means HTTPS-only\" is problematic.  For example, it may prevent a CDN from turning it on by default (as this means forcing everything to HTTPS-by-default which may not be possible for some customer content) which in-turns prevents turning on Encrypted SNI by default.\r\n\r\nLeaving the HSTS-like behavior as the default makes sense, but this asks the question as to whether an optional \"allow-insecure\" parameter should be included (with the default still being secure).  This opens up cans of worms from a security perspective but could ease deployment in some cases.",
      "createdAt": "2020-01-14T22:51:00Z",
      "updatedAt": "2020-07-13T17:33:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I understand the problem.  If a CDN has N customers who have CNAMEd their domains to a CDN domain, and some of those customers are using insecure HTTP and haven't provided the CDN with TLS certificates, then the CDN can't put HTTPSSVC on the domain.  They would have to create a new, HTTPS-only domain, and ask customers to update their CNAME.\r\n\r\nTechnically, the CDN could acquire DV certs for all the customer domains, and upgrade them to HTTPS (at least between the client and CDN), but this could cause problems related to mixed-content blocking, if some of those customer domains load third-party insecure content that isn't hosted on the same CDN.\r\n\r\nI think I would call this parameter \"disable-https-upgrade\", and continue to prohibit the \"_http\" prefix.",
          "createdAt": "2020-01-15T17:29:14Z",
          "updatedAt": "2020-01-15T17:29:14Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Such a CDN would then cause all N customers to go through the `allow-insecure` path, right? That means the customers who don't update their CNAME would inadvertently get a less secure configuration, so one would still want everyone to update CNAMEs, but now with decreased incentive (but correspondingly more adoption of other bits of HTTPSSVC, so it's a tradeoff between adoption and getting the ecosystem in a better place).",
          "createdAt": "2020-01-16T00:48:12Z",
          "updatedAt": "2020-01-16T00:48:12Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given that it is 2020 and HTTPS is table stakes, I'm inclined to think this would not be the right tradeoff.",
          "createdAt": "2020-01-16T00:50:15Z",
          "updatedAt": "2020-01-16T00:50:15Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Possible compromise: `disable-https-upgrade` only applies if `echconfig` is also present.  This is extremely hacky and I'm not sure I really like it, but it would ensure that this is only used in cases where HTTPSSVC is actually providing some benefit to someone.",
          "createdAt": "2020-05-29T20:15:08Z",
          "updatedAt": "2020-05-29T20:15:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What David said.  I don't see any point in continuing to cater to unsecured protocols.\r\n\r\nIn the earlier example Ben provided, the CNAME that the mix of secure and insecure customers refer to doesn't need to be singular.  You don't need new servers, just a separate CNAME target.  That seems entirely workable.",
          "createdAt": "2020-06-23T09:06:40Z",
          "updatedAt": "2020-06-23T09:06:40Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed. If you want a bad mix of security, that's your burden for deployment.",
          "createdAt": "2020-06-23T16:25:49Z",
          "updatedAt": "2020-06-23T16:25:49Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU1NTAyNDU2MzQ=",
      "title": "Include Alt-Used example",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/101",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "enygren"
      ],
      "labels": [],
      "body": "It would be good to include an example for Alt-Used (or mention it in a previous example).\r\n\r\nThe {client-behavior} reference is also broken.",
      "createdAt": "2020-01-15T15:10:24Z",
      "updatedAt": "2020-04-13T20:58:14Z",
      "closedAt": "2020-04-13T20:58:14Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "WONTFIX (alternative is #107)",
          "createdAt": "2020-04-13T20:58:14Z",
          "updatedAt": "2020-04-13T20:58:14Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU1NTA5NzU2ODY=",
      "title": "Expand SERVFAIL handling to prevent ESNI DoS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/103",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "The HSTS section currently says\r\n> If the HTTPSSVC query results in a SERVFAIL error, and the connection between the client and the recursive resolver is cryptographically protected (e.g. using TLS {{!RFC7858}} or HTTPS {{!RFC8484}}), the client SHOULD abandon the connection attempt and display an error message.\r\n\r\nThis is meant to defend against DoS on the recursive-authoritative leg, when the zone is DNSSEC-signed and the recursive is validating.\r\n\r\nWe should generalize this defense to include timeouts and transport errors, not just explicit SERVFAIL, and move it out of the HSTS section, because (1) this DoS also applies to ESNI, not just HTTPS-upgrade, and (2) an attacker might be able to mount this attack on the client-recursive leg by selectively dropping DNS query or response packets (e.g. only dropping the largest responses, so the client gets the A record but not the HTTPSSVC record).",
      "createdAt": "2020-01-16T18:21:01Z",
      "updatedAt": "2020-01-27T21:08:45Z",
      "closedAt": "2020-01-27T21:08:45Z",
      "comments": []
    },
    {
      "number": 105,
      "id": "MDU6SXNzdWU1NTEwNzE1NDY=",
      "title": "ESNI lifetime implications from Alt-Svc vs HTTPSSVC precedence",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/105",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft originally said (prior to #66) said the Alt-Svc cache overrides HTTPSSVC. This had problems (issue #58 and #60), so #66 downgraded it to a MAY. It seems this still has problems.\r\n\r\n**HTTPSSVC vs Alt-Svc**\r\n\r\nConsider a server which uses both QUIC and ESNI. It configures both in HTTPSSVC. It also cares about HTTPSSVC-less clients (older client or legacy DNS resolver), so it configures QUIC in Alt-Svc. Is it required to configure ESNI in Alt-Svc, or can it leave things alone (with the understanding that ESNI will be limited to clients that support HTTPSSVC)?\r\n\r\nThe spec currently says a client (that would otherwise support HTTPSSVC) MAY skip an HTTPSSVC lookup given an Alt-Svc cache entry. That means, for ESNI to work, the server MUST configure it in both. This is not obvious and should be written down. More importantly, it has deployment consequences.\r\n\r\nHTTPSSVC records apply to the *current* HTTP request. If the client has no cached DNS record, it still queries DNS and gets HTTPSSVC. That means HTTPSSVC TTLs may be set more-or-less freely depending on the site's performance vs. flexibility needs. Let's say it's O(1 hour).\r\n\r\nAlt-Svc headers apply to *subsequent* HTTP requests. If the client has no Alt-Svc entry cached, it will send the HTTP request without Alt-Svc. That means Alt-Svc TTLs must cover the time to the next HTTP request for Alt-Svc to be used at all. For reference, I see google.com currently uses 30 days.\r\n\r\n**Commitments**\r\n\r\nFor the duration of the HTTPSSVC or Alt-Svc lifetime, the server operator has made a commitment to the client. ESNI is a soft commitment that the server understands this ESNI key and a hard commitment that the server is colocated with the public name. The first lower-bounds key lifetime and rotation on the server. There is a recovery mechanism, but it is expensive, so this is a soft commitment. The second is roughly a commitment to use a particular hosting provider. ESNI's retry mechanism requires the public name, so this is a hard commitment. Breaking this will knock out your site.\r\n\r\n(Note Alt-Svc without ESNI was *not* a hosting provider commitment. A provider-specific Alt-Svc may fail if the site changes providers, but the client could still connect without Alt-Svc. ESNI must take this fallback away to prevent network downgrade.)\r\n\r\nHTTPSSVC and Alt-Svc commitment timescales are qualitatively different. Saying ESNI servers must advertise in both, as implied by the spec today, means servers must incur a long-lived hosting provider commitment to deploy ESNI at all. (Or send no Alt-Svc headers and lose QUIC on non-HTTPSSVC clients.) It also means ESNI keys must be long-lived, which makes them more sensitive.\r\n\r\n**Proposed fix**\r\n\r\nGiven the above, I don't see how allowing Alt-Svc to override HTTPSSVC is tenable. That suggests changing the spec so a client that makes HTTPSSVC queries makes them even if Alt-Svc is available. If it gets an HTTPSSVC record, it ignores Alt-Svc and uses those instead. Otherwise, it may freely use Alt-Svc.\r\n\r\nThis is fussy because Alt-Svc itself allows replacing the origin hostname with an alternate name. Clients would likely want to query the alternate's A/AAAA records, the origin's A/AAAA records, and the origin/s HTTPSSVC records in parallel. However, the alternate may leak ESNI, so the alternate connection must wait for whether HTTPSSVC aborts it before proceeding past that query.\r\n\r\nThat adds *even more* complexity to the prospect of actually implementing remote Alt-Svc. Personally, I think all these name indirections are seeming more and more like a mistake and questionably worthwhile.\r\n\r\n**Whither ESNI in Alt-Svc?**\r\n\r\nWith the above, it is no longer strictly necessary to allocate a way to spell ESNI in Alt-Svc. I don't know whether we still want to. This issue means ESNI in Alt-Svc is very different from ESNI in HTTPSSVC. At minimum, we must clearly call out the implications of the longer lifetime in the spec. We could decide this is not worth the trouble. On the other hand, it's likely a number of clients won't make HTTPSSVC queries for some time, and perhaps those clients getting ESNI for the subset of servers willing to make a longer-term public name commitment is worthwhile.\r\n\r\n**Parting thought**\r\n\r\nI think a lesson here is we cannot completely abstract ESNI from its delivery mechanism. Pulling ESNI into HTTPSSVC is reasonable so we only have one record to query, but HTTPSSVC's decisions still have implications for ESNI. (@chris-wood, I dunno if you watch this repo, so CC'ing you in here explicitly.)",
      "createdAt": "2020-01-16T21:40:43Z",
      "updatedAt": "2020-05-29T20:28:57Z",
      "closedAt": "2020-05-29T20:28:56Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The proposed fix does have an inverse consequence which is that Alt-Svc is *more* trustworthy than HTTPSSVC because it came from the origin. That makes overriding it odd. For everything currently delivered over Alt-Svc and HTTPSSVC, this is fine, but we are effectively constraining Alt-Svc to never depend on this trustworthiness in the future. (I.e. it can only be used for DNS-like things.)\r\n\r\nThis is hopefully fine because we can always make a new header (and probably should given all of the mistakes in Alt-Svc), but this is an implication to keep in mind.",
          "createdAt": "2020-01-16T22:30:09Z",
          "updatedAt": "2020-01-16T22:30:09Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for thinking through all these problems, @davidben.  I've posted a PR (#106) that provides a fully detailed set of requirements for the interaction here.  I think this PR gets us to a solution that makes sensible configurations fully downgrade-resistant, avoids pathologies when transitioning between hosting providers, and also covers all the use cases we're aware of.  It continues to allow the behavior you're describing (HTTPSSVC having precedence).\r\n\r\nI admit it's complex, but that's mostly because it's trying to describe a variety of potential client implementations.  I think the behavior of any specific client isn't really more complicated, just better specified.",
          "createdAt": "2020-01-21T19:49:10Z",
          "updatedAt": "2020-01-21T19:49:10Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Using HTTPSSVC to repair Alt-Svc errors rather than checking them ahead of time is an interesting idea, but it does not address the problem for clients that cannot make HTTPSSVC queries. Indeed the PR notes:\r\n\r\n> If the client does not support HTTPSSVC, it MUST fail the connection to avoid enabling a downgrade attack.\r\n\r\nThat means a server still cannot put ESNI in Alt-Svc without long-term commitment about their hosting provider. While the PR does claim Alt-Svc is unnecessary:\r\n\r\n> Origins MAY use esniconfig in Alt-Svc, HTTPSSVC, both, or neither\r\n\r\nThis is false. Saying it will break sporadically doesn't change the fact that it's broken. It also isn't sporadic: it will deterministicly break for all but the first connection. That does not count as deploying ESNI.\r\n\r\nThe section \"Non-authoritative servers\" needs to go in ESNI with full TLSWG analysis as it has security consequences for both the client and server and affects TLS itself. As to those security consequences, I do not think we should do this. Extracting an authenticated signal out of explicitly getting a bad certificate is *extremely* questionable. Certificate errors may arise from all kinds of reasons. Overloading that would be a problem for a client implementation.\r\n\r\nAdditionally, the text mandates particular behavior on unknown names. Given the subtle problems that come up when HTTP servers accept unknown Host headers, I don't think we should introduce such requirements, certainly not via an implicit signal like this.\r\n\r\nThis also still assumes the previous hosting provider behaves in a particular way.\r\n\r\nFinally, this is far too much complexity on the client. Please use the *much* simpler solution outlined above.",
          "createdAt": "2020-01-22T07:30:37Z",
          "updatedAt": "2020-01-22T07:30:37Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "A trivial \"HTTPSSVC first\" implementation would forfeit resistance to downgrade attacks by DNS intermediaries, which I think is valuable.  However, I appreciate that the authenticated fallback proposal requires some unusual layer-crossing, and represents some kind of shift in the long-term commitment (although you already rely on your old host not to serve 404s with your cert).\r\n\r\nI've updated #106 with a much shorter proposal that no longer discusses authenticated fallback.  It allows a simple client like you seem to be advocating for (HTTPSSVC first, no esniconfig in Alt-Svc), but also specifies how to do Alt-Svc in esniconfig safely, with a big warning label.",
          "createdAt": "2020-01-22T21:37:55Z",
          "updatedAt": "2020-01-22T21:37:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I\u2019d opt for @davidben\u2019s proposal, perhaps even with the additional condition that Alt-Svc not be a permissible vehicle for ESNIConfig values. The fact that these hang around for weeks at a time seems to encourage poor key management hygiene. ",
          "createdAt": "2020-01-23T01:57:27Z",
          "updatedAt": "2020-01-23T01:57:27Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I have concerns about any approach where HTTPSSVC without ESNI takes precedence over Alt-Svc ESNI.  That arrangement creates an incentive for hostile DNS servers to synthesize fake HTTPSSVC records, in order to override the ESNIConfig received in Alt-Svc.\r\n\r\nWe can certainly abandon ESNIConfig in Alt-Svc, but I think the loss is significant, and not to be done lightly.  Insofar as HTTPSSVC depends on encrypted DNS (as major clients seem likely to require), the vast majority of users will not be able to use it for the foreseeable future.  Alt-Svc ESNI is the only near-term path to broad deployment, and broad deployment is important to avoid ossification.\r\n\r\nNote that Alt-Svc ESNI is not HPKP.  The ESNI fallback mechanism allows key rotation, so long as the fallback name doesn't change.  Yes, for good performance you shouldn't set your Alt-Svc lifetime longer than your key rotation period, but occasional clock skews or unscheduled rotations won't break anything.\r\n\r\nAs for lifetimes, ESNI keys are substantially less sensitive than TLS keys, so requiring them to be rotated ultra-frequently seems like a low priority.  Typical TLS certificates last for 90 days.  A similar or shorter lifetime for ESNI keys would easily be compatible with Alt-Svc ESNI.",
          "createdAt": "2020-01-23T19:25:54Z",
          "updatedAt": "2020-01-23T19:25:54Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Would it make sense to consider the Alt-Svc TTL as part of priorities here?  (ie, some platforms use Alt-Svc TTLs in the range of an hour.)  \r\n\r\nNote that Alt-Svc and ESNI don't work well together unless clients honor alternate server DNS names separate from the hostname.  (ie, otherwise the same multi-server/multi-CDN issue shows up for Alt-Svc ESN.)  And in that model it is saner anyways to bound the TTL to something reasonable.  But reasonably short TTLs mostly make sense if clients honor Alt-Svc going to alternate servernames anyways as you want some degree of agility on these.\r\n\r\n(One good use-case would be opportunistically supporting ESNI with QUIC prior to being ready to support it in TLS and before clients support doing HTTPSSVC lookups.)",
          "createdAt": "2020-01-24T14:17:15Z",
          "updatedAt": "2020-01-24T14:17:15Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I have concerns about any approach where HTTPSSVC without ESNI takes precedence over Alt-Svc ESNI. That arrangement creates an incentive for hostile DNS servers to synthesize fake HTTPSSVC records, in order to override the ESNIConfig received in Alt-Svc.\r\n\r\nIt's certainly true that tying ESNI to DNS has consequences given a hostile DNS server. Both that and the dependency on new DNS records (which effectively depends on DoH) are indeed disappointing. But both properties have been true throughout this iteration of ESNI. We switched to the HTTPSSVC record on the assumption that it was equivalent to the original ESNI record. The Alt-Svc flaw breaks that assumption.\r\n\r\nIf we want to solve the hostile DNS server problem, we would need to get rid of all Alt-Svc failure paths on the client. The hostile DNS server also controls A/AAAA records, so it could blackhole `alt-svc-entrypoint.cdn.example` and cause all Alt-Svc routes to fail. (If we punt that problem and try only to solve the broad deployment problem, an Alt-Svc to HTTPSSVC fallback is tenable, though it alone doesn't solve the name pinning problem.)\r\n\r\nUnless we can make ESNI in Alt-Svc truly equivalent to HTTPSSVC (unlikely given the TTL), it *must* be possible for servers to use HTTPSSVC with ESNI, use Alt-Svc without ESNI, and *still* get ESNI support for clients which support both. That means HTTPSSVC *must* be able to override Alt-Svc.\r\n\r\nIf we can come up with a way to salvage ESNI in Alt-Svc, we can always add some Alt-Svc directive that means this configuration cannot be overridden by HTTPSSVC. (This, of course, would still need to meet all the usual deployability and availability requirements.) We'd also still need to backport all of the ALPN-related fixes or general Alt-Svc support is dead in the water. All of the issues raised in #73 apply to Alt-Svc once ESNI shows up.\r\n\r\n> As for lifetimes, ESNI keys are substantially less sensitive than TLS keys, so requiring them to be rotated ultra-frequently seems like a low priority. Typical TLS certificates last for 90 days. A similar or shorter lifetime for ESNI keys would easily be compatible with Alt-Svc ESNI.\r\n\r\nI agree they're less sensitive. I'm more concerned about the name pinning than the key rotation.\r\n\r\nA footnote on the equivalence to TLS keys however: 90 days is still too long for TLS certificates (the world needs to move to issuance automation). Also, as long-lived keys are fundamentally more sensitive than short-lived keys, server deployments apply extra protections to their long-lived keys like keeping them off of serving frontends. If ESNI keys, due to their lifetime, end up warranting such protections, it would double the cost of such measures.\r\n\r\n> But reasonably short TTLs mostly make sense if clients honor Alt-Svc going to alternate servernames anyways as you want some degree of agility on these.\r\n\r\nCertainly switching the names increases the desire for shorter TTLs, but that doesn't change the nature of Alt-Svc. Alt-Svc fundamentally only applies to *subsequent* connections, so the lifetime must extend to the *next* time you visit the site. (The current visit already has a preexisting connection. Even in clients willing to bear the complexity of cycling to new connection instantly, this is not useful for ossification purposes because blocking the alternate has no availability consequences while the main connection lives.)\r\n\r\nThe requirements on large enough Alt-Svc TTLs get stronger with ESNI. If you only use Alt-Svc as a routing optimization, perhaps you're fine with low Alt-Svc coverage as it's just an optimization. An ESNI-bearing Alt-Svc with small TTL barely applies.\r\n\r\n> (One good use-case would be opportunistically supporting ESNI with QUIC prior to being ready to support it in TLS and before clients support doing HTTPSSVC lookups.)\r\n\r\nThis use case doesn't make sense. Remember that clients will always try TCP. We often say \"fallback\", but this is misleading. One of the failure modes is blackholed packets, so the two are actually run in parallel, so doing this will deterministically leak the SNI.\r\n\r\nIndeed the one of the requirements on any fix to the many Alt-Svc ALPN mistakes is to *prevent* this, so that servers do not accidentally deploy a QUIC-only ESNI. Out-of-band signal => fallback for robustness => failing to provide equivalent security is a server configuration error.",
          "createdAt": "2020-01-24T15:14:19Z",
          "updatedAt": "2020-01-24T15:14:19Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe #106 specified the behavior you're requesting here, so I'm closing this (as fixed).",
          "createdAt": "2020-05-29T20:28:56Z",
          "updatedAt": "2020-05-29T20:28:56Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "MDU6SXNzdWU1NTQ4NTg1MDM=",
      "title": "Consider SVCB-Used header",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/107",
      "state": "OPEN",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "future draft"
      ],
      "body": "If decoupling from Alt-Svc, having an alternative to Alt-Used would be valuable.  This should take lessons from challenges with Alt-Used adoption and should minimize the privacy impact.\r\nSome options include:\r\n1) Send SvcDomainName \r\n2) Send SvcFieldPriority\r\n3) Send an (8? 16?) bit value specified in a new parameter\r\n4) Send a variable number of bits from a value specified in a new parameter.  (ie, client can zero-out as many MSB as it would like)\r\n\r\nI'm leaning towards (3) above as this bounds the amount of additional entropy to be significantly less than what could be done already by using an alternate port number or IP(v4/v6) address but still allows some level of signalling without requiring servers to have to go through the complexity of needing to use distinct ports/IPs (or ESNI key IDs), all of which are possible but which leak more to passive adversaries.\r\n",
      "createdAt": "2020-01-24T17:19:40Z",
      "updatedAt": "2020-07-09T21:16:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why does the server need this information when it already knows the IP the client connected to?",
          "createdAt": "2020-01-24T22:11:46Z",
          "updatedAt": "2020-01-24T22:11:46Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "It would be preferable to not have to burn IPv4 for this, plus this channel would only ever be sent encrypted in HTTPS requests whereas other options (different IPs, information in echconfig such as the public SNI or keyid) are all much worse in-terms of leaking information to passive network observers.\r\n\r\nIs there a version of this that browsers/clients would be willing to implement?  (ie, 1 bit?  4 bits? 8 bits? the SvcDomainName? an arbitrary string to avoid a privacy-theatre perspective?)",
          "createdAt": "2020-05-29T20:26:51Z",
          "updatedAt": "2020-05-29T20:27:18Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposed to defer this to a future draft (and perhaps as part of an alt-svc-bis).",
          "createdAt": "2020-07-09T21:16:17Z",
          "updatedAt": "2020-07-09T21:16:17Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "MDU6SXNzdWU1NjkwNzk1OTA=",
      "title": "Define default port when unspecified for _port records",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/111",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "We should reconsider the default port for:\r\n\r\n   _8443._foo.api.example.com. 7200 IN HTTPS 0 svc4.example.net.\r\n   svc4.example.net.  7200  IN HTTPS 3 . transport=\"tls\"\r\n\r\nie, where no port is specified.  In particular, should the port be 8443 (specified for the scheme) or 443 (default for https+transport).\r\nUsing the port from the scheme (8443) when no port is specified may be less confusing.\r\n",
      "createdAt": "2020-02-21T17:13:38Z",
      "updatedAt": "2020-06-11T02:14:01Z",
      "closedAt": "2020-06-11T02:14:01Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed and agreed that \"preserve weird ports\" as the default is cleaner and we should clarify (updating as-needed).",
          "createdAt": "2020-05-29T20:29:41Z",
          "updatedAt": "2020-05-29T20:29:41Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWU1NzAxNTQ5NzQ=",
      "title": "Consider making transports into individual SvcParamKeys",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/112",
      "state": "CLOSED",
      "author": "ericorth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Instead of an \"alpn\" or \"transports\" list, perhaps each transport should be its own SvcParamKey.  Then the transport is considered supported for a record if the parameter appears in the SvcFieldValue parameter list for the record.  Maybe h1/TLS is still considered supported by default unless there's a parameter saying to not use defaults.\r\n\r\nAdvantages:\r\n- Negates the recent debates over a wire format for the transport list.  Transports are now listed in the main SvcFieldValue parameters list using the wire format established for that list.  No need to decide between delimiter separation or length prefixing for a special sub-list.  No need to create a separate string list or value registry for the transport values, as it will just be entries from the SvcParamKey registry.  The parameters will be just as easy to deal with as any other parameters for people dealing with presentation format or text config files.\r\n- Solves recent debates over potential per-transport sub parameters such as port.  Instead of a single \"port\" parameter or encoding port in transport name, transports can allocate bytes to port in the SvcFieldValue value.  This would likely be the only thing in the value for transports defined by the initial RFC, maybe with a value of 0 meaning to use the port from the qname.  Any transports added in the future could define whatever sub parameters make sense for that new transport type (or remove port entirely if non-default ports are disallowed for the new transport).\r\n- Extensibility is consistent with the primary extensibility mechanism for SVCB, that is that adding new transports or changing sub parameters format means adding to the SvcParamKey registry.  New registry additions would have all the extensible flexibility as anything else added that way.",
      "createdAt": "2020-02-24T21:22:47Z",
      "updatedAt": "2020-05-29T20:31:30Z",
      "closedAt": "2020-05-29T20:31:30Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "That's an interesting proposal, and I agree with the advantages you've identified.  However, it does also have some disadvantages.\r\n* Each new protocol is allocated from a finite numeric space, so draft protocol versions during development probably can't be expressed in this form.  (We do have a private range reserved in the registry, which might suffice, but conflicts in the private space could also lead to bad outcomes, especially if parsers reject the whole RRSet when there's a conflict.)\r\n* Adding a new transport would require updating all the DNS-related components (authoritative and stub).  With \"transport=...\" new transports are opaque to the DNS-related components, so no updates are required.  (This can be hacked around using the `key1234` mechanism on the authoritative and possibly some escape hatch in SVCB client libraries, but it's ugly as heck.)\r\n* Sharing a namespace with all the other keys could be confusing.\r\n* If we want to add more sub-parameters to a transport later (e.g. QUIC versions), we likely can't, because its SvcParamValue format will already be fixed.\r\n\r\nTo match the current draft's behavior, we would need to define \"quic\", \"tls\", and \"no-tls\" keys.  However, I'm not sure that these keys actually make sense outside the context of a specific scheme (like HTTPS).  For example, can we really use the same \"tls\" key for all the different application-protocols that might be delivered over TLS?\r\n\r\n> maybe with a value of 0 meaning to use the port from the qname\r\n\r\nI would signal that using an empty SvcParamValue, and make \"0\" mean \"disabled\".  This would allow us to replace \"no-tls\" with \"tls=0\".\r\n\r\nOverall, I'm neutral on this change.  I'd be more inclined to support it if we decided to make the SvcFieldValue a string-keyed map (CBOR!), but that's a much bigger change.",
          "createdAt": "2020-02-24T22:32:11Z",
          "updatedAt": "2020-02-24T22:32:11Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "Regarding difficulty adding new transports or changing sub-parameters, I would say that adding a new key (or a replacement key in the case of changing the value format to add new sub parameters) to the registry and updating things to handle it is the appropriate bar of difficulty.  We don't expect to need completely new protocols very often, and the extensibility is appropriate for the rare occasions when it will happen.  Yes, it leads to private space conflict issues for experimental new transports/versions, which is not ideal, but I would argue that anything with unregistered values is going to have pains to work around (eg unregistered names means adding a new one, development or final, still has to ensure you have a unique name without conflict).",
          "createdAt": "2020-02-24T23:29:46Z",
          "updatedAt": "2020-02-24T23:29:46Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "After thinking this through a bit more, I think if we have any concerns over transport extensibility using SvcParamKeys, since this is SVCB's main extensibility mechanism and transports don't seem to be something that will need to change more frequently than anything else, that this points to a more general issue with extensibility of SvcParamKeys.  Opened issue #113 to discuss that point.",
          "createdAt": "2020-02-27T21:38:02Z",
          "updatedAt": "2020-02-27T21:38:02Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Some of this is a matter of getting DNS zone management software updated, as well as updating any software that needs to translate from presentation to/from wire form.  Having some bar there is unavoidable with any binary format (although CBOR continues to be vaguely attractive and was my first proposal, but is a big change).  But keeping transport as a list of strings seems cleaner.\r\n\r\nI continue to think we may wish to make transport a tightly constrained token (eg, /^[0-9a-z-]{1,8}$/ or similar) to avoid the mess ALPN creates. \r\n",
          "createdAt": "2020-02-27T22:30:30Z",
          "updatedAt": "2020-02-27T22:30:30Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is obsolete, since we have switched to conveying ALPN (and specified that it is essentially advisory, with clients and servers still performing full ALPN negotiation via TLS).",
          "createdAt": "2020-05-29T20:31:30Z",
          "updatedAt": "2020-05-29T20:31:30Z"
        }
      ]
    },
    {
      "number": 113,
      "id": "MDU6SXNzdWU1NzIzNzQ0MjU=",
      "title": "2 octet SvcParamKey may not be extensible enough",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/113",
      "state": "CLOSED",
      "author": "ericorth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Inspired by the conversation in issue #112: If we're concerned about the ability to add and experiment with new transports if using SvcParamKey, that may mean SvcParamKey just has a more general issue because I wouldn't expect the transports to require change particularly more often than anything else.\r\n\r\nAt issue, it seems 1 octet worth of code points for \"private use\" may not be sufficient for experimentation with new fields (or new transports if we make transports into top-level fields).  Too much chance of conflict with other uncontrolled usage of the private use block.  Seems we wouldn't really be able to use the block at all for experimental new stuff unless we constantly grease with random values from that range and the spec encourages wonky practices like always checking for a checksum in the value to ensure it's actually the param type the client is looking for.  And 2 octets is probably not enough availability overall to let anybody claim large chunks in the registered blocks for multiple experimental code points.\r\n\r\nI suggest we increase to 4 octets, make the unregistered block much larger to reduce the chances of conflicts, and encourage temporary registration of experimental parameters.  Feels to me that 4 octets would be worth it for the main extensibility mechanism of SVCB.  We'd also be able to save a bit of those octets back when params like the EsniConfig could more reasonably create new parameters for new versions instead of spending octets to do versioning within the parameter value as is the current plan.",
      "createdAt": "2020-02-27T21:35:52Z",
      "updatedAt": "2020-05-29T19:44:11Z",
      "closedAt": "2020-05-29T19:44:10Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "One funny thing about going to 4-byte IDs is that it makes a straight encoding markedly less efficient than CBOR.\r\n\r\nI think we should try hard to avoid having separate ESNIConfig SvcParamKeys for different versions, because it would greatly complicate the interface between TLS and DNS (e.g. between OpenSSL and BIND).",
          "createdAt": "2020-03-03T23:13:59Z",
          "updatedAt": "2020-03-03T23:13:59Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "We should leave it at 2 octets and not go crazy.  We can always do an extended SvcParamKey type some year if this ever becomes an issue.\r\n\r\nUsing different SvcParamKeys for different versions is also going to slow roll-out due to the need to get those into more vendors (eg, DNS providers).",
          "createdAt": "2020-03-04T21:38:45Z",
          "updatedAt": "2020-03-04T21:38:45Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #154",
          "createdAt": "2020-05-29T19:44:10Z",
          "updatedAt": "2020-05-29T19:44:10Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU1NzU4MDIzMDU=",
      "title": "Consider switching back to ALPN",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/115",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on some feedback from @martinthomson we should consider switching back to ALPN rather than introducing \"transport\".  As part of this we'd want to clarify that:\r\n1) ALPN defines the whole stack  (eg, \"H2-over-TLS-over-TCP\" )\r\n2) The alpn thus implicitly specifies a transport protocol but also allows filtering of higher-level protocols (ie, to allow doh and dot on different endpoints).\r\n3) Secure in-band negotiation takes precedence, so if the alpn negotiated is different from one indicated in the record then the client MUST use it.\r\n\r\nWe'd then switch from having a default transport protocol to a default alpn (eg, \"http/1.1\" for HTTPSSVC) and have no-default-alpn as a param.",
      "createdAt": "2020-03-04T21:43:57Z",
      "updatedAt": "2020-05-29T20:30:55Z",
      "closedAt": "2020-05-29T20:30:54Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Done in #116.",
          "createdAt": "2020-05-29T20:30:54Z",
          "updatedAt": "2020-05-29T20:30:54Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "MDU6SXNzdWU1NzgxNDc0MzA=",
      "title": "Clarify how clients select between multiple alpns in a set",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/117",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "It is ambiguous how a client selects which transport to use if multiple are provided in a set, all of which the client supports.  For example with:\r\n   alpn=h3,h2\r\nor:\r\n   alpn=h2,h3\r\n(with the implicit http/1.1).\r\n\r\nSince we don't want to make this a list, the best way to handle this may be to specify that clients should apply their own heuristics for selecting which underlying transport (eg, TLS or QUIC) to try connecting with first as well as whether to try racing to both.\r\n\r\nOperators wishing to force an ordering should then use different SVCB records at different priority levels.",
      "createdAt": "2020-03-09T19:42:57Z",
      "updatedAt": "2020-05-29T20:32:56Z",
      "closedAt": "2020-05-29T20:32:31Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ordering isn't necessarily a well-defined notion. Chrome doesn't try QUIC and then TCP. We race the two. (A network which is intolerant to QUIC may simply drop the packet and appear like a QUIC timeout.)",
          "createdAt": "2020-03-12T22:29:27Z",
          "updatedAt": "2020-03-12T22:29:27Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Won't fix for now.",
          "createdAt": "2020-05-29T20:32:31Z",
          "updatedAt": "2020-05-29T20:32:31Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Client heuristics are sufficient.",
          "createdAt": "2020-05-29T20:32:56Z",
          "updatedAt": "2020-05-29T20:32:56Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "MDU6SXNzdWU1NzgyMzgwNTc=",
      "title": "basic-visible vs line continuation in master files",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/120",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "basic-visible fails to exclude 0x28  '('   and 0x29  ')' which are line continuation characters in master files.\r\n\r\nfoo=(1)  will parse as \"foo=\", \"1\" in master files.   For it to be a single token it needs to be foo=\"(1)\" or foo=\\\\(1\\\\) ",
      "createdAt": "2020-03-09T23:00:38Z",
      "updatedAt": "2020-06-11T14:37:30Z",
      "closedAt": "2020-06-11T14:37:30Z",
      "comments": []
    },
    {
      "number": 121,
      "id": "MDU6SXNzdWU1NzgyMzk5NzA=",
      "title": "Invalid HTTPSSVC example",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/121",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "www.example.com.  7200  IN HTTPSSVC svc.example.net.\r\n\r\nis not a valid record.",
      "createdAt": "2020-03-09T23:06:38Z",
      "updatedAt": "2020-04-13T20:48:01Z",
      "closedAt": "2020-04-13T20:48:01Z",
      "comments": []
    },
    {
      "number": 122,
      "id": "MDU6SXNzdWU1NzgyNjg1OTg=",
      "title": "Improve description of QNAME structure",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/122",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Currently, the QNAME structure is described as a _port._scheme.domain, except \"mappings for SVCB MAY remove the port\".  This is potentially confusing.  We should align the terminology with the URI (URL?) RFCs, and discuss ports only in the context of HTTPS.\r\n\r\n> section 1.1 \r\n> \r\n> \u00a0_8765._baz.api.example.com. 7200 IN SVCB 0 svc4-baz.example.net.\r\n> \u00a0\r\n> \r\n> In my opinion, the mechanism that derives QNAME needs to be refined or maybe\r\n> the terminology being clarified. \r\n> \r\n> a) The current document describes how to generate the QNAME from an URI. The\r\n> QNAME contains a port number while some scheme do not allow or specify port\r\n> subcomponent. Not having the port specified could be particularly useful to\r\n> provide secure transport for schemes that are not necessarily secure for\r\n> example. One the other hand, a scheme that specify a port, may not necessarily\r\n> need to have it specified twined in the QNAME. I would be rather inclined to\r\n> have the port optional maybe at the expense of an additional RRset, but need\r\n> more thoughts. \u00a0\r\n> \u00a0 \r\n> b) It is also unclear to me why HTTPS:443 or HTTP:80 has a specific convention.\r\n> The convention tales place for the DNS resolution of a authority as opposed to\r\n> the DNS resolution of a FQDN. One possible reason I see could would be to\r\n> prevent having a distinction between http and https (which could be done\r\n> otherwise for example using alpn), \u00a0but I am wondering if there are other\r\n> rationale. So far, I do not see the need for a exception for the derivation of\r\n> the QNAME (nor for using a specific RRtype). \u00a0 \u00a0\r\n> \r\n> c) The current document, mentions several time HTTP service. The term service\r\n> seems to me ambiguous as it has been defined for the DNS service based\r\n> discovery in which case it means a web page. It seems to me preferable we keep\r\n> the scope of URI scheme and port authority. As a side note, when scheme is\r\n> thought as a service, the convention adopted by the document slightly differs\r\n> from the DNS based service Discovery which would use _baz._udp or eventually\r\n> _baz._tcp. The current approach may be simpler.. I would think this is mostly a\r\n> terminology issue. \u00a0\r\n>\r\n> section 2.3 \r\n> \r\n> \"\"\"\r\n> Protocol mappings for SVCB MAY remove the port or replace it with\r\n> \u00a0 \u00a0other protocol-specific information, but MUST retain the scheme in\r\n> \u00a0 \u00a0the QNAME. \u00a0\r\n> \"\"\"\r\n> \r\n> I understand that for any scheme, a definition of how scheme and port should be\r\n> defined when using SVBC. If that is correct, I would rather see that the other\r\n> way around, that is SVBC defining from the scheme definition the QNAME\r\n> derivation. The term MAY also suggest different interpretation will be\r\n> permitted, which could affect interoperability. \r\n> ",
      "createdAt": "2020-03-10T00:44:54Z",
      "updatedAt": "2020-06-11T02:14:52Z",
      "closedAt": "2020-06-11T02:14:51Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #157",
          "createdAt": "2020-06-11T02:14:51Z",
          "updatedAt": "2020-06-11T02:14:51Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "MDU6SXNzdWU1NzgyNzM0MjM=",
      "title": "CNAME interaction clarification",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/123",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "editorial"
      ],
      "body": "SVCB doesn't change anything about CNAME, or really have any interesting interaction with CNAME, but it's mentioned all over the text.  We might be able to simplify this.\r\n\r\n> \"\"\"\r\n> When a prior CNAME or SVCB record has aliased to an SVCB record, each\r\n> \u00a0 \u00a0RR shall be returned under its own owner name.\r\n> \"\"\"\r\n> \r\n> If I am not misinterpreting this, this seems to be the natural way CNAME works\r\n> and I am wondering if the text should not be removed from this section. My\r\n> general comment is that the text refers too much to CNAME. Probably only the\r\n> fall back function of CNAME should be mentioned in the main text and other\r\n> considerations may be moved to the appendix to ease the reading. This is\r\n> obviously just a comment. \r\n> \r\n\r\n> \"\"\"\r\n> \u00a0Note that the SVCB record's owner name MAY be the canonical name of a\r\n> \u00a0 \u00a0CNAME record, and the SvcDomainName MAY be the owner of a CNAME\r\n> \u00a0 \u00a0record.\u00a0 Clients and recursive resolvers MUST follow CNAMEs as\r\n> \u00a0 \u00a0normal.\r\n> \"\"\" \r\n> \r\n> I am not sure this is should be mentioned in the main part of the document and\r\n> maybe annex would be more appropriated. \r\n> ",
      "createdAt": "2020-03-10T01:04:12Z",
      "updatedAt": "2020-07-13T20:26:01Z",
      "closedAt": "2020-07-13T20:26:01Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, a reader requested clarification that the alias form does not redirect queries for any other QTYPEs (unlike CNAME).",
          "createdAt": "2020-04-10T18:56:24Z",
          "updatedAt": "2020-04-10T18:56:24Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #209",
          "createdAt": "2020-07-13T20:25:54Z",
          "updatedAt": "2020-07-13T20:25:54Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "MDU6SXNzdWU1NzgyNzQ4NTE=",
      "title": "Clarify non-HTTPS example",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/124",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "This example currently fuses two different zone files.  We can make it clearer that they are separate by adding a comment line above each RR.\r\n\r\n> \"\"\"\r\n> \u00a0As an example:\r\n> \r\n> \u00a0 \u00a0_8443._foo.api.example.com. 7200 IN SVCB 0 svc4.example.net.\r\n> \u00a0 \u00a0svc4..example.net. \u00a07200 \u00a0IN SVCB 3 ( svc4.example.net. alpn=\"bar\"\r\n> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port=\"8004\" esniconfig=\"...\" )\r\n> \"\"\"\r\n> \r\n> While many examples are useful for the understanding, they often provide the\r\n> impression RRsets are in the same zone file. I am wondering if that would not\r\n> be clarifying to show and mention zone files are different. Note this is just a\r\n> feed back and your ar efree to ignore it. ",
      "createdAt": "2020-03-10T01:09:54Z",
      "updatedAt": "2020-04-13T20:56:50Z",
      "closedAt": "2020-04-13T20:56:50Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged PR #129 ",
          "createdAt": "2020-04-13T20:56:50Z",
          "updatedAt": "2020-04-13T20:56:50Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "MDU6SXNzdWU1NzgyNzUwMTk=",
      "title": "Justify keeping AliasForm and ServiceForm in one RR type, or split them into two",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/125",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "We've gotten multiple comments asking why AliasForm and ServiceForm aren't separate RR types.  From a recursive resolver's perspective, this would simplify the processing logic.  However, it would also result in double the QPS for everyone, since clients would have to fire off simultaneous queries for _both_ Qtypes.\r\n\r\n> It seems strange to me to have a single RRset type associated to different\r\n> functionalities, i.e. Alias and Service. I suspect that it is more convenient\r\n> to have the same RRtype while requesting among different administrative\r\n> domains, but I would be happy to know the rationals for this design. I have the\r\n> impression that alias form is used to indicates the next RRtype (in our case,\r\n> SVCB) while service form indicates a terminal request. \u00a0 \u00a0 ",
      "createdAt": "2020-03-10T01:10:34Z",
      "updatedAt": "2020-04-13T20:56:32Z",
      "closedAt": "2020-04-13T20:56:31Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "We should make sure this rationale described in the appendix and then close this as WONTFIX.",
          "createdAt": "2020-03-10T01:13:06Z",
          "updatedAt": "2020-03-10T01:13:06Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, I think it's worse than double.  A client, not knowing whether its recursive will perform special-case handling of these queries, has to issue both queries immediately.  A recursive, upon seeing a ServiceForm query, would itself have to issue both ServiceForm and AliasForm queries, both at this point in the chain and subsequently at every point down the chain.  So it somewhat more than doubles the load of the whole design, and the recursive behavior is possibly even more complex.",
          "createdAt": "2020-03-10T01:14:47Z",
          "updatedAt": "2020-03-10T01:14:47Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Added a justification in PR #128 ",
          "createdAt": "2020-04-13T20:56:31Z",
          "updatedAt": "2020-04-13T20:56:31Z"
        }
      ]
    },
    {
      "number": 130,
      "id": "MDU6SXNzdWU1OTU3Mzk2OTI=",
      "title": "Unrecognized keys in presentation format",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/130",
      "state": "CLOSED",
      "author": "DesWurstes",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> Unrecognized keys are represented in presentation format as\r\n   \"keyNNNNN\" where NNNNN is the numeric value of the key type without\r\n   leading zeros.  In presentation format, values of unrecognized keys\r\n   SHALL be represented in wire format, using decimal escape codes (e.g.\r\n   \\255) when necessary.\r\n\r\nIsn't this self-contradictory?",
      "createdAt": "2020-04-07T09:50:17Z",
      "updatedAt": "2020-04-07T17:07:28Z",
      "closedAt": "2020-04-07T17:07:15Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent is that, if you encountered (e.g.) the \"alpn\" key but didn't have support for it, you would present it as\r\n\r\n    key1=\\008http/1.1\r\n\r\nThe text is attempting to distinguish between \"unrecognized keys\" and \"value of unrecognized keys\".  If that's not clear, we can change the text -- suggestions welcome.",
          "createdAt": "2020-04-07T12:28:57Z",
          "updatedAt": "2020-04-07T12:28:57Z"
        },
        {
          "author": "DesWurstes",
          "authorAssociation": "NONE",
          "body": "Thanks! Maybe it needs distinction between numerical values of keys and their corresponding values.",
          "createdAt": "2020-04-07T12:36:09Z",
          "updatedAt": "2020-04-07T17:07:28Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "MDU6SXNzdWU1OTk2MTQ0OTc=",
      "title": "Clarify how ALPN interacts with ECHO",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/132",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "With Encrypted Client Hello there is an ALPN on both the outer (exposed) and the inner (encrypted).  We should clarify how this interacts with the alpn= attribute.",
      "createdAt": "2020-04-14T14:25:46Z",
      "updatedAt": "2020-05-29T20:38:08Z",
      "closedAt": "2020-05-29T20:38:08Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "See related on ESNI/ECHO:  https://github.com/tlswg/draft-ietf-tls-esni/issues/216 ",
          "createdAt": "2020-04-14T14:30:11Z",
          "updatedAt": "2020-04-14T14:30:11Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "There are a couple of concepts implicated here:\r\n\r\n- What does the server advertise that it speaks?  That's the content of the SVCB record.  Note that this cannot be private information, since anyone could retrieve the DNS record.\r\n- What does the client want to admit that it speaks / is planning to speak?  That's the content of the public ClientHello.\r\n- What does the client actually want to speak?  That's the content of the encrypted ClientHello.\r\n\r\nIn most situations I can think of, it's the client that wants to conceal that it's using a particular protocol (e.g. a VPN tunnel), and so client policy would dictate when the public/private ALPN tokens differ.  Put something innocuous in the public ALPN extension, or even omit it.\r\n\r\nIf the server wants to conceal that it speaks a particular protocol, DNS is not the place to publish that information.  There might be value in a mechanism for the server to advertise \"secret\" ALPN tokens that it supports for the client's future use in encrypted ClientHellos, but I don't think SVCB is the venue for that.  It would need to be something it can provide only to already-authenticated clients -- perhaps something it could attach to an NST?  But regardless, out of this document's scope.",
          "createdAt": "2020-04-14T14:37:14Z",
          "updatedAt": "2020-04-14T14:39:33Z"
        },
        {
          "author": "sftcd",
          "authorAssociation": "NONE",
          "body": "\nHiya,\n\nOn 14/04/2020 15:37, Mike Bishop wrote:\n> There are a couple of concepts implicated here:\n> \n> - What does the server advertise that it speaks?  That's the content of the SVCB record.  Note that this cannot be private information, since anyone could retrieve the DNS record.\n> - What does the client want to admit that it speaks / is planning to speak?  That's the content of the public ClientHello.\n> - What does the client actually want to speak?  That's the content of the encrypted ClientHello.\n> \n\nThere's also an additional part - a server might be telling\nclients how to better not stick out or how to get interop\nif some other common choice might cause failures. I doubt\nwe can know for sure how to treat those for now.\n\n> In most situations I can think of, it's the client that wants to conceal that it's using a particular protocol (e.g. a VPN tunnel), and so client policy would dictate when the public/private ALPN tokens differ.  Put something innocuous in the public ALPN extension, or even omit it.\n> \n\nI doubt many clients will have such a rich policy. I'd\nexpect that client implementers will just pick something.\n\nI think the minimum we need to do is to say that\nHTTPSSVC.alpn is to be used in inner CH if ECHO is being\nused. It might also make sense to define a public_alpn\nfield either in ECHOConfig or HTTPSSVC and to then say\nthat if only one of those is present, then the same\nvalue SHOULD be used in inner and outer and if both are\npresent, then clients SHOULD follow what the server\nsaid. (And if we do do that, I'd argue to have the\npublic_alpn in the same structure as the public_name,\nwhether that's ECHOConfig or HTTPSSVC.)\n\n> If the server wants to conceal that it speaks a particular protocol, DNS is not the place to publish that information.\n\nWell... that same logic would call ESNI/ECHO into question\nentirely wouldn't it? So I don't find the argument below\nconvincing.\n\nS\n\n>  There might be value in a mechanism for the server to advertise \"secret\" ALPN tokens that it supports for the client's future use in encrypted ClientHellos, but I don't think SVCB is the venue for that.  It would need to be something it can provide only to already-authenticated clients -- perhaps something it could attack to an NST?\n> \n\n\n",
          "createdAt": "2020-04-14T15:02:40Z",
          "updatedAt": "2020-04-14T15:02:40Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "> > If the server wants to conceal that it speaks a particular protocol, DNS is not the place to publish that information.\r\n>\r\n> Well... that same logic would call ESNI/ECHO into question entirely wouldn't it? So I don't find the argument below convincing.\r\n\r\nNo, it wouldn't; the ESNI/ECHO keys are inherently public information.  They can (and should) be widely disseminated.  The fact that a server supports ECHO is similarly not private.  If you're assuming that the server's set of supported protocols *is* private information, then you need a private way to distribute that information.  ECHO, of course, only permits the transfer of private information from client to server.\r\n\r\nThat said, I don't object to ECHOConfig suggesting innocuous settings for other properties for use on the public side if the TLS WG wants to do that.  (@davidben makes a good point that the public name is less for innocuous value and more for delegating the authority to change config, though.)  I think that's orthogonal to SVCB telling you what the service supports and how to access it.",
          "createdAt": "2020-04-14T18:46:59Z",
          "updatedAt": "2020-04-14T18:47:09Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think discussion about which ALPN to use in TLS makes sense HTTPSSVC, except in so far as clarifying that the thing HTTPSSVC calls ALPN gets little to no on influence the TLS ALPN decision. (I.e. we must revert the Alt-Svc original sin.)\r\n\r\nBeyond that, for ECHO's semantics, the answer is clear: the inner ClientHello is the actual ClientHello. The client should put in the ALPN parameters it actually wants to negotiate. The outer ClientHello is to authenticate a key mismatch signal, so negotiated parameters only matter up to authenticating that signal. Thus, ECHO has opinions on the outer name because it selects the authenticating certificate. The outer ALPN doesn't seem very important.\r\n\r\nEither way, whether you got your ECHO config from HTTPSSVC or some hypothetical other channel, those same considerations hold, so any decisions here belong in ECHO, not HTTPSSVC.",
          "createdAt": "2020-04-14T20:36:44Z",
          "updatedAt": "2020-04-14T20:36:44Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Since it's been mentioned a few times, I want to clarify that the SVCB \"alpn=\" field does _not_ tell the client what to put in its ALPN field, at least not directly.  It tells the client about what ALPNs the _server_ supports, so that the client can choose transports that will work.  As the text (currently) notes\r\n\r\n> Clients SHOULD also include any other values that they support and could negotiate on that connection with equivalent or better security properties. For example, if the ALPN set only contains \"http/1.1\", the client could include \"http/1.1\" and \"h2\" in the ProtocolNameList.\r\n\r\nI agree that this text is talking about the inner ClientHello, and we need to make that clear in the drafts.",
          "createdAt": "2020-04-15T03:09:25Z",
          "updatedAt": "2020-04-15T03:09:25Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Is what we have there now good enough?\r\n(Or do we also want to mention ALPN on the outer?\r\nThe echo draft has:\r\n\r\n> It then constructs a new ClientHello (ClientHelloOuter) with an innocuous SNI\r\n>    (and potentially innocuous versions of other extensions such as ALPN\r\n>    [RFC7301]) and containing the encrypted ClientHelloInner as an\r\n>    extension.",
          "createdAt": "2020-05-14T02:50:19Z",
          "updatedAt": "2020-05-14T02:50:19Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Addressed as part of #148.",
          "createdAt": "2020-05-29T20:38:05Z",
          "updatedAt": "2020-05-29T20:38:05Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "MDU6SXNzdWU1OTk2MTQ5NDE=",
      "title": "Clarify Client DNS failure behaviour",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/133",
      "state": "CLOSED",
      "author": "fl1ger",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "Moin!\r\n\r\nReading the draft again in preparation for the dnsop interim I was confused by the Client behavior/Handling resolution failures section.\r\n\r\nThe client behaviour says that A/AAAA and SVCB/HTTPSVC should be run in parallel and the failure case says that if SVCB fails the client should not use A/AAAA. It think what we want here is that if the initial parallel query fails use A/AAAA as a lot of DNS devices fail in various forms when queried something not A/AAAA and the ENT or NXDomain handling also is questionable for a lot of DNS servers. \r\n\r\nIf the initial SVCB lookup give you something to follow you should fail on the final resolution, but not on the initial lookup as it will cause to much collateral damage.\r\n\r\nSo long\r\n-Ralf\r\n",
      "createdAt": "2020-04-14T14:26:19Z",
      "updatedAt": "2020-07-11T21:38:54Z",
      "closedAt": "2020-07-11T21:38:54Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's the full text\r\n>If an SVCB query results in a SERVFAIL error, transport error, or timeout, and DNS exchanges between the client and the recursive resolver are cryptographically protected (e.g. using TLS [RFC7858] or HTTPS [RFC8484]), the client MUST NOT fall back to non-SVCB connection establishment. This ensures that an active attacker cannot mount a downgrade attack by denying the user access to the SVCB information.\r\n\r\n> A SERVFAIL error can occur if the domain is DNSSEC-signed, the recursive resolver is DNSSEC-validating, and the attacker is between the recursive resolver and the authoritative DNS server. A transport error or timeout can occur if an active attacker between the client and the recursive resolver is selectively dropping SVCB queries or responses, based on their size or other observable patterns.\r\n\r\n> Similarly, if the client enforces DNSSEC validation on A/AAAA responses, it MUST NOT fall back to non-SVCB connection establishment if the SVCB response fails to validate.\r\n\r\nNote that these requirements are all restricted to DoT, DoH, or validating-stub.  I think this should exclude the buggy devices you're describing.  Also, I don't think we have a choice.  As the text notes, a less strict policy would open a downgrade attack on ECHO.",
          "createdAt": "2020-04-14T14:42:23Z",
          "updatedAt": "2020-04-14T14:42:23Z"
        },
        {
          "author": "fl1ger",
          "authorAssociation": "NONE",
          "body": "Ben when the authority SERVFAIL/NXDOMAIN/Timeouts for the SVCB question of the resolver the resolver has and will give back SERVFAIL or NXDomain. It does not matter if the stub connects over DoH, DoT or  regular DNS. What will the client do in that case?\r\n\r\n",
          "createdAt": "2020-04-14T14:48:26Z",
          "updatedAt": "2020-04-14T14:48:26Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "NXDOMAIN is fine, but SERVFAIL or timeout->SERVFAIL currently cannot be tolerated, and the client will not be able to access the domain until the buggy authoritative is fixed.  Suggestions welcome!",
          "createdAt": "2020-04-14T16:46:38Z",
          "updatedAt": "2020-04-14T16:46:38Z"
        },
        {
          "author": "fl1ger",
          "authorAssociation": "NONE",
          "body": "NXDOMAIN is not fine. NXDOMAIN for example.com SVCB means that example.com does not exists. The correct answer is Noerror/NOData. I have seen domains not responding properly to new qtypes (e.g AAAA/NS) more often than I wished. If we want to go down that way we at least have to put a warning sign in the text as sites will break if we see SERVFAIL or NXDOMAIN of SVCB request as a downgrade attack.",
          "createdAt": "2020-04-16T13:27:47Z",
          "updatedAt": "2020-04-16T13:27:47Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "I believe the primary security concern here is around a network attacker blocking some of the messages to try to prevent just the HTTPSSVC result and trick A/AAAA into being used without ESNI.  Thus clients need to be careful with anything that could have been the result of such an attack.\r\n\r\nNXDOMAIN, should in theory be sufficient for the client to trust that there really is not an HTTPSSVC result, whether because the domain doesn't exist or because an existing domain doesn't have HTTPSSVC and something is responding improperly.  Either way, it should be safe for the client to fallback to A/AAAA on receiving NXDOMAIN (or NOERROR/NODATA).  Compare to SERVFAIL which could signify that a resolver failed to get a result from upstream, which could be the result of a network attacker.\r\n\r\nOr is your concern that it may be too common for incorrectly-implemented resolvers to return NXDOMAIN in cases where an attacker is blocking things?",
          "createdAt": "2020-04-16T15:09:23Z",
          "updatedAt": "2020-04-16T15:09:23Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, @ericorth explained it better.  Returning NXDOMAIN is a bug, but the resulting user-visible behavior is fine.  It's SERVFAIL or timeout that would really be a problem.\r\n\r\nIf SERVFAIL turns out to be a real issue, implementors may be forced to back off slightly, e.g. by showing a click-through warning.  I tend to think that those behaviors don't need to be standardized, but feel free to suggest text.",
          "createdAt": "2020-04-16T18:32:27Z",
          "updatedAt": "2020-04-16T18:32:27Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "It would be good to do an experiment as to how many of the Alexa/Umbrella top-N names return NXDOMAIN rather NODATA for a SVCB query (but return a valid A or AAAA or CNAME response).  Even if a bug, if too common it could impact deployability.  Some authorities certainly had this bug in the early days of AAAA existence (and some may still do so).",
          "createdAt": "2020-04-16T19:06:56Z",
          "updatedAt": "2020-04-16T19:06:56Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dmcardle I think this is one of the questions your experiment was looking to answer.",
          "createdAt": "2020-04-16T23:34:01Z",
          "updatedAt": "2020-04-16T23:34:01Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "It doesn't help when IESG members think that blocking DNS types is good security practice.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/dnsop/BQwfAlTgqQf0X7HCFWE0ashFApU/\r\n\r\nThe following tool is already setup for bulk testing of known and unknown types (genreport -t).\r\n\r\nhttps://gitlab.isc.org/isc-projects/DNS-Compliance-Testing",
          "createdAt": "2020-04-17T01:13:53Z",
          "updatedAt": "2020-04-17T01:13:53Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "Note Alexa/Umbrella lists have a higher proportion of F5 servers some of which are misconfigured.\r\n",
          "createdAt": "2020-04-17T01:16:05Z",
          "updatedAt": "2020-04-17T01:16:05Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "And Google's servers return NOTIMP for unknown types.  Microsoft's outlook servers also return NOTIMP.  Unknown types outside of the reserver meta range are supposed to be treated as opaque blobs which RFC compliant server should return NOERROR or NXDOMAIN for depending upon whether the name exists or not.",
          "createdAt": "2020-04-17T08:31:10Z",
          "updatedAt": "2020-04-17T08:31:10Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "@enygren We're currently working on a [Chrome experiment](https://docs.google.com/document/u/1/d/14eCqVyT_3MSj7ydqNFl1Yl0yg1fs6g24qmYUUdi5V-k/edit) to measure how an arbitrary new record type propagates through the DNS ecosystem.",
          "createdAt": "2020-04-17T14:57:48Z",
          "updatedAt": "2020-04-17T14:57:48Z"
        },
        {
          "author": "fl1ger",
          "authorAssociation": "NONE",
          "body": "@dmcardle this experiment only checks the behaviour of recursive resolvers. \r\n\r\nMy concern is that authorities (of which we have a lot more) will answer incorrect and the poor resolver has to give back the client that incorrect answer. This will happen and as we know it we should maybe describe that if we want to be strict about that. What about:\r\n...\r\nThis ensures that an active attacker\r\n   cannot mount a downgrade attack by denying the user access to the\r\n   SVCB information.\r\n\"SERVFAIL answers potentially also can happen when the authoritative name server for a domain is broken or non standards compliant, e.g if it sends SERVFAIL, NXDOMAIN or NOTIMP back to the resolver instead of the correct empty response for an RRType it does not know or has no data for.\"\r\n\r\n",
          "createdAt": "2020-04-19T08:03:36Z",
          "updatedAt": "2020-04-19T08:03:36Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could the experiment not query the experiment-domain directly as part of the test?  ",
          "createdAt": "2020-04-19T17:28:02Z",
          "updatedAt": "2020-04-19T17:28:02Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@fl1ger Are you saying that the recursive will convert NXDOMAIN or NOTIMP to SERVFAIL?  I've never heard of that.",
          "createdAt": "2020-04-19T18:29:11Z",
          "updatedAt": "2020-04-19T18:29:11Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe the concern is that authorities may return SERVFAIL or NXDOMAIN for SVCB (rather than NODATA NOERROR) for names with valid A/AAAA/CNAME records so treating this as a hard-fail rather than fallback will DoS these sites.\r\n\r\nOne approach would be to convert the \"MUST\" to a \"SHOULD\" with guidance that a downgrade attack may be possible between the recursive and authority, and that client authors may use the results of future research to determine when it is safe to enforce this behavior.",
          "createdAt": "2020-04-19T20:20:54Z",
          "updatedAt": "2020-04-19T20:20:54Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We may want to separate the error cases then. IIRC, the original feedback here was that an attacker between the client and recursive could try to recognize which packets contained SVCB vs A/AAAA (the responses are vastly different sizes) and drop one. Especially since they go on HTTP/3 streams, it's quite likely an attacker can cause problems here. This leg is, I think, mostly concerned with timeouts and transport errors.\r\n\r\n#104, however, generalized it to all kinds of errors. Hardening the error-handling is nice, but given the concerns around deployment risk, that was perhaps too large of a change.",
          "createdAt": "2020-04-19T20:34:59Z",
          "updatedAt": "2020-04-19T20:37:14Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "In reality there is one or two vendors holding the whole industry to ransom due to their negligence. \r\nLets not be held to ransom and actually say MUST NOT proceed to make a connection unless the SVCB returns a NOERROR response.  Vendors can fix this in under 24 hours as I have seen them do it that fast in the past multiple times.  Vendors can issue advisories to their clients that they should upgrade.\r\n\r\nRFC 1034 and RFC 1035 has the server returning SERVFAIL if it couldn't LOAD the master file (e.g. because it didn't implement a type present in the master file) and returning NOERROR or NXDOMAIN if the zone file loaded.\r\n\r\nRFC3597 further reinforced this by saying all type code other than the meta range (RFC2929) are to be treated as opaque blobs and providing a presentation format for unknown record types.\r\n\r\nWe also have draft-ietf-dnsop-no-response-issue-23 in the RFC editor queue pointing out the mis use of NOTIMP.\r\n\r\nGoogle have already indicated they they will fix their servers as a matter of urgency.  Google acknowledges that they correct rcodes are NOERROR or NXDOMAIN and not NOTIMP.  Microsoft have committed to fix their corporate authoritative servers as part of deploying TLSA support.   AFAIK the implementation in Windows is fine.",
          "createdAt": "2020-04-19T21:33:34Z",
          "updatedAt": "2020-04-19T21:33:34Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "Clients are very risk averse when it comes to making changes that could break accessing internet sites that worked fine (from the user perspective) before the change.  Ignoring what would have been perfectly good A/AAAA results because an SVCB returned NXDOMAIN or NOTIMP would be a tough sell.  The case would have to be made either that it is vital for safe functioning of SVCB queries (as is the case with timeout and maybe SERVFAIL) or that it would not currently be a significant issue and nothing would break.\r\n\r\nEven with timeout/SERVFAIL, while we're optimistic it'll be acceptable to treat those as fatal, there's enough skepticism to have started the experiments dmcardle mentioned above.",
          "createdAt": "2020-04-20T16:24:46Z",
          "updatedAt": "2020-04-20T16:24:46Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "We've adjusted the failure behavior requirements to give clients more leeway, and be more explicit about the rationale, in #210.",
          "createdAt": "2020-07-11T21:38:54Z",
          "updatedAt": "2020-07-11T21:38:54Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "MDU6SXNzdWU1OTk2MTYyMzU=",
      "title": "Add warning about using non-default ports",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/134",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Paul Vixie recommends we add a warning that operators should avoid using non-default ports for general Internet use.  Non-default ports may be firewalled in client networks, so may appear to work in testing but may not work for some clients/users.",
      "createdAt": "2020-04-14T14:28:04Z",
      "updatedAt": "2020-05-13T03:53:50Z",
      "closedAt": "2020-05-13T03:53:50Z",
      "comments": []
    },
    {
      "number": 135,
      "id": "MDU6SXNzdWU2MDM1NDMxNzY=",
      "title": "Consider reordering examples",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/135",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the examples come before the formal definition of the RR type.  It might be sensible to move them after instead.",
      "createdAt": "2020-04-20T21:20:50Z",
      "updatedAt": "2020-05-14T02:43:19Z",
      "closedAt": "2020-05-14T02:43:19Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2020-04-20T22:29:44Z",
          "updatedAt": "2020-04-20T22:29:44Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "MDU6SXNzdWU2MDM1NDY3ODg=",
      "title": "Clarify presentation format section",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/136",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The wording about key=value syntax is confusing.  It could be clearer, e.g.\r\n>    The presentation format for SvcFieldValue is a whitespace-separated list of\r\n> \u00a0 \u00a0key=value pairs (e.g. \"key123=value1 keys456=value2\"). When the value, or\r\n> \u00a0 \u00a0both the value and the \"=\" are omitted, the value should be interpreted as\r\n> \u00a0 \u00a0being empty.",
      "createdAt": "2020-04-20T21:27:21Z",
      "updatedAt": "2020-05-13T03:51:37Z",
      "closedAt": "2020-05-13T03:51:37Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Related clarification suggestion:\r\n\r\n> 6. In Section 2.2 it says (in reference to param field values):\r\n> \r\n> \u00a0 \u00a0o\u00a0 an octet string of the length defined by the previous field.\r\n> \r\n> It might be good to say here that the format of this octet string is defined\r\n> according to the corresponding SvcParamKey, and then reference section 6 for\r\n> ths currently defined keys. The same applies for section 2.1.1 for the\r\n> presentation format.",
          "createdAt": "2020-04-20T21:28:16Z",
          "updatedAt": "2020-04-20T21:28:16Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "MDU6SXNzdWU2MDM1NTcwNDI=",
      "title": "Request: combine ABNF in one place",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/138",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is more of a \"nice to have\" but would it be possible to have an appendix with all the ABNF in one place, along with the references to other documents where other definitions exist? \r\n\r\nBe glad to send a pull request. ",
      "createdAt": "2020-04-20T21:47:58Z",
      "updatedAt": "2020-04-30T18:46:39Z",
      "closedAt": "2020-04-30T18:46:39Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, PRs welcome!  EDIT: If you're looking at the ABNF, you might want to consider whether it's correct as stated.  Unfortunately, there's no definitive ABNF for zone file format, and some aspects seem ambiguous.",
          "createdAt": "2020-04-21T00:30:24Z",
          "updatedAt": "2020-04-21T00:31:38Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/MikeBishop/dns-alt-svc/pull/139  is to fix up minor validation issues. \r\n",
          "createdAt": "2020-04-21T03:00:11Z",
          "updatedAt": "2020-04-21T03:00:11Z"
        }
      ]
    },
    {
      "number": 147,
      "id": "MDU6SXNzdWU2MTM3MDc3Njk=",
      "title": "Clarify that transport proxies cannot issue SVCB queries",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/147",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2020-05-07T01:18:05Z",
      "updatedAt": "2020-06-11T02:05:30Z",
      "closedAt": "2020-06-11T02:05:29Z",
      "comments": []
    },
    {
      "number": 149,
      "id": "MDU6SXNzdWU2MTc3NzA2Njk=",
      "title": "Question about connection reuse",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/149",
      "state": "CLOSED",
      "author": "ddragana",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is an example:\r\nThere are this 2 records for eampleA.com and exampleB.com:\r\nexampleA.com.  7200  IN HTTPSSVC  1 examples.com alpn=h2,h3 esniconfig=\"...\"\r\n\r\nexampleB.com.  7200  IN HTTPSSVC  1 examples.com alpn=h2,h3 esniconfig=\"...\"\r\n\r\nthey map to the same SvcDomainName.\r\nexamplea.com is requested first and there is already established connection to examples.com using sni examplea.com.\r\nNow request for exampleb.com should be made. The request cannot use already existing connection to examples.com unless it is permitted by Origin frame (RFC8336) or Section 9.1.1. in RFC7540 (this is not part of this spec)\r\nA connection can be reused only if ClientHello has not been send yet.\r\nI think this is a correct behavior. Maybe the spec should be more descriptive in Section \"Optimistic pre-connection and connection reuse\". There is this line:\r\n\r\n> If an SVCB record is consistent with an active or in-progress connection C\r\n\r\n`active` is not defining the needed state well, maybe it should be better define for HTTPSSVC case specifically.",
      "createdAt": "2020-05-13T21:36:14Z",
      "updatedAt": "2020-05-25T18:43:13Z",
      "closedAt": "2020-05-25T18:43:13Z",
      "comments": [
        {
          "author": "ddragana",
          "authorAssociation": "NONE",
          "body": "Also one more question: Should this draft extend a bit Section 9.1.1. in RFC7540? RFC7540 says that connection can be reuse if an origin host resolves to the the same IP address. Can this criteria be extended to \"the same SvcDomainName\"?",
          "createdAt": "2020-05-14T05:47:41Z",
          "updatedAt": "2020-05-14T05:47:50Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "I'm not sure that requires updating 7540.  If you're resolving the other hostname and it leads to the same SvcDomainName, then you likely have the remaining steps of the resolution cached.  It resolved to the same address.",
          "createdAt": "2020-05-14T14:48:34Z",
          "updatedAt": "2020-05-14T14:48:34Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@ddragana I agree with your analysis of the example you've posed, but I think the current text covers it, by defining \"consistent\" to mean \"the client would attempt an equivalent connection\".  Two connections with different SNI are not equivalent for HTTPS, given the conditions you identified in RFC 7540.\r\n\r\nIf you think it's unclear, we could add a sentence like \"For HTTPS, the criteria for a suitable connection are given in RFC 7540 Section 9.1.1.\".",
          "createdAt": "2020-05-15T01:55:42Z",
          "updatedAt": "2020-05-15T01:55:42Z"
        },
        {
          "author": "ddragana",
          "authorAssociation": "NONE",
          "body": "The current text is fine. ",
          "createdAt": "2020-05-25T18:43:13Z",
          "updatedAt": "2020-05-25T18:43:13Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWU2Mjc0OTMwOTY=",
      "title": "Larger SvcParamKey space for experiments and first-come-first-served allocations",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/154",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wg"
      ],
      "body": "Having only 256 experimental SvcParamKeys may not be enough.\r\nProposed would be to leave the first 32k as expert review,\r\nmost of the next 32k as first-come-first-served, and some\r\nsubset (256) as experimental/private-use.",
      "createdAt": "2020-05-29T19:31:27Z",
      "updatedAt": "2020-06-11T02:55:45Z",
      "closedAt": "2020-06-11T02:55:45Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #113 ",
          "createdAt": "2020-05-29T19:42:56Z",
          "updatedAt": "2020-05-29T19:42:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems like a pretty reasonable plan to me. Without a change like this, doing experiments seems like it'd be challenging.",
          "createdAt": "2020-06-04T21:33:20Z",
          "updatedAt": "2020-06-04T21:33:20Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since I requested this change, I'm clearly in favor of it too =)\r\n\r\nShould we bring this up with WG as a discussion item?",
          "createdAt": "2020-06-05T22:48:31Z",
          "updatedAt": "2020-06-05T22:48:31Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see this as terribly contentious.  I would just do it, and highlight it for discussion in the changelog we send to the WG.\r\n\r\nAlso, I'm tempted to make codes 1-255 \"RFC Required\".",
          "createdAt": "2020-06-07T16:37:46Z",
          "updatedAt": "2020-06-07T16:37:46Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That all sounds good to me",
          "createdAt": "2020-06-08T15:41:30Z",
          "updatedAt": "2020-06-08T15:41:30Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "I still prefer #113, but I recognize that I'm clearly biased (because I opened #113 and because I only deal with client-side where the additional bytes are mostly free).  This proposal seems to be a reasonable compromise that greatly mitigates the main issue of 256 keys being completely insufficient for experimentation.  So overall, SGTM!\r\n\r\nRe WG discussion: I wouldn't expect this to be contentious enough to require discussion before adding to the next draft.\r\n\r\nRe a small RFC-Required block: Assuming the primary motivation would be to save the \"good\" low numbers for the really important things (rather than concerns over running out of points), I would argue that we should make it even stricter (\"Standards Action\") since I see no reason for Informational or Experimental drafts to get the distinction.",
          "createdAt": "2020-06-08T16:54:51Z",
          "updatedAt": "2020-06-08T16:56:31Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "MDU6SXNzdWU2Mzc0NDc4NzA=",
      "title": "Consider a way to indicate some keys as \"mandatory\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/166",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "wg"
      ],
      "body": "@enygren has proposed identifying a key range as \"mandatory\".  A client encountering an unrecognized \"mandatory\" key would discard the entire RR.\r\n\r\nThe current draft already relies on mandatory understanding for the \"port\" and \"alpn\" keys.  Without a mandatory range, keys of this kind could not be defined in a future draft.\r\n\r\nPR #164 is an example of something that might make sense as a followup RFC, but currently can't be because of the lack of such a range.\r\n\r\nPreviously, this seemed somewhat artificial to me, but with the new partitioned key ranges it doesn't seem so strange.  Perhaps we could assign this meaning to the new 1-255 \"Standards Action\" range.\r\n\r\nEDIT: Alternatively, this could be its own SvcParamKey, e.g. `mandatory=port,alpn`.\r\nEDIT2: Using 1-255 seems like a very small range, but if we ever get close to running out, we can simply define a `mandatory` SvcParamKey in that range, and use it to extend the behavior indefinitely.  So if we choose a range, it can be small.",
      "createdAt": "2020-06-12T02:56:58Z",
      "updatedAt": "2020-07-03T02:54:46Z",
      "closedAt": "2020-07-03T02:54:46Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "We wouldn't want that meaning for all Standards Action values, though; certainly someone might define an optional-to-understand value in a standard.  Given than new values in each range might want to define either type of value, I'd be more inclined toward a `mandatory=` parameter which lists the parameters which must be understood to consider this entry.",
          "createdAt": "2020-06-17T19:26:34Z",
          "updatedAt": "2020-06-17T19:26:34Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @MikeBishop that we shouldn't necessarily tie the Standards Action range to being mandatory. I can see reasons to have mandatory keys that are in non-standard ranges, and reasons to have standardized values that aren't mandatory.\r\n\r\nBeyond that, I can see it being reasonable for the existing keys (ech) to be not supported by a client at first, while ALPN is, etc.\r\n\r\nI'd prefer to see a `mandatory=` parameter as well to allow the record to specify more clearly which parts it finds necessary. Right now, the value `0` is `Reserved for internal use`. Could this be used perhaps as the `mandatory` key? The value would be a list of other keys, and this would also have the nice benefit of being required to be first key in the list, so clients know up front if they support all the mandatory fields.",
          "createdAt": "2020-06-17T22:11:00Z",
          "updatedAt": "2020-06-17T22:11:00Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I also like this idea of mandatory= parameter using SvcParamKey=0.\r\n\r\n(Would we want to also allow mandatory= to appear on Alias form but without any defined/allowed parameters.  That creates a future for parameters on Alias form but without needing to define any now?)",
          "createdAt": "2020-06-18T02:16:58Z",
          "updatedAt": "2020-06-18T02:16:58Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm OK with 0 -> `mandatory`, but I also like 1 -> `mandatory`, leaving 0 for use as some kind of null.\r\n\r\nI have some concerns about allowing it in AliasForm.  That would have several knock-on effects:\r\n* Recursive resolvers would have to parse the SvcFieldValue, to see if it contains an unrecognized mandatory key.\r\n* Multiple aliases in an RRSet would have to be allowed, to support recursive and clients that can't use one of the aliases due to a unsupported mandatory key.  This would then require some kind of preference ordering among multiple aliases, assuming that the new mandatory key is actually useful.\r\n\r\nThis proposal is already pretty complicated, and we don't have a use case for mandatory keys on aliases, so I think we're probably better off keeping `mandatory` ServiceForm-only, like the other keys.",
          "createdAt": "2020-06-22T18:53:43Z",
          "updatedAt": "2020-06-22T18:53:43Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "One problem with \"mandatory\" is how to deal with `alpn` and `port`.  These are both already mandatory: you can't connect if they are present and you don't understand and use them.  Some options:\r\n* Require every record that uses `port` or `alpn` to have a `mandatory` key.\r\n* Special-case these two keys as implicitly mandatory\r\n* Assign a range of mandatory keys (i.e. encode it as a flag in the key id)\r\n* Make keys mandatory by default, and define an `optional` key.\r\n\r\nI'm beginning to feel like the last option is the least error-prone and most comprehensible.  It would have some interesting side effects, such as allowing endpoints that not only support ECH but actually require it.",
          "createdAt": "2020-06-24T03:13:13Z",
          "updatedAt": "2020-06-24T03:13:13Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I think optional is a saner default.  As such, I'd lean towards either allowing protocol bindings to specify a set of implicitly mandatory keys  (HTTPS would specify alpn and port.), or just special-casing those two in general. ",
          "createdAt": "2020-06-24T14:20:35Z",
          "updatedAt": "2020-06-24T14:20:35Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Optional is definitely the better default. Don't make keys mandatory in general.\r\n\r\nI'd say we can have those two keys implicitly mandatory if we really want (option 2)\u2014or just leave it to the deployment to mark what *they* think is mandatory (option 1). Yes, your use case for `port` is mandatory now, but that doesn't there couldn't be possible use cases in which you can have an alpn value that for some reason an implementation doesn't parse, but also have fields in the record that mean it shouldn't be thrown out.",
          "createdAt": "2020-06-24T15:44:02Z",
          "updatedAt": "2020-06-24T15:44:02Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree with \"don't make keys mandatory in general\" logic.  ",
          "createdAt": "2020-06-24T15:52:38Z",
          "updatedAt": "2020-06-24T15:52:38Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I've written up a PR for \"mandatory\", #205, reflecting the input here.\r\n\r\nOne difference: I didn't reorder the list of IANA codepoints.  I'm happy to do that if people have feelings about which number should mean what.",
          "createdAt": "2020-07-01T02:49:26Z",
          "updatedAt": "2020-07-01T02:49:26Z"
        }
      ]
    },
    {
      "number": 167,
      "id": "MDU6SXNzdWU2Mzc5NTAyNzU=",
      "title": "Whether to include weight as a parameter",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/167",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "Moving this issue out of the text (even if we WONTFIX it for now):\r\n\r\n## Whether to include Weight\r\n\r\nSome other similar mechanisms such as SRV have a weight in addition\r\nto priority.  That is excluded here for simplicity.  It could always be\r\nadded as an optional SVCB parameter.",
      "createdAt": "2020-06-12T19:06:12Z",
      "updatedAt": "2020-06-18T03:27:44Z",
      "closedAt": "2020-06-18T03:27:44Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I argue for \"no\".  You are going down the slippery slope of SRV. \r\n\r\nThe only places I've seen usage of SRV is  by - SIP, Kerberos,  and XMPP",
          "createdAt": "2020-06-17T22:18:25Z",
          "updatedAt": "2020-06-17T22:18:25Z"
        }
      ]
    },
    {
      "number": 168,
      "id": "MDU6SXNzdWU2Mzc5NTQzMzg=",
      "title": "SVCB record include service name in RDATA?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/168",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "Moving from the draft to an issue.\r\nProposing to WONTFIX this.\r\n\r\nAnother open question is whether SVCB records\r\nshould be self-descriptive and include the service name\r\n(eg, \"https\") in the RDATA section to avoid ambiguity.\r\nPerhaps this could be included as an svc=\"baz\" parameter\r\nfor protocols that are not the default for the RR type?\r\nCurrent inclination is to not do so.",
      "createdAt": "2020-06-12T19:15:11Z",
      "updatedAt": "2020-06-18T03:27:55Z",
      "closedAt": "2020-06-18T03:27:55Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree here",
          "createdAt": "2020-06-18T03:19:39Z",
          "updatedAt": "2020-06-18T03:19:39Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "MDU6SXNzdWU2Mzg0NDU1ODM=",
      "title": "\"NOT REQUIRED\" not a legit 2119 keyword",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/171",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nIn the section \"Using SVCB with HTTPS and HTTP\" the text says \"NOT REQUIRED\" and while I agree the upper case adds the gravitas, it's not a legit 2119 keyword.\r\n\r\n",
      "createdAt": "2020-06-14T22:44:18Z",
      "updatedAt": "2020-06-22T18:41:31Z",
      "closedAt": "2020-06-22T18:41:31Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Hm, I think that technically we want a \"MAY not implement Alt-Svc,\" but the naive reading of that is that you're not allowed to implement.  \"MAY choose not to implement Alt-Svc.\"\r\n\r\nAlternatively, do we need 2119 language here?  \"need not implement\" would communicate the right message.",
          "createdAt": "2020-06-16T22:38:35Z",
          "updatedAt": "2020-06-16T22:41:27Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My opinion is we don't need the 2119 language.  I was offering the option if the authors feel they want one. ",
          "createdAt": "2020-06-16T22:45:36Z",
          "updatedAt": "2020-06-16T22:45:36Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This can. be closed",
          "createdAt": "2020-06-18T03:27:12Z",
          "updatedAt": "2020-06-18T03:27:12Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "MDU6SXNzdWU2Mzk5ODg4MTk=",
      "title": "We should change master to primary in Appendix A.3",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/172",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "FYI, I was just thinking we should be ahead of this. ",
      "createdAt": "2020-06-16T21:38:48Z",
      "updatedAt": "2020-06-16T21:59:58Z",
      "closedAt": "2020-06-16T21:59:58Z",
      "comments": []
    },
    {
      "number": 177,
      "id": "MDU6SXNzdWU2NDA4ODAyMDQ=",
      "title": "Update document references",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/177",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Per Nits, these documents have updated versions:\r\n\r\n {{!ECH=I-D.ietf-tls-esni-07}})\r\n {{!HTTP3=I-D.draft-ietf-quic-http-29}} \r\n {{?I-D.draft-ietf-dnsop-aname-04}}\r\n\r\nand {{!Attrleaf=I-D.ietf-dnsop-attrleaf}} is now RFC8552\r\n",
      "createdAt": "2020-06-18T03:33:08Z",
      "updatedAt": "2020-06-22T18:35:11Z",
      "closedAt": "2020-06-22T18:35:11Z",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "The doc just shouldn't reference specific version numbers at all unless we truly mean *that specific version and no other*; the build process will fetch the most current version of the document if not specified.",
          "createdAt": "2020-06-22T17:42:44Z",
          "updatedAt": "2020-06-22T17:42:44Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh that makes perfect sense actually.  I was wondering why some references had versions and another did not. \r\n\r\nand I've gotten my tooling worked out.  ",
          "createdAt": "2020-06-22T17:45:49Z",
          "updatedAt": "2020-06-22T17:45:49Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The we should remove the version numbers on those documents? ",
          "createdAt": "2020-06-22T18:04:42Z",
          "updatedAt": "2020-06-22T18:04:42Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "MDU6SXNzdWU2NDM1Nzc3MjM=",
      "title": "SRV language is unnecesarily perjorative",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/180",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "> Address a set of long-standing issues due to HTTP(S) clients not implementing support for SRV records, as well as due to a limitation that a DNS name can not have both CNAME and NS RRs (as is the case for zone apex names)\r\n\r\nThis implies fault in clients for a refusal to implement, as opposed to SRV not providing sufficient advantages for HTTP(S) clients.\r\n\r\nRather than get into the why, it might be best to say which of the features of SRV are provided and why.  \r\n\r\nI might also separate out the point about NS and CNAME not playing well together.\r\n\r\n",
      "createdAt": "2020-06-23T06:46:21Z",
      "updatedAt": "2020-07-13T03:18:37Z",
      "closedAt": "2020-07-13T03:18:37Z",
      "comments": []
    },
    {
      "number": 181,
      "id": "MDU6SXNzdWU2NDM1NzgzNTM=",
      "title": "EOFU: HSTS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/181",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "HSTS is mentioned in Section 1.1, but it is not expanded or a citation provided.",
      "createdAt": "2020-06-23T06:47:34Z",
      "updatedAt": "2020-07-13T17:26:31Z",
      "closedAt": "2020-07-13T17:26:31Z",
      "comments": []
    },
    {
      "number": 182,
      "id": "MDU6SXNzdWU2NDM1ODExMjU=",
      "title": "Non-normative normative language",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/182",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Seciton 1.2 is explicitly non-normative (whatever that means), but it uses some language that looks very much like normative requirements:\r\n\r\n> Clients must either use responses included in the additional section returned by the recursive resolver or perform necessary SVCB, A, and AAAA record resolutions.  DNS authoritative servers may attach in-bailiwick SVCB, A, AAAA, and CNAME records in the Additional Section to responses for a SVCB query.\r\n\r\nThe use of lowercase here means non-normative, but the choice of words is unfortunate.  Why not use different words:\r\n\r\n> Clients either use responses included in the additional section returned by the recursive resolver or perform necessary SVCB, A, and AAAA record resolutions.  DNS authoritative servers can attach in-bailiwick SVCB, A, AAAA, and CNAME records in the Additional Section to responses for a SVCB query.\r\n",
      "createdAt": "2020-06-23T06:52:41Z",
      "updatedAt": "2020-07-13T20:22:42Z",
      "closedAt": "2020-07-13T20:22:42Z",
      "comments": []
    },
    {
      "number": 183,
      "id": "MDU6SXNzdWU2NDM1ODM3ODc=",
      "title": "Definition of \"origin server\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/183",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "> The \"origin server\" is the server that the client would reach when accessing the origin in the absence of the SVCB record or an HTTPS Alt-Svc.\r\n\r\nHTTP has a definition of origin server that this is not compatible with.  In HTTP an \"origin server\" is a server that is authoritative.  As the goal of this document is to define alternative ways to reach a server that is authoritative, the definition this document uses is very confusing.\r\n\r\nI don't have a solid alternative at this point, but I might suggest that the notion of \"whatever you get when this record isn't used\" isn't a very useful distinction.  As a hypothetical, consider a protocol that only uses SVCB derivatives for discovery, which would obviously have no such concept.  It might be better to dispense with the notion of \"original server\" entirely.",
      "createdAt": "2020-06-23T06:57:28Z",
      "updatedAt": "2020-07-13T19:52:33Z",
      "closedAt": "2020-07-13T19:52:33Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One example of where this term is used:\r\n\r\n> The \"port\" SvcParamKey defines the TCP or UDP port that should be used to contact this alternative service.  If this key is not present, clients SHALL use the origin server's port number.",
          "createdAt": "2020-06-23T08:45:42Z",
          "updatedAt": "2020-06-23T08:45:42Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The only other place this is used is:\r\n```\r\nIf none of the options succeed, the\r\n       client SHOULD connect to the origin server directly.\r\n```\r\n\r\nIt seems like this term is used sparsely enough it can be dispensed with, and the sentences reworded.",
          "createdAt": "2020-06-23T16:41:47Z",
          "updatedAt": "2020-06-23T16:41:47Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "MDU6SXNzdWU2NDM1ODUwMTY=",
      "title": "64k priorities!",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/184",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "I realize that this might be going against an established trend, but the notion that 65535 different values for priority might be useful is a little fanciful.  HTTP are proposing just 8, DSCP had 64, and neither has any real expectation that there will be any value in having all of those options.  Why not 255?",
      "createdAt": "2020-06-23T06:59:44Z",
      "updatedAt": "2020-07-01T17:36:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Mainly for consistency with existing DNS types.  MX, SRV, NAPTR, and URI all have a similar \"Priority\" or \"Preference\" field, and they are all 16-bit unsigned.\r\n\r\nI don't have a use case for more than 255 values, but I wouldn't want to break the pattern without a positive signal from the DNS experts.  I'm happy to solicit input from DNSOP if you think it's worth changing.",
          "createdAt": "2020-06-23T16:51:44Z",
          "updatedAt": "2020-06-23T16:51:44Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd argue for leaving this as-is. Is it more priorities than we need? Yes, but it also fits the existing DNS RR type implementations better.",
          "createdAt": "2020-06-23T16:58:02Z",
          "updatedAt": "2020-06-23T16:58:02Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's true that Priority/Preference fields are 16-bit unsigned, but based on 20yr old decisions. \r\nI don't think I have seen anyone using a value > 255, and this is from years of looking at DNS zone data. \r\nIf it is left as is, I'd mention it's to align with those DNS RR Types.  ",
          "createdAt": "2020-06-23T17:10:55Z",
          "updatedAt": "2020-06-23T17:10:55Z"
        },
        {
          "author": "andrewtj",
          "authorAssociation": "NONE",
          "body": "It's odd to want to retain this for consistency with other types and also have no qualms about changing the meaning of the name \".\".",
          "createdAt": "2020-06-28T03:43:48Z",
          "updatedAt": "2020-06-28T03:43:48Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose leaving this as 64k for consistency and closing.",
          "createdAt": "2020-06-30T19:49:44Z",
          "updatedAt": "2020-06-30T19:49:44Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've made a note to mention this when we do a WGLC to see what the WG says",
          "createdAt": "2020-07-01T11:45:32Z",
          "updatedAt": "2020-07-01T11:45:32Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Given the code point assignment for the RR types and this being a wire-format change, we should either change this ASAP or leave it as-is.",
          "createdAt": "2020-07-01T14:44:41Z",
          "updatedAt": "2020-07-01T14:44:41Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Indeed. We can't really change this if we have the wire format stable. If we do anything, let's have editorial text explaining why it's a 16-bit field.",
          "createdAt": "2020-07-01T17:36:45Z",
          "updatedAt": "2020-07-01T17:36:45Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "MDU6SXNzdWU2NDM1ODk2Nzk=",
      "title": "ABNF for values",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/185",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "The definition of values allows for quoting, but the ABNF doesn't capture that.\r\n\r\n```\r\n   escaped-char  = \"\\\" (VCHAR / WSP)\r\n```\r\n\r\nThis implies that \"\\3\" is valid, where it is not.  Capturing this is not so difficult.\r\n\r\n```\r\n   basic-visible = %x21 / %x23-27 / %x2A-3A / %x3C-5B / %x5D-7E\r\n   unescaped = %x21 / %x23-27 / %x2A-2F / %x3C-5B / %x5D-7E\r\n   escaped-number = (%x30-31 2DIGIT) / (%x32 (%x30-34 DIGIT) / (%x35 %x30-35))\r\n   escaped-char  = \"\\\" (unescaped / WSP / escaped-number)\r\n```",
      "createdAt": "2020-06-23T07:08:33Z",
      "updatedAt": "2020-07-13T20:11:12Z",
      "closedAt": "2020-07-13T20:11:12Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "should \"%2A-3A\" be \" %x2A-3A\" ?\r\nsame for \" %2A-2F \" ?",
          "createdAt": "2020-06-23T12:40:41Z",
          "updatedAt": "2020-06-23T12:40:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Edited to add the 'x'.  As I copied this, I hope that this wasn't something I copied in.",
          "createdAt": "2020-06-24T00:20:28Z",
          "updatedAt": "2020-06-24T00:20:28Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I put a copy of the (updated) extracted ABNF in https://gist.github.com/moonshiner/3aa994227226c9e5b33dc808a8937574\r\n\r\nThis does run through 'bap' w/out errors. \r\n",
          "createdAt": "2020-06-24T15:35:53Z",
          "updatedAt": "2020-06-24T15:35:53Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/MikeBishop/dns-alt-svc/pull/160 updates the ABNF slightly.\r\n\r\nAlso, we have \"key\" and \"display-key\" but currently only use \"display-key\"",
          "createdAt": "2020-07-07T01:26:10Z",
          "updatedAt": "2020-07-07T01:26:10Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "For this issue, the relevant PR is #202.  PR #160 also makes some colliding changes, but it's not directly relevant to this issue.  If one of those PRs is approved, I'll merge it and resolve the collisions in the other PRs.",
          "createdAt": "2020-07-07T20:41:58Z",
          "updatedAt": "2020-07-07T20:41:58Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "MDU6SXNzdWU2NDM1OTM3OTg=",
      "title": "Use colons before examples",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/186",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Such as in:\r\n\r\n```\r\n   As an example, the owner of example.com could publish this record\r\n\r\n   _8443._foo.api.example.com. 7200 IN SVCB 0 svc4.example.net.\r\n```\r\n\r\nText forms don't have clear delineation of example and text and without a colon it is harder to read.",
      "createdAt": "2020-06-23T07:16:04Z",
      "updatedAt": "2020-06-28T17:10:34Z",
      "closedAt": "2020-06-28T17:10:34Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/MikeBishop/dns-alt-svc/pull/198\r\n\r\nShould catch all those missing colons.  A double check before merging would be apprecriated",
          "createdAt": "2020-06-23T12:53:59Z",
          "updatedAt": "2020-06-23T12:53:59Z"
        }
      ]
    },
    {
      "number": 187,
      "id": "MDU6SXNzdWU2NDM1OTQ2ODc=",
      "title": "Similar to CNAME",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/187",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "\"When SvcRecordType is AliasForm, the SVCB record is to be treated similar to a CNAME alias pointing to SvcDomainName.\"\r\n\r\nIs this normative?  Because it reads as being normative, then it uses squishy words.  I think that this sentence is for setting intent, and could be reworded.\r\n\r\n",
      "createdAt": "2020-06-23T07:17:41Z",
      "updatedAt": "2020-07-13T03:45:01Z",
      "closedAt": "2020-07-13T03:45:01Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "MDU6SXNzdWU2NDM1OTY1NTk=",
      "title": "Aliases to A/AAAA records",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/188",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "proposed to close"
      ],
      "body": "It's not clear why this is useful as opposed to having a ServiceForm SVCB at the target of an alias.  Some words on the subject would be greatly appreciated.",
      "createdAt": "2020-06-23T07:21:03Z",
      "updatedAt": "2020-07-13T20:17:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It also, as I understand things, means a client which sees a chain of HTTPS alias forms must, at each stage in the process, issue new parallel A/AAAA/HTTPS queries since we can't assume that the three will get stapled together.",
          "createdAt": "2020-06-23T20:36:41Z",
          "updatedAt": "2020-06-23T20:36:41Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Is the wording following #209 good enough for us to close this?",
          "createdAt": "2020-07-13T20:17:29Z",
          "updatedAt": "2020-07-13T20:17:29Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "MDU6SXNzdWU2NDM1OTg5Mjg=",
      "title": "Step 3 of client algorithm, SHOULD?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/189",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "> If one or more SVCB records of ServiceForm SvcRecordType are returned for HOST, clients should select the highest-priority option with acceptable parameters, \r\n\r\nIs this SHOULD select ?",
      "createdAt": "2020-06-23T07:25:02Z",
      "updatedAt": "2020-07-13T20:16:44Z",
      "closedAt": "2020-07-13T20:16:43Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, why not.  Added to #204.",
          "createdAt": "2020-07-11T21:36:18Z",
          "updatedAt": "2020-07-11T21:36:18Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #204 ",
          "createdAt": "2020-07-13T20:16:43Z",
          "updatedAt": "2020-07-13T20:16:43Z"
        }
      ]
    },
    {
      "number": 190,
      "id": "MDU6SXNzdWU2NDM2MDM0Nzc=",
      "title": "Privacy intent?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/190",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "What does this mean (from S3.2)?\r\n\r\n> Clients using a domain-oriented transport proxy like HTTP CONNECT ([RFC7231] Section 4.3.6) or SOCKS5 ([RFC1928]) SHOULD disable SVCB support if performing SVCB queries would violate the client's privacy intent.\r\n\r\nIt's not clear what information is leaking and to whom here.  This likely needs more text that addresses assumptions about where the client is sending these SVCB queries.\r\n\r\nOf course, letting the proxy perform name resolution can improve privacy with respect to the resolver that a client chooses.  However, there are ways in which SVCB can enhance privacy in these configurations, especially if the proxy is not trusted with information about destinations.  It requires that you use DoT or DoH to a resolver that the client trusts to learn domain names.",
      "createdAt": "2020-06-23T07:32:32Z",
      "updatedAt": "2020-07-12T03:19:47Z",
      "closedAt": "2020-07-12T03:19:47Z",
      "comments": []
    },
    {
      "number": 191,
      "id": "MDU6SXNzdWU2NDM2MDU4MTk=",
      "title": "Mandating DoS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/191",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "The text in Section 3.1 correctly identifies a number of ways in which a client might be denied access to a SVCB record.  I don't know if this is exhaustive, but it seems like a reasonable start.  It then mandates (using \"MUST NOT\") very specific behaviour.  That mandated behaviour ends up making the service effectively unreachable.\r\n\r\nIt is not appropriate for this document to set policy for clients in this way.  It is clear that this is biased toward ensuring that secured alternative methods for reaching a service are known to a client, but I don't think that this is the only way to achieve that goal.  All this does is make the system more likely to be brittle and prone to denial of service.",
      "createdAt": "2020-06-23T07:36:25Z",
      "updatedAt": "2020-07-10T16:14:59Z",
      "closedAt": "2020-07-10T16:14:59Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a \"MUST NOT\" because otherwise ECH is vulnerable to a downgrade attack: if a MITM between Firefox and the DoH server drops just the packets containing SVCB responses (likely identifiable by size or timing), they will eventually time out.  If the client falls back to ordinary connection, they'll lose the ECH protection.  (QUIC makes this attack especially easy.)\r\n\r\nIf ECH doesn't need to be downgrade-resistant in this way, then we can relax the requirement, but the ECH experts I've talked to seem to think that this threat type is in-scope.",
          "createdAt": "2020-06-23T17:05:56Z",
          "updatedAt": "2020-06-23T17:05:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why make the requirement generic though?  There is already text in Section 8.1 that addresses the problem of ECH downgrade (though it is not complete, see #196).",
          "createdAt": "2020-06-24T00:27:35Z",
          "updatedAt": "2020-06-24T00:27:35Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I remembered another reason: the downgrade protection also applies to the HTTPS upgrade functionality, so fallback-on-error would allow the MITM to disable HTTPS upgrade.\r\n\r\nAn alternative to the current spec would be: \"on error, the HTTPS upgrade still applies as if the record were present, and if the client supports ECH, it must abandon the connection entirely\".  That seems like more spec complexity for very limited gain (assuming most clients do implement ECH), but I think it would be safe.",
          "createdAt": "2020-06-24T02:34:18Z",
          "updatedAt": "2020-06-24T02:34:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We should not place any weight on this mechanism when it comes to downgrades.\r\n\r\nI'm not suggesting that ECH advice needs to change (except as described in #196, perhaps), but instead suggesting that the generic advice not be so strong.",
          "createdAt": "2020-06-24T03:25:24Z",
          "updatedAt": "2020-06-24T03:25:24Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal from discussion: change to SHOULD and then have text in security considerations saying why you REALLY OUGHT TO",
          "createdAt": "2020-07-09T20:45:11Z",
          "updatedAt": "2020-07-09T20:45:11Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "MDU6SXNzdWU2NDM2NDI2OTM=",
      "title": "Presentation of ALPN",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/192",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "The presentation format for ALPN is not consistent with the generic presentation format.  It also includes unprintable characters.",
      "createdAt": "2020-06-23T08:35:08Z",
      "updatedAt": "2020-07-13T20:12:51Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "Apart from having to recognise \"\\\\,\" vs \",\" and having to remember which commas where escaped and which where not, APLN are still a optionally quoted string.  e.g. ALPN=\"x\\\\,y,z\" or ALPN=x\\\\,y,z",
          "createdAt": "2020-06-24T07:41:47Z",
          "updatedAt": "2020-06-24T07:42:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is unnecessarily different.  And it's not clear that the same escaping rules apply.  In the presentation format I might include \\000 to include a literal NUL, but it appears to require the inclusion of a literal NUL preceded by a backslash in the ALPN format.\r\n\r\nIf the section said \"just like the presentation format, but you have to escape comma\" then it might be understandable, but the differences are inexplicable.",
          "createdAt": "2020-06-24T07:57:23Z",
          "updatedAt": "2020-06-24T07:57:23Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Larry Campbell (@lcampbel) also found this unclear in a thread on dnsop, so it does seem like we should clarify. ",
          "createdAt": "2020-06-24T14:24:59Z",
          "updatedAt": "2020-06-24T14:25:26Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How about a couple of examples? ",
          "createdAt": "2020-06-24T15:50:10Z",
          "updatedAt": "2020-06-24T15:50:10Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #202.  Good enough now?",
          "createdAt": "2020-07-13T20:12:43Z",
          "updatedAt": "2020-07-13T20:12:43Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "MDU6SXNzdWU2NDM2NDUzMjQ=",
      "title": "Remove no-default-alpn",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/193",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "This is of no lasting value and it only represents a marginal gain in space for a non-trivial gain in complexity.  Having an ALPN field in every HTTPS record just isn't that many bytes (2+2+3=7 for just \"h2\", 2+2+3+9=16 for \"h2,http/1.1\").\r\n\r\nI've raised this a couple of times in the past, but I never received a satisfactory response.",
      "createdAt": "2020-06-23T08:39:10Z",
      "updatedAt": "2020-07-14T03:01:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "The goal here was not efficiency of encoding, it was to avoid a certain category of administrative mistakes.  Specifically, without this in place, it would be easy for a zone owner to add a single record with \"alpn=h3 echconfig=...\", test locally, see everything is working, and not realize that they just disabled their website for ~10% of users (who don't have UDP routability).\r\n\r\nThis represents something of a compromise between participants who wanted to be able to run QUIC and TCP on separate endpoints (or even QUIC-only services in unusual situations), and participants who wanted HTTPS-over-TCP to be required for every endpoint.",
          "createdAt": "2020-06-23T12:02:50Z",
          "updatedAt": "2020-06-23T12:02:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't find that sort of defensive design useful relative to the complexity it adds.  And it makes the configuration less transparent.",
          "createdAt": "2020-06-24T00:19:24Z",
          "updatedAt": "2020-06-24T00:19:24Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "The `no-default-alpn` business is the result of a Very Long Debate that I would prefer not to reopen, but it's not something anyone is particularly happy with.  Currently, getting rid of it would result in records being unusable in the default state.  To fix this, we would have to give `alpn` a default value of `http/1.1` (for the HTTPS RR) if the key is absent.\r\n\r\nIn the design you're proposing, `alpn=h2` means that you dropped support for HTTP/1.1-only clients.  (I believe even Chrome is sometimes HTTP/1.1-only, e.g. for WebSockets).  That strikes me as more likely to result in swearing sysadmins than the current design, and same for the `alpn=h3` case.\r\n\r\nTo put it another way, I think there are likely to be many orders of magnitude more zone owners configuring these RRs than software developers implementing them, so we should prioritize the ease of (working) configuration over the ease of implementation.",
          "createdAt": "2020-06-24T03:02:41Z",
          "updatedAt": "2020-06-24T03:02:41Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would it be helpful to adjust the name of this parameter to make the effect more clear? For example, rather than `no-default-alpn`, you could call it `strict-alpn`, `restricted-alpn`, or something similar.\n\nMaking claims about what the default ALPN is might be causing some of the annoyance here. Instead, if we think of the list of ALPN values in the record as purely additive from the client\u2019s perspective (always just a hint to add capability and never restrict), this key becomes a way to disable \u2018additive\u2019 mode and tell clients that the list is actually a hint of the only ALPNs that are supported. ",
          "createdAt": "2020-07-06T04:00:43Z",
          "updatedAt": "2020-07-06T04:00:43Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Calling it strict-alpn or restricted-alpn would not be compatible with the changes in #201 .  Are there other names that might be less confusing?",
          "createdAt": "2020-07-09T20:53:24Z",
          "updatedAt": "2020-07-11T16:24:16Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In what way would those proposals not be compatible?",
          "createdAt": "2020-07-10T01:53:45Z",
          "updatedAt": "2020-07-10T01:53:45Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that should be #201.\r\n\r\n\"Strict\" or \"restricted\" would seem to indicate that the client must not send anything other than listed ALPNs, or that the server won't accept anything else.  Neither of those readings match the intent of the ALPN selection process, in the current draft or in #201.",
          "createdAt": "2020-07-10T02:15:56Z",
          "updatedAt": "2020-07-10T02:15:56Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#201 makes more sense =)\r\n\r\nYes, I agree that it's not \"strict\". It's mainly a hint that the old ALPNs won't work.\r\n\r\nWhat is the client behavior intention here? As a client, I'm honestly just ignoring it right now. I guess it's a way to say, if you think you can get rid of h1/h2, then delay trying those?",
          "createdAt": "2020-07-10T02:21:16Z",
          "updatedAt": "2020-07-10T02:21:16Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Example use-case would be having an RR set with two HTTPS records: one supports h1 and h2 and h3 and the other supports only h3.  The one with only h3 would have higher priority.  This would be to allow different service addresses (or different server pools) that are h3-only.  That may come in-hands as h3 opens up some interesting deployment possibilities. \r\nThe concern is that having alpn=h3 mean h3-only is that if that's the only record included that it could be a foot-gun.  Thus \"alpn=h3 no-default-alpn\" still alows for h3-only but for a safer default on alpn=h3.",
          "createdAt": "2020-07-10T02:29:48Z",
          "updatedAt": "2020-07-10T02:31:30Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on discussions, are there concerns about closing out this issue?\r\n(While not perfect, this still seems like a reasonable compromise.)",
          "createdAt": "2020-07-13T20:15:51Z",
          "updatedAt": "2020-07-13T20:15:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\"No\" is hardly a compromise, but I can live with the outcome.",
          "createdAt": "2020-07-14T03:01:36Z",
          "updatedAt": "2020-07-14T03:01:36Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "MDU6SXNzdWU2NDM2NDg2ODk=",
      "title": "Advice regarding construction of ALPN extension in TLS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/194",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [
        "proposed to close"
      ],
      "body": ">    Clients MUST include an \"application_layer_protocol_negotiation\" extension in their ClientHello with a ProtocolNameList that includes at least one ID from the ALPN set.  Clients SHOULD also include any other values that they support and could negotiate on that connection with equivalent or better security properties.  For example, if the ALPN set only contains \"http/1.1\", the client could include \"http/1.1\" and \"h2\" in the ProtocolNameList.\r\n\r\nThis could be read to imply that a client conditions its choice of ALPN parameter in a TLS ClientHello based on what it learns from SVCB.  This is dangerous as it exposes the connection to potential downgrade attacks.  Though it tries to recommend that \"better\" options be chosen, this is a determination that the server makes in ALPN, not the client.  This document should instead mandate that clients construct an ALPN extension containing all protocols that they are willing to use.",
      "createdAt": "2020-06-23T08:44:13Z",
      "updatedAt": "2020-07-13T20:14:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "I think that depends on how you define \"downgrade.\"  The existing text says that the client includes:\r\n- At least one ALPN token from the SVCB record(s)\r\n- Any protocol the client supports which it considers \"better\" than the least-preferable selected token, even if not in the SVCB record\r\n\r\nBut the point that it leads to selection involving the client's definition of \"better\" versus the server's is certainly a fair point.",
          "createdAt": "2020-06-24T20:51:10Z",
          "updatedAt": "2020-06-24T20:51:10Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Wait, I remember this \"better\" formulation already came up and was rejected, for precisely this reason. The network does not get to influence the selected ALPN protocol. This notion of \"better\" breaks any formal notion of downgrade protection. It also has practical consequences beyond downgrades: even if client and server agree that h2 is better than http/1.1, the current draft text makes h2 SVCB into a deployment hazard if, say, the server needed to rollback h2.\r\n\r\nI agree with Martin that this text needs to change. Both http/1.1 and h2 SVCB records must result in the *exact* same ALPN advertisement, namely all the client's accepted protocols. The only acceptable filtering is that inherent to collections of compatible ALPNs. Beyond that, SVCB stays out of the TLS ALPN negotation.",
          "createdAt": "2020-06-25T05:19:10Z",
          "updatedAt": "2020-06-25T05:26:14Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Merged in #201.  Good enough to close?",
          "createdAt": "2020-07-13T20:14:25Z",
          "updatedAt": "2020-07-13T20:14:25Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "MDU6SXNzdWU2NDM2NTIzMzg=",
      "title": "Dual use of references symbolic names as words",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/195",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "As an editorial convention, this is hard to follow because the words used to identify a reference also form part of the sentence.\r\n\r\ne.g., \"CNAME or [DNAME]\", \"By removing the [Attrleaf] labels used in SVCB\".",
      "createdAt": "2020-06-23T08:49:15Z",
      "updatedAt": "2020-07-13T04:05:59Z",
      "closedAt": "2020-07-13T04:05:59Z",
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "does \"By removing the underscore-prefixed label used in SVCB\"  sound better? ",
          "createdAt": "2020-06-24T15:56:09Z",
          "updatedAt": "2020-06-24T15:56:09Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "MDU6SXNzdWU2NDM2NjE0OTI=",
      "title": "Unclear precedence rules",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/196",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "proposed to close"
      ],
      "body": "At one level, the precedence rules for this specification could be simple: take the RRs with the lowest priority and select at random between them.  This is clearly the case for the 0/other split.\r\n\r\nBut it isn't that simple, because RRs with lower priority might not have options that the client supports.  So some configurations are eliminated.\r\n\r\nMoreover, there are cases where server/operator preference and client preference might be in tension.  Let's say that the client greatly prefers HTTP/3 over HTTP/1.1.  Is it required to use an HTTPS RR with HTTP/1.1 and a lower priority if a higher priority supports HTTP/3?\r\n\r\nMore difficult, what if the higher priority has echconfig and the lower priority one does not?  Section 8.1 might be read to imply that echconfig overrides other considerations, but it isn't very clear on that point.  Also, we have to consider an echconfig that the client does not support specially, as that does not imply that the RR lacks echconfig.",
      "createdAt": "2020-06-23T09:01:22Z",
      "updatedAt": "2020-07-13T20:22:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Change #204 includes some changes that might make this clearer.  However, I think precedence rules are pretty clear: clients shuffle, sort, and walk down the list.  If they run out, they fall back to normal connection.  (Special case: if all attempts had ECH, and all failed, don't fall back to non-ECH.)\r\n\r\nThe order of attempts is SHOULD and MAY, so sufficiently smart/opinionated clients can mess with it if they want.\r\n\r\n",
          "createdAt": "2020-07-11T19:45:18Z",
          "updatedAt": "2020-07-11T19:45:18Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this good enough now that #204 has been merged?",
          "createdAt": "2020-07-13T20:13:52Z",
          "updatedAt": "2020-07-13T20:13:52Z"
        }
      ]
    },
    {
      "number": 203,
      "id": "MDU6SXNzdWU2NDY1NzQyMzc=",
      "title": "Period is owner name for additional section processing is different to every other type.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/203",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "For every other type the next name to be looked up is embedded in the rdata itself.  Additional \".\" often means \"no such service\".   For BIND adding \".\" is owner name meant touching 102 files as every other RR types method for processing additional data needed to changed as well as every place where additional data is added to the response.\r\n\r\nI'm wondering if making \".\" special like this is worth it? \r\n\r\nI'm also wondering if we should be giving up the ability to signal \"no such service\" as is done in SRV, MX is worth it?",
      "createdAt": "2020-06-27T00:40:30Z",
      "updatedAt": "2020-07-12T03:38:27Z",
      "closedAt": "2020-07-12T03:38:27Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> For BIND adding \".\" is owner name meant touching 102 files as every other RR types method for processing additional data needed to changed\r\n\r\nThat's definitely surprising!  We didn't think this would be complicated to implement.\r\n\r\n> I'm wondering if making \".\" special like this is worth it?\r\n\r\nThe most important thing to me is that we have a way to encourage SvcDomainName == owner name when editing the zone file, because this reduces latency under certain conditions.  Perhaps we could use `*` or `-` instead of `.` in the zone file.\r\n\r\nRepeating the owner name, without the benefit of name compression, is a bit annoying.  Can you think of a way to avoid the duplication that would be easier for BIND?  It's too bad we don't have a name-compression mode that works within an RR.\r\n\r\n> I'm also wondering if we should be giving up the ability to signal \"no such service\" as is done in SRV, MX is worth it?\r\n\r\nI haven't heard anyone ask for this, so I don't consider it a priority.  If there's an easy way to signal it I'd be OK with including it, but we'd have to think carefully about what it means.  (If there's no HTTPS service, does that mean there's no HTTP service either? What if there are multiple RRs, and only one has this flag?)",
          "createdAt": "2020-06-27T01:45:22Z",
          "updatedAt": "2020-06-27T01:45:45Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Keeping the wire format small and simple for having the name match is important, so I think that part should stay as is. I don\u2019t have much preference for the presentation format here. \u201c.\u201d makes sense by matching the normal interpretation of a zero-length label. However, some other presentation format symbol does as well here. \n\nFor BIND, it\u2019d be nice to hear more clarity for why this was complex. Can the parsing not easily be specialized per type?\n\nAs for communicating that there is no such service, I\u2019d be concerned to see that for things like HTTPS. These are hints that should help upgrade connections to more secure mechanisms (ECH, HTTP/3, etc), but being able to say \u201cdon\u2019t do https\u201d or similar sounds problematic. Unless there\u2019s a use case, I\u2019d argue to leave such functionality off for now. ",
          "createdAt": "2020-06-28T03:04:29Z",
          "updatedAt": "2020-06-28T03:04:29Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Would using something else with the same meaning help?  For example, \"=\" or \"~\" or \"^\" or something might avoid confusion with other uses of \".\"  (which would then just be a single label containing that character in the wire format).",
          "createdAt": "2020-06-28T04:03:52Z",
          "updatedAt": "2020-06-28T04:03:52Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "> > For BIND adding \".\" is owner name meant touching 102 files as every other RR types method for processing additional data needed to changed\r\n> \r\n> That's definitely surprising! We didn't think this would be complicated to implement.\r\n\r\nYou changed the additional section processing paradigm.  Most of those 102 files was saying \"the owner name is not used in this method\".  Part of it was actually passing the name from higher up in the calling stack.  When a nameserver looks up the addresses associates with a NS record it doesn't care about the owner name of the NS record.  It just looks at the RDATA of the record.  The same applies for every other record except these two proposed ones.\r\n\r\nhttps://gitlab.isc.org/isc-projects/bind9/-/merge_requests/2135/diffs?commit_id=232cb0d53bd3ba4f9b3fb0d80d903916b917627c\r\n\r\n> > I'm wondering if making \".\" special like this is worth it?\r\n> \r\n> The most important thing to me is that we have a way to encourage SvcDomainName == owner name when editing the zone file, because this reduces latency under certain conditions. Perhaps we could use `*` or `-` instead of `.` in the zone file.\r\n\r\nYou are assuming that it will take a lot of time for recursive servers to learn about these records.   That is not reality.\r\nSome nameservers do speculative lookups of records missed (no RRset, no cached no data, no cached nxdomain) when doing additional section processing.  BIND does one lookup but it could be made to do more.\r\n\r\n> Repeating the owner name, without the benefit of name compression, is a bit annoying. Can you think of a way to avoid the duplication that would be easier for BIND? It's too bad we don't have a name-compression mode that works within an RR.\r\n\r\nWell if you really want it you would need to signal that the client supports intra RR compress for these types.  That is easy enough to do with a EDNS option (option code + list of types the client supports intra RR compression for).  You would need to get a label type assigned for intra RR compression pointers.   IANA already maintains a registry.  The server would need to do case sensitive compression to preserve DNSSEC signatures for when the record was returned to canonical form for DNSSEC processing.\r\n\r\nhttps://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-10\r\n\r\n> > I'm also wondering if we should be giving up the ability to signal \"no such service\" as is done in SRV, MX is worth it?\r\n> \r\n>  I haven't heard anyone ask for this, so I don't consider it a priority. If there's an easy way to signal it I'd be OK with including it, but we'd have to think carefully about what it means. (If there's no HTTPS service, does that mean there's no HTTP service either? What if there are multiple RRs, and only one has this flag?)\r\n\r\n",
          "createdAt": "2020-06-29T00:03:38Z",
          "updatedAt": "2020-06-29T00:03:38Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> Most of those 102 files was saying \"the owner name is not used in this method\".\r\n\r\nThanks for clarifying.  I presume you're referring to [this change](https://gitlab.isc.org/isc-projects/bind9/-/commit/232cb0d53bd3ba4f9b3fb0d80d903916b917627c) in your experimental branch.\r\n\r\nI'm not familiar with the BIND code, but this seems like a reasonable implementation to me, and suggests that the current spec is not too bad.\r\n\r\n> You are assuming that it will take a lot of time for recursive servers to learn about these records.\r\n\r\nMostly I'm just counting roundtrips.  SVCB queries are always issued in parallel to A/AAAA queries, so if SvcDomainName == owner-name, then there are already queries in flight for the necessary addresses (0 extra roundtrips).  Anything that requires a followup query, whether by the recursive or by the client, adds some amount of latency.\r\n\r\n> Well if you really want it you would need to signal that the client supports intra RR compress for these types. That is easy enough to do with a EDNS option ...\r\n\r\nIf something like this already existed I think we would use it here, but inventing and standardizing it seems like a big project, not justified by the size of the problem.\r\n\r\nI was thinking of something to avoid special-casing \".\" in this way, e.g. \"The SvcDomainName is represented with a one-octet length prefix, followed by a buffer of that length.  The buffer contains a domain name that fills the buffer.  If the name is fully-qualified (ending in an empty label) then it is an absolute name; otherwise it is relative to the owner name.\".  However, I expect this would make your implementation more complex, not less, so I'm not suggesting this change.",
          "createdAt": "2020-06-29T01:08:10Z",
          "updatedAt": "2020-06-29T01:08:10Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "> > Most of those 102 files was saying \"the owner name is not used in this method\".\r\n> \r\n> Thanks for clarifying. I presume you're referring to [this change](https://gitlab.isc.org/isc-projects/bind9/-/commit/232cb0d53bd3ba4f9b3fb0d80d903916b917627c) in your experimental branch.\r\n> \r\n> I'm not familiar with the BIND code, but this seems like a reasonable implementation to me, and suggests that the current spec is not too bad.\r\n> \r\n> > You are assuming that it will take a lot of time for recursive servers to learn about these records.\r\n> \r\n> Mostly I'm just counting roundtrips. SVCB queries are always issued in parallel to A/AAAA queries, so if SvcDomainName == owner-name, then there are already queries in flight for the necessary addresses (0 extra roundtrips). Anything that requires a followup query, whether by the recursive or by the client, adds some amount of latency.\r\n\r\nWhich has to be weighed up against how often it would actually save a query once support for these records is reasonably well deployed.   The only time when the name must differ is when a wildcard record is in use and the looked up name doesn't match target name.   The authoritative servers will be returning the target data as additional records.  Recursive server will accept such records as they will be in bailiwick.  Those records will then be returned to the client.\r\n\r\nIt will also provide no benefit for anything that is using a underscore prefix label.   Which reminds me that I need to add code to detect and prevent such wasted queries.   That's additional code that will need to be added to every client.  \".\" should only be mapped to the owner name for LDH owner names. \r\n> > Well if you really want it you would need to signal that the client supports intra RR compress for these types. That is easy enough to do with a EDNS option ...\r\n> \r\n> If something like this already existed I think we would use it here, but inventing and standardizing it seems like a big project, not justified by the size of the problem.\r\n> \r\n> I was thinking of something to avoid special-casing \".\" in this way, e.g. \"The SvcDomainName is represented with a one-octet length prefix, followed by a buffer of that length. The buffer contains a domain name that fills the buffer. If the name is fully-qualified (ending in an empty label) then it is an absolute name; otherwise it is relative to the owner name.\". However, I expect this would make your implementation more complex, not less, so I'm not suggesting this change.\r\n\r\n",
          "createdAt": "2020-06-29T02:07:50Z",
          "updatedAt": "2020-06-29T02:07:50Z"
        }
      ]
    },
    {
      "number": 206,
      "id": "MDU6SXNzdWU2NTE5NDI2MjI=",
      "title": "The target of a HTTPS/SVCB record SHOULD NOT be below a DNAME",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/206",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "While DNAMEs if present should be followed, the target of a HTTPS/SVCB records should not be below a DNAME.  All a DNAME does is introduce additional processing and records in the responses for no benefit.",
      "createdAt": "2020-07-07T02:29:04Z",
      "updatedAt": "2020-07-13T03:45:35Z",
      "closedAt": "2020-07-13T03:45:35Z",
      "comments": []
    },
    {
      "number": 211,
      "id": "MDU6SXNzdWU2NTQ5MDE5Njc=",
      "title": "Consistency for service/endpoint/origin naming",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/211",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In #204 there is a cleanup of \"origin\" for the non-HTTPS uses but it also highlights the need for consistent terminology and a terminology section (and terminology scrub).\r\nIt seems to land on:\r\n\r\n* Service = the thing a Service owner wished to delegate.  (\"Origin\" is an HTTPS-specific instance.)\r\n* (something? Endpoint Operator?  Service Operator Endpoint?) = the entity that operates a set of endpoints.\r\n* Endpoint = the thing that gets bound to by an individual SVCB RR   (ie, a set of IPs which share a set of common configuration)\r\n\r\nFrom this, AliasForm delegates a Service to an Endpoint Operator.\r\nIf we are consistent about this, ServiceForm would be better called EndpointForm.\r\n",
      "createdAt": "2020-07-10T16:38:29Z",
      "updatedAt": "2020-07-10T16:44:28Z",
      "closedAt": "2020-07-10T16:44:27Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I should have finished reading #204 deeply as some of this is already covered there.",
          "createdAt": "2020-07-10T16:44:27Z",
          "updatedAt": "2020-07-10T16:44:27Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "MDU6SXNzdWU2NTUwODAzMzY=",
      "title": "Limit key name length",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/213",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "Presentation format key names are not currently explicitly limited (although the IANA experts would surely reject an absurdly long name).  @marka63 has requested a name length limit.\r\n\r\nPlausible values include 255, 64, and 63.",
      "createdAt": "2020-07-10T23:12:14Z",
      "updatedAt": "2020-07-13T20:12:11Z",
      "closedAt": "2020-07-13T20:12:11Z",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Why not 63 (consistent with DNS label length limit)?  Can we put the limit in the IANA section?",
          "createdAt": "2020-07-11T15:57:45Z",
          "updatedAt": "2020-07-11T15:57:45Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I would want to update the ABNF so parsers can rely on the length limit.\n\nOn Sat, Jul 11, 2020, 11:57 AM Erik Nygren <notifications@github.com> wrote:\n\n> Why not 63 (consistent with DNS label length limit)? Can we put the limit\n> in the IANA section?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/MikeBishop/dns-alt-svc/issues/213#issuecomment-657085607>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABO3SOGGXALWUNGKI53PLTR3CDYJANCNFSM4OXAA4WA>\n> .\n>\n",
          "createdAt": "2020-07-11T16:26:56Z",
          "updatedAt": "2020-07-11T16:26:56Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a limit of 63 to #202.",
          "createdAt": "2020-07-11T18:07:40Z",
          "updatedAt": "2020-07-11T18:07:40Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #202 ",
          "createdAt": "2020-07-13T20:12:11Z",
          "updatedAt": "2020-07-13T20:12:11Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "MDU6SXNzdWU2NTY2NDM3Njc=",
      "title": "Relax \"MUST NOT\" on  target equalling owner name",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/221",
      "state": "OPEN",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @marka63:\r\n\r\nSection 2.4.1.  AliasMode paragraph 2.  Why have \"MUST NOT\" here?                         \r\n\r\n   The primary purpose of AliasMode is to allow aliasing at the zone\r\n   apex, where CNAME is not allowed.  In AliasMode, TargetName MUST be\r\n   the name of a domain that has SVCB, AAAA, or A records.  It MUST NOT\r\n   be equal to the owner name, as this would cause a loop.\r\n\r\nNameservers and clients need to detect loops regardless of the number of\r\nrecords that form the loop.  All this does is force vendors to write additional\r\ncode to detect this one sub-case of a loop.  These are also the only RR types\r\nthat need to have their owner names available to parse them.\r\n",
      "createdAt": "2020-07-14T14:11:09Z",
      "updatedAt": "2020-07-17T03:06:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "What about using SHOULD NOT instead?",
          "createdAt": "2020-07-14T14:11:31Z",
          "updatedAt": "2020-07-14T14:11:31Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "How's the change in #224?",
          "createdAt": "2020-07-17T03:06:48Z",
          "updatedAt": "2020-07-17T03:06:48Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "MDU6SXNzdWU2NTg3MjE2NzU=",
      "title": "mandatory also needs MUST NOT for escape processing.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/222",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "key names in the list are all LDH so there is never a need to perform escape processing.",
      "createdAt": "2020-07-17T01:12:36Z",
      "updatedAt": "2020-07-23T01:36:58Z",
      "closedAt": "2020-07-23T01:36:58Z",
      "comments": []
    },
    {
      "number": 225,
      "id": "MDU6SXNzdWU2NTg3OTkyNTA=",
      "title": "Do we allow \"mandatory\" to appear in the \"mandatory list\"?",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/225",
      "state": "CLOSED",
      "author": "marka63",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "My feeling is no as it simplifies processing of the record as you don't have to check for it just to skip it.   Also it is implicitly there just by the presence of the field.",
      "createdAt": "2020-07-17T03:18:06Z",
      "updatedAt": "2020-07-17T04:49:16Z",
      "closedAt": "2020-07-17T04:49:16Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed.  I believe this is already covered in the text:\r\n> This SvcParamKey is always automatically mandatory, and MUST NOT appear in its own value list.",
          "createdAt": "2020-07-17T03:27:49Z",
          "updatedAt": "2020-07-17T03:27:49Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "It's there with the \"also\" in \"MUST also appear\" but that is very subtle.  I suggest adding \"(This implies \"mandatory\" MUST NOT be a element of the list)\" or similar.",
          "createdAt": "2020-07-17T04:41:28Z",
          "updatedAt": "2020-07-17T04:41:28Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "MDU6SXNzdWU2NjQ4MTI4OTk=",
      "title": "Add the expanded form of \"SVCB\" when it's first used",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/229",
      "state": "OPEN",
      "author": "cbartle891",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Typically, when introducing an acronym, it's useful to include its expanded form with it. That doesn't seem to happen in this document for \"SVCB,\" nor does SVCB appear to be a common DNS term like RR. In fact, SVCB doesn't appear to be an acronym at all, but rather a shortened version of \"Service binding.\" Is this true? If so, indicating that would be helpful.",
      "createdAt": "2020-07-23T22:54:38Z",
      "updatedAt": "2020-07-24T19:53:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Isn't this covered in Section 1.4?\r\n\r\n```\r\nSVCB is a contraction of \"service binding\".  The SVCB RR, HTTPS RR,\r\n   and future RR types that share SVCB's format and registry are\r\n   collectively known as SVCB-compatible RR types.\r\n```",
          "createdAt": "2020-07-24T00:34:57Z",
          "updatedAt": "2020-07-24T00:34:57Z"
        },
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "Ah, that's good, but that's why I specified \"when introducing an acronym.\" It's very delayed to explain an acronym (or abbreviation) 6 pages after it's first used. I've changed the title of this issue accordingly.",
          "createdAt": "2020-07-24T03:48:18Z",
          "updatedAt": "2020-07-24T03:48:18Z"
        }
      ]
    },
    {
      "number": 232,
      "id": "MDU6SXNzdWU2NzE0MDAyNDQ=",
      "title": "Confirm IANA actions for  Service Parameters Registry",
      "url": "https://github.com/MikeBishop/dns-alt-svc/issues/232",
      "state": "OPEN",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In discussing draft-schwartz-svcb-dns Draft, @bemasc and I were debating the need for \"Standards Action\" vs \"Expert Review\"\r\n\r\nI suggest changing it to \"Expert Review / Specification Required\"",
      "createdAt": "2020-08-02T02:08:06Z",
      "updatedAt": "2020-08-04T15:13:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@moonshiner I'm not sure I understand your proposal.  Currently we have 256 Standards Action, 32512 Expert Review, 32512 FCFS, and 255 Private Use.  What are you suggesting?",
          "createdAt": "2020-08-04T15:13:52Z",
          "updatedAt": "2020-08-04T15:13:52Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk3MjM3MzU3",
      "title": "Recommend shuffling the RRSET",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/1",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Suggested by Shumon Huque: https://www.ietf.org/mail-archive/web/dnsop/current/msg23143.html",
      "createdAt": "2018-06-25T21:12:33Z",
      "updatedAt": "2018-06-28T22:14:44Z",
      "closedAt": "2018-06-28T22:14:41Z",
      "mergedAt": "2018-06-28T22:14:41Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK.  Could we say that the semantics are the same as getting multiple Alt-Svc response headers?\r\n\r\nRFC 2616 says \"Multiple message-header fields with the same field-name MAY be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)].  It MUST be possible to combine the multiple header fields into one \"field-name: field-value\" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma.\"\r\n\r\nAlt-Svc says \"When multiple values are present, the order of the values reflects the server's preference\".\r\n\r\nI think this is actually workable.  The server can produce multiple RRs, each of which can contain multiple options in preference order.  The DNS client will scramble them, and then HTTP will glue them together in that order.  Then the client will (probably) use the first one that's compatible.",
          "createdAt": "2018-06-28T02:09:24Z",
          "updatedAt": "2018-06-28T02:09:24Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I added reassurances around multiple alt-values and explicit recommendations for client behavior when receiving multiple records.  Please take a look.",
          "createdAt": "2018-06-28T21:23:46Z",
          "updatedAt": "2018-06-28T21:23:46Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Citation fixed.",
          "createdAt": "2018-06-28T22:14:37Z",
          "updatedAt": "2018-06-28T22:14:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMyNjQ4NDkx",
          "commit": {
            "abbreviatedOid": "d400d30"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "Seems fine as a start.  For clarity, it might be worth mentioning that this doesn't modify the interpretation of multiple alternatives within a single record, only the behavior when multiple records are returned.\r\n\r\nMore concerning, this raises the point that there's no defined behavior for what to do with these multiple records:  Fold them together, as multiple instances of the HTTP header would do?  (In which case order matters.)  Just take the first one?  Something else?",
          "createdAt": "2018-06-27T23:56:03Z",
          "updatedAt": "2018-06-28T00:07:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMzMDM2NDQx",
          "commit": {
            "abbreviatedOid": "4b3f49e"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Looks good, modulo a citation fix.",
          "createdAt": "2018-06-28T21:56:33Z",
          "updatedAt": "2018-06-28T21:56:51Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Cite the current HTTP RFC, not the obsolete one; this should be Section 3.2.2 of RFC7230.",
              "createdAt": "2018-06-28T21:56:33Z",
              "updatedAt": "2018-06-28T22:14:10Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "992f23c3ca9ed46fadfc3c0c6b847379dabab32a",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-random",
      "headRefOid": "1738dc339d0e517b4b02594c46e962b35fe24e54",
      "mergeCommit": {
        "oid": "828f702e45e2bea3b4b422cd2c6578c584e3c8ca"
      }
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTA4OTQz",
      "title": "Add Erik Nygren's HTTPSSVC version of the draft",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/2",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is Erik's original draft from my inbox, except for RFC-markdown syntax and linter fixes.",
      "createdAt": "2019-05-16T13:33:59Z",
      "updatedAt": "2019-07-03T14:50:50Z",
      "closedAt": "2019-07-03T14:50:50Z",
      "mergedAt": "2019-07-03T14:50:50Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the review @MikeBishop.  I added comments on a few points where I contributed text, but I'll defer to @enygren on the others.",
          "createdAt": "2019-06-14T20:40:11Z",
          "updatedAt": "2019-06-14T20:40:11Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "No disagreement with any of the remaining comments which are mostly editorial.",
          "createdAt": "2019-06-14T22:03:23Z",
          "updatedAt": "2019-06-14T22:03:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMDcwOTE1",
          "commit": {
            "abbreviatedOid": "6213882"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I like the direction.  Lots here, and apologies again for my tardiness in giving these a thorough review.  I'll be working through the other PRs later this afternoon.",
          "createdAt": "2019-06-14T18:56:27Z",
          "updatedAt": "2019-06-14T19:04:19Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "This example (and others throughout, but this is especially bad) doesn't render cleanly in the output.\r\n![image](https://user-images.githubusercontent.com/4273797/59531687-6eb5e400-8e9b-11e9-8566-d23383ba4de5.png)\r\n",
              "createdAt": "2019-06-14T18:56:28Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 125,
              "body": "Probably need a goal around degradation when servers are deployed this way and there\u2019s a legacy client.",
              "createdAt": "2019-06-14T18:57:00Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 185,
              "body": "Forward references to the sections in 6.x that define these would be useful.",
              "createdAt": "2019-06-14T18:57:28Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 265,
              "body": "(1) requires scheme to be \u201chttps,\u201d but (2) defines what to do if it\u2019s not.  I\u2019d condense them and say that if scheme is \u201chttps\u201d and the port is \u201c443\u201d (no need to specify omitted, since that\u2019s the default port for https), use the hostname; otherwise build _port._scheme.hostname",
              "createdAt": "2019-06-14T18:58:05Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 287,
              "body": "Would it make sense to ignore all 1s if there are any 0s, rather than ignoring everything?  That might make upgrade scenarios easier.",
              "createdAt": "2019-06-14T18:58:25Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 340,
              "body": "Extraneous \\\u2019s in example; needs to be marked as a figure",
              "createdAt": "2019-06-14T18:59:11Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 358,
              "body": "Mentions way to find RR for other schemes/ports; should probably cross-reference 2.2.",
              "createdAt": "2019-06-14T18:59:41Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 381,
              "body": "Why are clients only permitted to synthesize a lifetime instead of encouraged?",
              "createdAt": "2019-06-14T19:00:12Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 389,
              "body": "I\u2019m dubious that omitting persist actually helps.  Once the client has connected to the server, if the server possesses a valid certificate, then it simply supplies the persistent record as an HTTP header.  If the server doesn\u2019t possess a valid certificate, then the persistent entry will fail to connect anyway.",
              "createdAt": "2019-06-14T19:00:36Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 395,
              "body": "Given the requirement to only have one alias (2.4), perhaps it\u2019s worth specifying that this is only applicable to the alt-svc form?",
              "createdAt": "2019-06-14T19:00:58Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 410,
              "body": "Information coming over an HTTPS connection is authenticated by the certificate, while DNS is potentially unauthenticated.  Records from an authenticated connection are always higher priority than those from DNS.",
              "createdAt": "2019-06-14T19:01:18Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 456,
              "body": "I\u2019m leery of making this HSTS-equivalent, especially since it would be trivial to permit 2.2 to indicate that the http scheme can be served over HTTPS using existing Alt-Svc mechanisms.  Just point to RFC 8164 and keep going.",
              "createdAt": "2019-06-14T19:01:38Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 533,
              "body": "This references the draft which defines sni=, but you redefine it in 6.1.  Need to resolve.",
              "createdAt": "2019-06-14T19:02:19Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 618,
              "body": "This references the draft which defines sni=, but you redefine it in 6.1.  Need to resolve.",
              "createdAt": "2019-06-14T19:02:51Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            },
            {
              "originalPosition": 682,
              "body": "This is titled \"Appendix,\" but is a top-level section in the body.  I'd suggest making each of these subsections an actual and separate appendix.",
              "createdAt": "2019-06-14T19:03:33Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTA1Mzc1",
          "commit": {
            "abbreviatedOid": "6213882"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T20:23:36Z",
          "updatedAt": "2019-06-14T20:23:37Z",
          "comments": [
            {
              "originalPosition": 389,
              "body": "The concern here is about an active attacker on the local network who is also a pervasive passive adversary.  This attacker could inject a fraudulent DNS record that would then permit them to track that user even after they leave the network.  The adversary in this case is not the server operator.\r\n\r\nFor example, suppose there is a server operator who doesn't use Alt-Svc at all, and who serves the same domain on all IPs of a /64.  An adversary who can inject a long-TTL DNS record can pin a user to one of those IPs, and then reidentify that user across the internet whenever they visit that domain.  This can (and should) be solved by clearing the client's DNS cache when moving between networks.  Since DNS data in this case can be cached in the Alt-Svc cache, we need \"persist=0\" to get equivalent behavior.\r\n\r\nEDIT: Persist=1 would also enable a persistent DoS by a network that wants to block access to some site.",
              "createdAt": "2019-06-14T20:23:37Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTA2ODg0",
          "commit": {
            "abbreviatedOid": "6213882"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T20:27:12Z",
          "updatedAt": "2019-06-14T20:27:12Z",
          "comments": [
            {
              "originalPosition": 381,
              "body": "I agree, how about\r\n> clients SHOULD synthesize a new \"ma\" parameter from the DNS TTL if they intend to integrate with an Alt-Svc cache.",
              "createdAt": "2019-06-14T20:27:12Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTEwOTY0",
          "commit": {
            "abbreviatedOid": "6213882"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T20:37:48Z",
          "updatedAt": "2019-06-14T20:37:48Z",
          "comments": [
            {
              "originalPosition": 456,
              "body": "I think HSTS support here is important.  It's a rare chance to fix the \"bare domain\" bootstrap problem, and would win a lot of support for HTTPSSVC from parties who would otherwise not be very interested in this stuff.\r\n\r\nI don't view opportunistic security as sufficient, and I think it's considerably more complicated than \"HTTPSSVC requires HTTPS\".",
              "createdAt": "2019-06-14T20:37:48Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQ0NDcw",
          "commit": {
            "abbreviatedOid": "8ae87b7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T22:00:41Z",
          "updatedAt": "2019-06-14T22:00:41Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "Good idea...  At least keeps it deterministic.",
              "createdAt": "2019-06-14T22:00:41Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQ0OTE1",
          "commit": {
            "abbreviatedOid": "8ae87b7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T22:02:22Z",
          "updatedAt": "2019-06-14T22:02:22Z",
          "comments": [
            {
              "originalPosition": 456,
              "body": "I tend to agree wtih Ben here that we should at least try and propose this.",
              "createdAt": "2019-06-14T22:02:22Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQ0OTky",
          "commit": {
            "abbreviatedOid": "8ae87b7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T22:02:39Z",
          "updatedAt": "2019-06-14T22:02:40Z",
          "comments": [
            {
              "originalPosition": 410,
              "body": "Agreed.",
              "createdAt": "2019-06-14T22:02:39Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwNzU5NzQ5",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-17T21:36:26Z",
          "updatedAt": "2019-06-17T21:36:27Z",
          "comments": [
            {
              "originalPosition": 618,
              "body": "As I've mentioned before, I tend to think we should drop this, based on the chilly reception we've gotten thus far.  The browser folks I've talked to seemed particularly opposed to implementing any protocol that created mismatch between the SNI and the actual validation process, because of the potential for security bugs.",
              "createdAt": "2019-06-17T21:36:27Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTA1NzA3",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T13:43:43Z",
          "updatedAt": "2019-06-18T13:43:43Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Fixed in #12",
              "createdAt": "2019-06-18T13:43:43Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTA1ODQ5",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T13:43:55Z",
          "updatedAt": "2019-06-18T13:43:56Z",
          "comments": [
            {
              "originalPosition": 340,
              "body": "Fixed in #12",
              "createdAt": "2019-06-18T13:43:56Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTA2MTc4",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T13:44:24Z",
          "updatedAt": "2019-06-18T13:44:24Z",
          "comments": [
            {
              "originalPosition": 682,
              "body": "Fixed in #12",
              "createdAt": "2019-06-18T13:44:24Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTE2NjU4",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T13:59:51Z",
          "updatedAt": "2019-06-18T13:59:51Z",
          "comments": [
            {
              "originalPosition": 265,
              "body": "Addressed by #13.",
              "createdAt": "2019-06-18T13:59:51Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTE2OTE5",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:00:12Z",
          "updatedAt": "2019-06-18T14:00:13Z",
          "comments": [
            {
              "originalPosition": 358,
              "body": "Addressed by #13.",
              "createdAt": "2019-06-18T14:00:12Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTE3Mjkw",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:00:45Z",
          "updatedAt": "2019-06-18T14:00:45Z",
          "comments": [
            {
              "originalPosition": 340,
              "body": "Addressed in #12.",
              "createdAt": "2019-06-18T14:00:45Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTE3NTQw",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:01:05Z",
          "updatedAt": "2019-06-18T14:01:05Z",
          "comments": [
            {
              "originalPosition": 682,
              "body": "Addressed in #12",
              "createdAt": "2019-06-18T14:01:05Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTE5Nzkz",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:04:12Z",
          "updatedAt": "2019-06-18T14:04:13Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "Fixed in #12",
              "createdAt": "2019-06-18T14:04:13Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTI1NTY0",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:12:36Z",
          "updatedAt": "2019-06-18T14:12:36Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "What is the advantage of preferring version 0?  Intuitively, I would expect a preference for version 1, since it enables better performance and security.  For future-proofing, I could imagine a rule like \"prefer the highest type number you support, and ignore anything higher\".",
              "createdAt": "2019-06-18T14:12:36Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTM2MTAw",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:27:13Z",
          "updatedAt": "2019-06-18T14:27:14Z",
          "comments": [
            {
              "originalPosition": 410,
              "body": "Proposal in #14.",
              "createdAt": "2019-06-18T14:27:13Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTQyNTQy",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:36:00Z",
          "updatedAt": "2019-06-18T14:36:01Z",
          "comments": [
            {
              "originalPosition": 381,
              "body": "Addressed by #15.",
              "createdAt": "2019-06-18T14:36:01Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMTQyNjky",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T14:36:12Z",
          "updatedAt": "2019-06-18T14:36:12Z",
          "comments": [
            {
              "originalPosition": 389,
              "body": "Clarified in #15.",
              "createdAt": "2019-06-18T14:36:12Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzcwMzQw",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T21:23:55Z",
          "updatedAt": "2019-06-18T21:23:55Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "Two reasons, but I could be persuaded otherwise:  There's a requirement that there be only one \"0.\"  If the rule is \"consume the first zero, ignore anything else\" then you have an easy and deterministic rule.  Also, it makes it easy to roll out \"1\" by populating the new records prior to removing the old one.\r\n\r\nAnd of course, something is better than nothing -- I'm amenable to other deterministic ways of selecting, but I'm less attracted to \"pretend you didn't see it\" as a mandated reaction.",
              "createdAt": "2019-06-18T21:23:55Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzc0NjI0",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T21:33:41Z",
          "updatedAt": "2019-06-18T21:33:42Z",
          "comments": [
            {
              "originalPosition": 618,
              "body": "I'm amenable to leaving them separate -- my comment is purely around document consistency.  It would be consistent if all references to both were removed, too.  :-)",
              "createdAt": "2019-06-18T21:33:41Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzc1NjQ2",
          "commit": {
            "abbreviatedOid": "c92bbf7"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T21:36:07Z",
          "updatedAt": "2019-06-18T21:36:08Z",
          "comments": [
            {
              "originalPosition": 389,
              "body": "The DoS issue is solved by Alt-Svc failing back to a direct connection if alternatives fail.  But the tracking argument is valid -- the attacker could just relay the packets to the real server, meaning the TLS handshake will complete (albeit with TLS RTT exceeding TCP's RTT from the client's point of view).",
              "createdAt": "2019-06-18T21:36:07Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxODE1Nzg0",
          "commit": {
            "abbreviatedOid": "18fa632"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T16:18:03Z",
          "updatedAt": "2019-06-19T16:18:04Z",
          "comments": [
            {
              "originalPosition": 389,
              "body": "Good point, that makes this attack even easier.",
              "createdAt": "2019-06-19T16:18:03Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTAxNTcy",
          "commit": {
            "abbreviatedOid": "18fa632"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T18:43:36Z",
          "updatedAt": "2019-06-19T18:43:36Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "I think what Mike says makes sense (to use one of the \"0\"'s, ignore the others if multiple 0's or a mix of 0/1 are present).  These aren't different versions/types, they have different semantics.  (The \"0\" is a CNAME/ANAME equivalent and the \"1\" is the ALTSVC record.)  I guess we could swap the 0/1 value definitions and then say \"use the highest you understand\" or we could also just say to ignore ones you don't understand and then let any future draft that defines \"2\" if-any tell clients how to prefer or disprefer it.)",
              "createdAt": "2019-06-19T18:43:36Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTEzMTc3",
          "commit": {
            "abbreviatedOid": "18fa632"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T19:05:41Z",
          "updatedAt": "2019-06-19T19:05:41Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "OK, proposed text in #16",
              "createdAt": "2019-06-19T19:05:41Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTcwODg1",
          "commit": {
            "abbreviatedOid": "c0f8a36"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:04:37Z",
          "updatedAt": "2019-06-19T21:04:37Z",
          "comments": [
            {
              "originalPosition": 618,
              "body": "I'm fine with dropping this.  It could always be a separate document and reduces complexity here.",
              "createdAt": "2019-06-19T21:04:37Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTc3MzE4",
          "commit": {
            "abbreviatedOid": "c0f8a36"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:18:55Z",
          "updatedAt": "2019-06-19T21:18:56Z",
          "comments": [
            {
              "originalPosition": 618,
              "body": "Created PR #17 for this.",
              "createdAt": "2019-06-19T21:18:56Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTgwODA5",
          "commit": {
            "abbreviatedOid": "c0f8a36"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:26:48Z",
          "updatedAt": "2019-06-19T21:26:49Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "Added clarification in #9e5d5a2f60c5410598ca1e9b3c916b75ea452855\r\n",
              "createdAt": "2019-06-19T21:26:48Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTgzOTIx",
          "commit": {
            "abbreviatedOid": "9e5d5a2"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:34:04Z",
          "updatedAt": "2019-06-19T21:34:04Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "Added PR #18 to address this.  (Although later in the doc.)",
              "createdAt": "2019-06-19T21:34:04Z",
              "updatedAt": "2019-07-01T14:53:37Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "828f702e45e2bea3b4b422cd2c6578c584e3c8ca",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "nygren-httpssvc",
      "headRefOid": "c48304f1e70d5c9426a6695febfc27b1fae5c7b1",
      "mergeCommit": {
        "oid": "9a088ec47f656348b8d58366d86e4ccc38eadb5f"
      }
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTE1MDc4",
      "title": "Explain how this might solve the ANAME problem",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/3",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-05-16T13:48:28Z",
      "updatedAt": "2019-05-24T21:16:32Z",
      "closedAt": "2019-05-24T21:16:32Z",
      "mergedAt": "2019-05-24T21:16:32Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "3afab645fbdc5734d6e7af0046c6922a2976ebe9",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-aname-comparison",
      "headRefOid": "a9e61fa2a0c260c540c95ecef1ca28463c66dca6",
      "mergeCommit": {
        "oid": "c63091aba531059d5221a44dca585288cf0a5348"
      }
    },
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTE3NjI0",
      "title": "Slightly adjust references to ESNIKeys",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/4",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-05-16T13:54:07Z",
      "updatedAt": "2019-05-24T21:17:33Z",
      "closedAt": "2019-05-24T21:17:33Z",
      "mergedAt": "2019-05-24T21:17:33Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxOTQ4NDAx",
          "commit": {
            "abbreviatedOid": "2ae38b1"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-05-24T21:17:26Z",
          "updatedAt": "2019-05-24T21:17:26Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "3afab645fbdc5734d6e7af0046c6922a2976ebe9",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-esnikeys",
      "headRefOid": "2ae38b104fd1745646b0025585c2cdc5e841910f",
      "mergeCommit": {
        "oid": "d38264d7c7d078c773b1e207c7ed4dfb98476ec2"
      }
    },
    {
      "number": 5,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTYzODM0",
      "title": "Make the \"hts\" parameter implicit",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/5",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes HTTPSSVC more valuable as a security measure, for\r\nwebsites that can't easily get themselves on the HSTS preload\r\nlist.\r\n\r\nThe value of the \"_http\" scheme prefix is unclear in this\r\nformulation.  It could possibly be removed, depending on\r\nthe importance of supporting strange situations like\r\n\"https://example.com:80\", or http and https on the same port.",
      "createdAt": "2019-05-16T15:39:18Z",
      "updatedAt": "2019-05-24T21:19:38Z",
      "closedAt": "2019-05-24T21:19:38Z",
      "mergedAt": "2019-05-24T21:19:38Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxOTQ5MDEx",
          "commit": {
            "abbreviatedOid": "51d7788"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-05-24T21:19:32Z",
          "updatedAt": "2019-05-24T21:19:32Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "3afab645fbdc5734d6e7af0046c6922a2976ebe9",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hsts",
      "headRefOid": "51d778881b9ac3ae9092baf31fcf5eb840eb6bd4",
      "mergeCommit": {
        "oid": "926f4c01192defe70579f7b7985c6170f703d6dc"
      }
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTcwNDUz",
      "title": "Ban the \"persist\" flag",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/6",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-05-16T15:55:46Z",
      "updatedAt": "2019-05-24T21:20:24Z",
      "closedAt": "2019-05-24T21:20:24Z",
      "mergedAt": "2019-05-24T21:20:24Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxOTQ5MjE3",
          "commit": {
            "abbreviatedOid": "d7368ed"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-05-24T21:20:19Z",
          "updatedAt": "2019-05-24T21:20:19Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "3afab645fbdc5734d6e7af0046c6922a2976ebe9",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-persist",
      "headRefOid": "d7368ed23b04eb62c23c28c252253c9e36bb0920",
      "mergeCommit": {
        "oid": "5810512ceb9a56f559b495707508857924c25214"
      }
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjc5NTg1NTU2",
      "title": "Change handling of nonstandard HTTP ports",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/7",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "EDIT: New approach: This handles nonstandard HTTP ports in the same way as HSTS.",
      "createdAt": "2019-05-16T16:38:08Z",
      "updatedAt": "2019-05-30T21:16:42Z",
      "closedAt": "2019-05-30T21:16:42Z",
      "mergedAt": "2019-05-30T21:16:42Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxOTUwMjMw",
          "commit": {
            "abbreviatedOid": "95b0d98"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-05-24T21:24:10Z",
          "updatedAt": "2019-05-30T21:12:58Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'm not sure I follow this?  Where does the \"https URL\" number come from in this implicit 302 redirect case?",
              "createdAt": "2019-05-24T21:24:10Z",
              "updatedAt": "2019-05-30T21:12:58Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "5810512ceb9a56f559b495707508857924c25214",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-port",
      "headRefOid": "31895778cf90d59b3d5f63820b4a5e8852feae2f",
      "mergeCommit": {
        "oid": "62138820013b628ba620ed5dc761048341d779b5"
      }
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgyMTY0MzY1",
      "title": "Update draft-nygren-httpbis-httpssvc.md",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/8",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove ECS reference.",
      "createdAt": "2019-05-24T21:29:24Z",
      "updatedAt": "2019-06-28T19:58:11Z",
      "closedAt": "2019-06-17T21:30:10Z",
      "mergedAt": "2019-06-17T21:30:10Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQxOTU3NzA4",
          "commit": {
            "abbreviatedOid": "d52ea5e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-05-24T21:54:01Z",
          "updatedAt": "2019-05-24T21:54:01Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "5810512ceb9a56f559b495707508857924c25214",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-remove-ecs-reference",
      "headRefOid": "d52ea5eb30d41253867b22b8345a891d2d4e6609",
      "mergeCommit": {
        "oid": "c92bbf7915ff0239eeb9b2bfbd502e27597bf27d"
      }
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0MjgzNzQ5MzE1",
      "title": "Defend HSTS behavior against certain attackers",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/9",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "With this change, the behavior might even be worthy of\r\nthe name \"strict\".",
      "createdAt": "2019-05-30T17:50:41Z",
      "updatedAt": "2019-06-26T00:51:44Z",
      "closedAt": "2019-06-26T00:51:41Z",
      "mergedAt": "2019-06-26T00:51:41Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm a little leery of assuming one feature supported means a different one isn't broken.\r\n\r\nSupporting unknown RRTYPEs has been the standard [since 2003](https://tools.ietf.org/html/rfc3597), and almost all servers do this correctly.  I don't think we need to accommodate servers who've implemented the still-rare standard from 2018 but not the near-universal one from 2003.  AFAIK, no such servers exist today, and once HTTPSSVC is widely deployed, anybody who tried to set up such a server would quickly figure out that it is seriously broken\r\n\r\nAdditionally, this accommodation is not the only reason to apply this logic.  If you don't have a secure connection to your recursive, then respecting SERVFAIL doesn't actually protect you from a network adversary (specifically an adversary between you and the recursive).  With a validating resolver and a secure connection, respecting SERVFAIL provides reliable protection (on signed domains).\r\n\r\n> Perhaps a better approach is to synthesize an HSTS record just like we synthesize an Alt-Svc record and persist that independently of clearing the Alt-Svc records.\r\n\r\nThis approach is still opportunistic, not reliable against an active attacker.  It would also enable a persistent DoS by a transient local network adversary (as with persist=1).  I think this functionality is better served by the existing `Strict-Transport-Security` header, which can be set securely by the site itself on first access.",
          "createdAt": "2019-06-19T14:57:31Z",
          "updatedAt": "2019-06-19T14:57:31Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQzOTAy",
          "commit": {
            "abbreviatedOid": "69ef605"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T21:58:27Z",
          "updatedAt": "2019-06-14T21:58:28Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Presumably this could also happen for servers that are misbehaving and don't understand the HTTPSSVC record type in the query?  I think we'd need more data an implementation experience.  Perhaps we could reword this as a MAY?  (Or put in Security Considerations?)",
              "createdAt": "2019-06-14T21:58:27Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTU4NDAy",
          "commit": {
            "abbreviatedOid": "69ef605"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T23:06:07Z",
          "updatedAt": "2019-06-14T23:06:08Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Yeah, it depends on how much faith the client has in their resolver.  I would be OK with conditioning this on a secure transport to the resolver (as a proxy for \"decent resolver, won't SERVFAIL on new RRTYPEs\").",
              "createdAt": "2019-06-14T23:06:07Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwNzU1ODg4",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-17T21:27:29Z",
          "updatedAt": "2019-06-17T21:27:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "OK, I've updated this PR to only apply to \"cryptographically protected connections\".  Please review.",
              "createdAt": "2019-06-17T21:27:29Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzc4NjU4",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I'm a little leery of assuming one feature supported means a different one isn't broken.  Perhaps a better approach is to synthesize an HSTS record just like we synthesize an Alt-Svc record and persist that independently of clearing the Alt-Svc records.  That way, if the client has ever seen the record, then they'll be secure in the future regardless of attacks against their DNS server?",
          "createdAt": "2019-06-18T21:43:21Z",
          "updatedAt": "2019-06-18T21:43:21Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTYyODI0",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:48:30Z",
          "updatedAt": "2019-06-19T20:48:30Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Is this special in any way?  How is this different/new behavior here?  (Are there clients that always enforce DNSSEC validation on all A/AAAA RRs?) While nice, I'm not sure this needs to be included here.",
              "createdAt": "2019-06-19T20:48:30Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTYzMDY5",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:48:58Z",
          "updatedAt": "2019-06-19T20:48:58Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "\r\n\r\nIs this special in any way? How is this different/new behavior here? (Are there clients that always enforce DNSSEC validation on all A/AAAA RRs?) While nice, I'm not sure this needs to be included here.\r\n",
              "createdAt": "2019-06-19T20:48:58Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTYzMjU3",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:49:19Z",
          "updatedAt": "2019-06-19T20:49:19Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Looks fine now.",
              "createdAt": "2019-06-19T20:49:19Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTY1MTYy",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:53:10Z",
          "updatedAt": "2019-06-19T20:53:10Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "... \"or are received as part of the reponses to the AAAA and/or A queries that were issued-in-parallel.\"\r\n",
              "createdAt": "2019-06-19T20:53:10Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTY3NTg3",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:58:01Z",
          "updatedAt": "2019-06-19T20:58:01Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Add:  \"When the SvcDomainNames and any needed HTTPSSVC records are available, these client SHOULD make subsequent requests over connections specified by the HTTPSSVC records.\"\r\n\r\n(I suspect that for transitional purposes the A/AAAA record alongside the origin domains in these cases will provide sub-par performance relative to the target of the HTTPSSVC record.)",
              "createdAt": "2019-06-19T20:58:01Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTg1OTQz",
          "commit": {
            "abbreviatedOid": "db2ce11"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:39:06Z",
          "updatedAt": "2019-06-19T21:39:07Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "The issue is that Alt-Svc and HTTPSSVC are \"optional\", and connection can always continue without them.  This text is intended to clarify that while their presence is optional (NXDOMAIN isn't a problem), certain failure modes should be treated as fatal, even if the connection actually would complete successfully if the client ignored the error, because this category of errors might represent adversary trying to force a downgrade.\r\n\r\nAdmittedly, this particular text is mostly academic/optimistic, since very few clients (and AFAIK no commercially deployed clients) actually validate DNSSEC on the client.",
              "createdAt": "2019-06-19T21:39:06Z",
              "updatedAt": "2019-06-20T15:22:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyMzY2MjY1",
          "commit": {
            "abbreviatedOid": "aba8af8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-20T15:29:52Z",
          "updatedAt": "2019-06-20T15:29:53Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "Due to a mixup on my part this PR ended up showing diffs against the wrong branch, including this text.  I've fixed this PR and opened #19 under your name for this change.",
              "createdAt": "2019-06-20T15:29:52Z",
              "updatedAt": "2019-06-20T15:29:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyMzY2MzY4",
          "commit": {
            "abbreviatedOid": "aba8af8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-20T15:30:02Z",
          "updatedAt": "2019-06-20T15:30:03Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Moved to #19.",
              "createdAt": "2019-06-20T15:30:03Z",
              "updatedAt": "2019-06-20T15:30:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU0MzM3MDU2",
          "commit": {
            "abbreviatedOid": "aba8af8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-26T00:51:36Z",
          "updatedAt": "2019-06-26T00:51:36Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "79b7ffb456f6b581fa1cfe6e756540eefb6393a3",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-srvfail",
      "headRefOid": "aba8af8ffe31e474629ea565885e04364b7a4ace",
      "mergeCommit": {
        "oid": "a5f0685d6007bacc03bdaa6b60239a408f61abd7"
      }
    },
    {
      "number": 10,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg0MTc5NzIy",
      "title": "Change performance-optimized client behavior",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/10",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This gives clients an opt-out in the rare cases where\r\nHTTPSSVC would impair performance, and also gives\r\nserver admins a clear way to avoid these cases.",
      "createdAt": "2019-05-31T20:15:37Z",
      "updatedAt": "2019-06-14T21:56:14Z",
      "closedAt": "2019-06-14T21:56:14Z",
      "mergedAt": "2019-06-14T21:56:14Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I've substantially changed the proposal here, incorporating your CNAME idea and also making \"SvcRecordType = 0\" optional for the client (since it doesn't have any security implication).",
          "createdAt": "2019-06-13T22:04:28Z",
          "updatedAt": "2019-06-13T22:04:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1Njg4Mzg3",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:35:30Z",
          "updatedAt": "2019-06-04T20:35:31Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Does it?  I'd think with the source-address-token-validation it's the same number of RTTs for a cold client as the TCP+TLS 1.3 1RTT flow?  (Perhaps I'm misremembering.)",
              "createdAt": "2019-06-04T20:35:30Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1NjkwMDc4",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:38:51Z",
          "updatedAt": "2019-06-04T20:38:51Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Do we want to mention my hack here?  (That clients SHOULD look at the set of aliases / canonical names in the A/AAAA response chain to see if they have an A/AAAA resolution of the SvcDomainName in this recent response?)  And that operators may choose to have the SvcDomainName match a name that the client would see a resolution for as part of the A/AAAA lookup?",
              "createdAt": "2019-06-04T20:38:51Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1NjkxMjEy",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:41:10Z",
          "updatedAt": "2019-06-04T20:41:10Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "DNS RTTs and Origin RTTs often have no relation and may be orders of magnitude different.  (The former may have cache miss impact and server processing time overhead, but there are also plenty of cases where the DNS recursive is close to the client and the origin is far away, or vice-versa.)",
              "createdAt": "2019-06-04T20:41:10Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1NjkxMzAy",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:41:19Z",
          "updatedAt": "2019-06-04T20:41:20Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "That's true, but I thought most servers were expected not to perform that kind of validation unless an attack is detected.",
              "createdAt": "2019-06-04T20:41:20Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1NjkyMTI5",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:43:01Z",
          "updatedAt": "2019-06-04T20:43:01Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "I think that's worth mentioning somewhere.  The client behavior might just be \"decent DNS cache\" behavior.",
              "createdAt": "2019-06-04T20:43:01Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ1Njk4NzMw",
          "commit": {
            "abbreviatedOid": "d51dc20"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-04T20:56:36Z",
          "updatedAt": "2019-06-04T20:56:37Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "Yeah, they're not well-correlated.  The main point here is to find a way to make the average net performance loss negligible (or even a net win), even on legacy recursives (which will surely be prevalent for many years).  My sense is that an acceptable solution:\r\n\r\n1. Can't impose a latency-proportional average-case delay on any large category of connections.\r\n2. Must provide security features reliably or not at all.\r\n\r\nI'm certainly open to alternative solutions if you don't think this one will be convincing.  I just don't have any other good ideas for how to square this.",
              "createdAt": "2019-06-04T20:56:36Z",
              "updatedAt": "2019-06-13T22:02:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjQ5NjI4MTg5",
          "commit": {
            "abbreviatedOid": "38f6f86"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-13T22:03:47Z",
          "updatedAt": "2019-06-13T22:03:47Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Done",
              "createdAt": "2019-06-13T22:03:47Z",
              "updatedAt": "2019-06-13T22:03:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQzMTMw",
          "commit": {
            "abbreviatedOid": "38f6f86"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T21:55:19Z",
          "updatedAt": "2019-06-14T21:55:20Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "I'm still a little dubious on this, but we can include and discuss.",
              "createdAt": "2019-06-14T21:55:19Z",
              "updatedAt": "2019-06-14T21:55:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQzMjk5",
          "commit": {
            "abbreviatedOid": "38f6f86"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm still a little dubious on the optimization for SvcRecordType=0 but fine leaving it proposed as-is.",
          "createdAt": "2019-06-14T21:56:05Z",
          "updatedAt": "2019-06-14T21:56:05Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "62138820013b628ba620ed5dc761048341d779b5",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-performance",
      "headRefOid": "38f6f869a3665c6bf17a41676068947fe5a28855",
      "mergeCommit": {
        "oid": "8ae87b710b82e3f7ff6c992508e2f9dd2a9e0d38"
      }
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg4MTA0NjUz",
      "title": "Ban fallback when ESNI is enabled",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/11",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-13T21:34:01Z",
      "updatedAt": "2019-06-21T21:27:21Z",
      "closedAt": "2019-06-21T21:27:18Z",
      "mergedAt": "2019-06-21T21:27:18Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTQwOTcx",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T21:47:18Z",
          "updatedAt": "2019-06-14T21:47:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Are there any caveats we'd want?  Such as for clients that don't care about the privacy benefits of ESNI?  (Does the ESNI spec itself allow for any fallbacks?) This otherwise seems generally reasonable.",
              "createdAt": "2019-06-14T21:47:18Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUwMTU3NDM3",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-14T23:00:44Z",
          "updatedAt": "2019-06-14T23:00:44Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Why would a client that doesn't care about the privacy benefits of ESNI use ESNI?  Maybe the phrasing is unclear, but my goal was to specify that if the client cared enough to encrypt the SNI on the first try, then it shouldn't send un-encrypted SNI on the second try.\r\n\r\nEDIT: To your second point, the ESNI folks are working on error-recovery, but not \"fallback\" to a non-ESNI connection.",
              "createdAt": "2019-06-14T23:00:44Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzc5MTg2",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-18T21:44:38Z",
          "updatedAt": "2019-06-18T21:44:38Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "For one thing, to contribute to the overall prevalence of ESNI on the Internet, reducing the odds that it stands out as unusual.  A client that will use ESNI when possible, but doesn't really care whether it's used in any particular instance, seems entirely plausible.",
              "createdAt": "2019-06-18T21:44:38Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxNzgzNjU4",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T15:28:32Z",
          "updatedAt": "2019-06-19T15:28:32Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "An ESNI fallback behavior creates an incentive for a network adversary to block connections with ESNI, to force a retry without ESNI and reveal the name.  (If only some clients have fallback it's generally easy to target them, because most TLS clients have a distinctive ClientHello due to cipher and extension choices and ordering.)\r\n\r\nESNI is not designed to be opportunistic, and I don't think the TLS group would approve of a document that introduced that kind of behavior.  I'd rather have clients behave consistently, either implementing ESNI support or not.\r\n\r\nBottom line: \"MUST\" is used when the consequences of failure to comply are serious (and perhaps non-obvious).  I think this situation deserves a MUST.",
              "createdAt": "2019-06-19T15:28:32Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTU3Njgz",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:37:47Z",
          "updatedAt": "2019-06-19T20:37:48Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I think it's reasonable to include this and then discuss with a broader audience?  ",
              "createdAt": "2019-06-19T20:37:48Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTU5MTAx",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:40:43Z",
          "updatedAt": "2019-06-19T20:40:43Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Although one reason to *not* have this as a MUST:  at least one use-case I've been interested in getting implemented is to do ESNI for just HTTP/3 QUIC (as there's lots of value in trying to prevent middle boxes from messing with ESNI).  This isn't possible if doing so prevents QUIC fallback to HTTP/2 (which is necessary). \r\n\r\nWould an additional attribute indicating the ESNI is opportunistic and fallback is allowed be a compromise?  \"esnioppt=1\"?\r\n",
              "createdAt": "2019-06-19T20:40:43Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTgzNTEw",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:33:07Z",
          "updatedAt": "2019-06-19T21:33:07Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "What a mess.  @MikeBishop, what is the exact semantics of unknown parameters in Alt-Svc?  If a client sees an alt-value with \"esnikeys\", and doesn't know what that parameter is for, does it ignore the parameter or the whole alt-value?",
              "createdAt": "2019-06-19T21:33:07Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTg2MDgz",
          "commit": {
            "abbreviatedOid": "0e969a8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T21:39:28Z",
          "updatedAt": "2019-06-19T21:39:28Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "From rfc7838:  \"Unknown parameters MUST be ignored.  That is, the values (alt-value) they appear in MUST be processed as if the unknown parameter was not present.\"",
              "createdAt": "2019-06-19T21:39:28Z",
              "updatedAt": "2019-06-20T16:05:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyMzg4NjQ5",
          "commit": {
            "abbreviatedOid": "f39b72d"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-20T16:06:25Z",
          "updatedAt": "2019-06-20T16:06:26Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "OK, I've added a way to let server operators choose opportunistic ESNI.  Please review.",
              "createdAt": "2019-06-20T16:06:25Z",
              "updatedAt": "2019-06-20T16:06:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUzMDM5MjQx",
          "commit": {
            "abbreviatedOid": "f39b72d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-21T21:26:57Z",
          "updatedAt": "2019-06-21T21:26:57Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Sounds good.",
              "createdAt": "2019-06-21T21:26:57Z",
              "updatedAt": "2019-06-21T21:26:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUzMDM5MzA5",
          "commit": {
            "abbreviatedOid": "f39b72d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-21T21:27:09Z",
          "updatedAt": "2019-06-21T21:27:09Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "62138820013b628ba620ed5dc761048341d779b5",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-fallback",
      "headRefOid": "f39b72d02baf558d96d7f13e7ee4909d349fef8c",
      "mergeCommit": {
        "oid": "f4f020d114756eba6a2780fa65c0ebf4ebfcbe86"
      }
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5MDQ0NzY1",
      "title": "Improve formatting and cross-references",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/12",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This should address Mike's formatting comments from the main review.",
      "createdAt": "2019-06-17T22:35:03Z",
      "updatedAt": "2019-06-19T20:31:35Z",
      "closedAt": "2019-06-19T20:31:30Z",
      "mergedAt": "2019-06-19T20:31:30Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTU0Njgy",
          "commit": {
            "abbreviatedOid": "dc82fef"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-19T20:31:25Z",
          "updatedAt": "2019-06-19T20:31:25Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "c92bbf7915ff0239eeb9b2bfbd502e27597bf27d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-formatting",
      "headRefOid": "dc82fefd1f523f5ec52a0ca45de17e2be04af6e6",
      "mergeCommit": {
        "oid": "fb8459e38ecb925a89a61ec359b1a9a2a69c0ed8"
      }
    },
    {
      "number": 13,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5Mjk1OTcz",
      "title": "Adjust scheme and port description for clarity.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/13",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-18T13:59:28Z",
      "updatedAt": "2019-06-19T20:33:36Z",
      "closedAt": "2019-06-19T20:33:36Z",
      "mergedAt": "2019-06-19T20:33:36Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTU1NjY3",
          "commit": {
            "abbreviatedOid": "7a0520b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-19T20:33:31Z",
          "updatedAt": "2019-06-19T20:33:31Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "c92bbf7915ff0239eeb9b2bfbd502e27597bf27d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-port",
      "headRefOid": "7a0520bfd85c9901d5399f2fe204b274b403ffa4",
      "mergeCommit": {
        "oid": "c0f8a369c82ac57c0696409bf08fe005ee49cf71"
      }
    },
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5MzA4NDA4",
      "title": "Priority clarification",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/14",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-18T14:26:27Z",
      "updatedAt": "2019-06-19T20:30:03Z",
      "closedAt": "2019-06-19T20:29:55Z",
      "mergedAt": "2019-06-19T20:29:54Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTUzODky",
          "commit": {
            "abbreviatedOid": "604b7fb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-19T20:29:47Z",
          "updatedAt": "2019-06-19T20:29:47Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "c92bbf7915ff0239eeb9b2bfbd502e27597bf27d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-pri",
      "headRefOid": "604b7fb589cde07a69fb13a24cb8434e88d631bf",
      "mergeCommit": {
        "oid": "74a297e7f2534bb659857e16559c8617d2f45aa2"
      }
    },
    {
      "number": 15,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5MzEyNDY1",
      "title": "Improve description of \"ma\" and \"persist\" handling",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/15",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-18T14:35:13Z",
      "updatedAt": "2019-06-19T14:41:45Z",
      "closedAt": "2019-06-19T14:41:45Z",
      "mergedAt": "2019-06-19T14:41:45Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxMzczMDM1",
          "commit": {
            "abbreviatedOid": "9cfb1b8"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-18T21:30:05Z",
          "updatedAt": "2019-06-18T21:30:05Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "c92bbf7915ff0239eeb9b2bfbd502e27597bf27d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-ma",
      "headRefOid": "9cfb1b82b56915ae522ca8c92c8630f11e3f66e5",
      "mergeCommit": {
        "oid": "18fa63215c6bba5902d4cae1f81828de9f2dcc79"
      }
    },
    {
      "number": 16,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5ODQwNDMx",
      "title": "Improve handling of mixed-type RRSets",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/16",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-19T19:05:26Z",
      "updatedAt": "2019-06-19T20:08:24Z",
      "closedAt": "2019-06-19T20:07:56Z",
      "mergedAt": "2019-06-19T20:07:56Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTQyMTg2",
          "commit": {
            "abbreviatedOid": "3b5d6c7"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-19T20:06:17Z",
          "updatedAt": "2019-06-19T20:06:22Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Quibble:  This could be read as saying that in the presence of multiple \"0\"s, you MAY ignore them all if any of them aren't in your cache.  But then again, you can ignore them entirely for any reason you like, so it's kind of a moot point.",
              "createdAt": "2019-06-19T20:06:18Z",
              "updatedAt": "2019-06-19T20:06:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUxOTQzMTky",
          "commit": {
            "abbreviatedOid": "3b5d6c7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-19T20:08:20Z",
          "updatedAt": "2019-06-19T20:08:21Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I hit merge, but feel free to suggest improved text (or logic!) here.",
              "createdAt": "2019-06-19T20:08:20Z",
              "updatedAt": "2019-06-19T20:08:21Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "18fa63215c6bba5902d4cae1f81828de9f2dcc79",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-type",
      "headRefOid": "3b5d6c704fce12fed3f98101f050d0cfe91680dd",
      "mergeCommit": {
        "oid": "187a1c2e7f5548c2aa7752e729813016f844fee0"
      }
    },
    {
      "number": 17,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5ODgyMTAx",
      "title": "Remove Alt-Svc sni= parameter",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/17",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Finish removing the Alt-Svc \"sni=\" parameter (other than from the comparisons appendix discussion).",
      "createdAt": "2019-06-19T21:15:34Z",
      "updatedAt": "2019-06-19T21:55:32Z",
      "closedAt": "2019-06-19T21:55:29Z",
      "mergedAt": "2019-06-19T21:55:29Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2019-06-19T21:31:07Z",
          "updatedAt": "2019-06-19T21:31:07Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "c0f8a369c82ac57c0696409bf08fe005ee49cf71",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-remove-sni-param",
      "headRefOid": "9fae1c6a25e1a15372644b2bc8b27923820a748f",
      "mergeCommit": {
        "oid": "79b7ffb456f6b581fa1cfe6e756540eefb6393a3"
      }
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjg5ODg3NDk1",
      "title": "Add a note that fallback A/AAAA records are needed for Alias form",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/18",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-19T21:33:31Z",
      "updatedAt": "2019-06-21T01:48:56Z",
      "closedAt": "2019-06-21T01:48:51Z",
      "mergedAt": "2019-06-21T01:48:50Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyMzQ1NzA3",
          "commit": {
            "abbreviatedOid": "2b038b3"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-20T14:57:41Z",
          "updatedAt": "2019-06-20T14:57:41Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "9e5d5a2f60c5410598ca1e9b3c916b75ea452855",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-fallback-records",
      "headRefOid": "2b038b32e5e6d99992e2633f7b06e2eb33d2dd97",
      "mergeCommit": {
        "oid": "6efc05c52827330bfef52405485f6deb381591d0"
      }
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkwMjY3MDk0",
      "title": "Clarify performance optimized behavior",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/19",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-20T15:27:12Z",
      "updatedAt": "2019-06-28T19:58:58Z",
      "closedAt": "2019-06-20T18:39:30Z",
      "mergedAt": "2019-06-20T18:39:30Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Text is from @enygren.  :+1: from me.",
          "createdAt": "2019-06-20T15:30:51Z",
          "updatedAt": "2019-06-20T15:30:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyNDM0Mjkw",
          "commit": {
            "abbreviatedOid": "a7f557e"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-20T17:36:53Z",
          "updatedAt": "2019-06-20T17:36:53Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "79b7ffb456f6b581fa1cfe6e756540eefb6393a3",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-performance",
      "headRefOid": "a7f557eb308a9cd3611ad12ffbfa4a726567015b",
      "mergeCommit": {
        "oid": "1e21475fa32808d5a89a03a6f63c52077ac47208"
      }
    },
    {
      "number": 20,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkwNDM0ODQ2",
      "title": "Add a TO BE REMOVED section as suggested by Ben",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/20",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-21T01:55:11Z",
      "updatedAt": "2019-06-21T21:16:19Z",
      "closedAt": "2019-06-21T21:16:16Z",
      "mergedAt": "2019-06-21T21:16:16Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyNjEyNTAw",
          "commit": {
            "abbreviatedOid": "66dae2a"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-21T02:03:28Z",
          "updatedAt": "2019-06-21T02:03:28Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "6efc05c52827330bfef52405485f6deb381591d0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-to-be-removed-intro",
      "headRefOid": "66dae2ad9d3cb82aee652f395b4718ea2b3e4e5b",
      "mergeCommit": {
        "oid": "41dba7dd2d986beb9f1cadacfba174039c56c4c7"
      }
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkwNDM4Mzc5",
      "title": "Define the resolution algorithm",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/21",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-21T02:20:07Z",
      "updatedAt": "2019-06-21T21:24:18Z",
      "closedAt": "2019-06-21T21:24:14Z",
      "mergedAt": "2019-06-21T21:24:14Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUyNjE2NDg3",
          "commit": {
            "abbreviatedOid": "7f748d4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-21T02:26:02Z",
          "updatedAt": "2019-06-21T02:33:48Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Technically if you're v4 or v6 only this is obviously not quite right.  I think \"A/AAAA\" is the usual shorthand.",
              "createdAt": "2019-06-21T02:26:03Z",
              "updatedAt": "2019-06-21T21:23:07Z"
            },
            {
              "originalPosition": 39,
              "body": "I would add \"When these optimizations are employed, this procedure does not generally add latency in comparison to an ordinary A/AAAA lookup.\".  (But only if it's true.  I think it is, if recursives really follow SvcRecordType 0 chains.)",
              "createdAt": "2019-06-21T02:29:21Z",
              "updatedAt": "2019-06-21T21:23:07Z"
            },
            {
              "originalPosition": 34,
              "body": "I would add \"and proceed normally\"",
              "createdAt": "2019-06-21T02:29:51Z",
              "updatedAt": "2019-06-21T21:23:07Z"
            },
            {
              "originalPosition": 24,
              "body": "Any loop detection logic?  Could be as simple as \"subject to loop detection heuristics\".",
              "createdAt": "2019-06-21T02:33:15Z",
              "updatedAt": "2019-06-21T21:23:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjUzMDM3ODU1",
          "commit": {
            "abbreviatedOid": "7f748d4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-06-21T21:22:37Z",
          "updatedAt": "2019-06-21T21:22:37Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I added:\r\n\"to reduce latency impact in comparison to ordinary AAAA/A lookups.\"\r\nI think we may want more experimental testing prior to making a stronger\r\nstatement as there are enough corner cases here.",
              "createdAt": "2019-06-21T21:22:37Z",
              "updatedAt": "2019-06-21T21:23:07Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "6efc05c52827330bfef52405485f6deb381591d0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-resolution",
      "headRefOid": "af86759f1a9ffeaa8786030f8886cf87468a75f0",
      "mergeCommit": {
        "oid": "334d532d370e179e8ff1fd9f7847bf9aaa213a91"
      }
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkxNzQxODQ5",
      "title": "Added some suggestions from Ian Swett.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/22",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mention the HTTPS bootstrapping in the intro.\r\nRemind the importance of using the origin name for validating\r\nthe TLS server cert.",
      "createdAt": "2019-06-25T21:38:22Z",
      "updatedAt": "2019-06-26T00:50:16Z",
      "closedAt": "2019-06-26T00:50:10Z",
      "mergedAt": "2019-06-26T00:50:10Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me\n\nOn Tue, Jun 25, 2019, 5:38 PM Erik Nygren <notifications@github.com> wrote:\n\n> Mention the HTTPS bootstrapping in the intro.\n> Remind the importance of using the origin name for validating\n> the TLS server cert.\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/MikeBishop/dns-alt-svc/pull/22\n> Commit Summary\n>\n>    - Added some suggestions from Ian Swett.\n>\n> File Changes\n>\n>    - *M* draft-nygren-httpbis-httpssvc.md\n>    <https://github.com/MikeBishop/dns-alt-svc/pull/22/files#diff-0> (11)\n>\n> Patch Links:\n>\n>    - https://github.com/MikeBishop/dns-alt-svc/pull/22.patch\n>    - https://github.com/MikeBishop/dns-alt-svc/pull/22.diff\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/MikeBishop/dns-alt-svc/pull/22?email_source=notifications&email_token=AABO3SMUS3Q57UGA6ZLVPCTP4KF45A5CNFSM4H3MQJHKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4G3VBZ2Q>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABO3SPSBSNEL3TT7PTUHKTP4KF45ANCNFSM4H3MQJHA>\n> .\n>\n",
          "createdAt": "2019-06-25T21:45:26Z",
          "updatedAt": "2019-06-25T21:45:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU0MzA5MjYz",
          "commit": {
            "abbreviatedOid": "ec0dec9"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-25T22:50:10Z",
          "updatedAt": "2019-06-25T22:50:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "From a pure reading-flow point of view, can we do something other than \"It also provides\" twice in a row?\r\n```suggestion\r\nof a domain name.  Finally, it provides a way to indicate that the origin\r\n```",
              "createdAt": "2019-06-25T22:50:10Z",
              "updatedAt": "2019-06-26T00:49:28Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "f4f020d114756eba6a2780fa65c0ebf4ebfcbe86",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-ian-suggestions-1",
      "headRefOid": "585721cbbbfd0908ffd62be9d079d71ef9f52f80",
      "mergeCommit": {
        "oid": "d414f84d1e39faad199679cb4c15310dec5315b7"
      }
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyNjAwMzAx",
      "title": "Change SvcDomainName to DNS format",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/25",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #23",
      "createdAt": "2019-06-27T20:57:05Z",
      "updatedAt": "2019-06-28T01:04:51Z",
      "closedAt": "2019-06-28T01:04:43Z",
      "mergedAt": "2019-06-28T01:04:43Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU1NTQ1NjAz",
          "commit": {
            "abbreviatedOid": "805728f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-28T01:04:37Z",
          "updatedAt": "2019-06-28T01:04:37Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "82392badf02331c706eb2d226b128ee038bb04f0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-format",
      "headRefOid": "805728fae405a8694b296d77aa8a8c91947d291f",
      "mergeCommit": {
        "oid": "70a349d569f57d100863b9a017ae82346c976d12"
      }
    },
    {
      "number": 26,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyNjA5MDcz",
      "title": "Move priority into the DNS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/26",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #24",
      "createdAt": "2019-06-27T21:25:06Z",
      "updatedAt": "2019-06-28T00:58:21Z",
      "closedAt": "2019-06-28T00:58:20Z",
      "mergedAt": "2019-06-28T00:58:20Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU1NTQ0NTgy",
          "commit": {
            "abbreviatedOid": "fbdfe03"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-28T00:58:11Z",
          "updatedAt": "2019-06-28T00:58:11Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "a5f0685d6007bacc03bdaa6b60239a408f61abd7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-pri",
      "headRefOid": "fbdfe03293fe49e359f3c19f8cd6f7c9a417163b",
      "mergeCommit": {
        "oid": "82392badf02331c706eb2d226b128ee038bb04f0"
      }
    },
    {
      "number": 27,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyNjU1MjA2",
      "title": "Some more cleanups from moving pri to a field, with reorder",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/27",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reorder SvcFieldPriority to be before SvcDomainName to be consistent with SRV and MX.\r\nAdd this in to some other examples.\r\nRemove the IANA instruction for pri.",
      "createdAt": "2019-06-28T01:19:15Z",
      "updatedAt": "2019-06-28T15:44:57Z",
      "closedAt": "2019-06-28T15:44:54Z",
      "mergedAt": "2019-06-28T15:44:54Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps leave it in for now but leave that as open discussion?  It may also make sense to just put it back into an Alt-Svc attribute.",
          "createdAt": "2019-06-28T15:44:41Z",
          "updatedAt": "2019-06-28T15:44:41Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU1ODI5NzYx",
          "commit": {
            "abbreviatedOid": "ae724a5"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Oops, thanks for fixing the text that I broke.\r\n\r\nI do wonder whether it would be better to omit SvcFieldPriority from the textual representation when SvcRecordType == 0.  As the name suggests, SvcFieldPriority is mostly the priority for the SvcFieldValue.",
          "createdAt": "2019-06-28T15:20:33Z",
          "updatedAt": "2019-06-28T15:20:33Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "70a349d569f57d100863b9a017ae82346c976d12",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-pri-updates",
      "headRefOid": "ae724a5606930445ccd85c66b300d1afe5a402d7",
      "mergeCommit": {
        "oid": "f549f26e420a98297036c4269db66b1e96bb6dd4"
      }
    },
    {
      "number": 28,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyODgyOTEy",
      "title": "Add discussion to Open Issues on Priority/Weight",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/28",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-28T15:51:32Z",
      "updatedAt": "2019-06-28T16:02:05Z",
      "closedAt": "2019-06-28T16:02:02Z",
      "mergedAt": "2019-06-28T16:02:02Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU1ODQ5MjUx",
          "commit": {
            "abbreviatedOid": "3e38a29"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-28T15:58:51Z",
          "updatedAt": "2019-06-28T15:58:51Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "f549f26e420a98297036c4269db66b1e96bb6dd4",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-open-discussion-pri",
      "headRefOid": "3e38a2922b6658c86c0578178f494bf6f4ea17fd",
      "mergeCommit": {
        "oid": "fef3e1a24e3bc4a4c350b225d1dc052b8f45d7a4"
      }
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyOTQ5Nzgz",
      "title": "Remove sni= parameter",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/29",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-06-28T19:49:17Z",
      "updatedAt": "2019-06-28T19:57:54Z",
      "closedAt": "2019-06-28T19:57:51Z",
      "mergedAt": "2019-06-28T19:57:51Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU1OTQ5NzU0",
          "commit": {
            "abbreviatedOid": "7a39a1b"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-06-28T19:56:35Z",
          "updatedAt": "2019-06-28T19:56:35Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "fef3e1a24e3bc4a4c350b225d1dc052b8f45d7a4",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-remove-sni-param",
      "headRefOid": "7a39a1be39f5370996fa8773d956de938e391d40",
      "mergeCommit": {
        "oid": "aa6d0e3b95127cc4e926dd049f7b6f30b43a9330"
      }
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0MjkyOTYwNTUy",
      "title": "Minor textual polish",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/30",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing typos, improving consistency, and removing trailing whitespace that makes the linter complain.",
      "createdAt": "2019-06-28T20:31:36Z",
      "updatedAt": "2019-07-01T14:53:39Z",
      "closedAt": "2019-07-01T14:53:36Z",
      "mergedAt": "2019-07-01T14:53:36Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU2Mzg4MzY5",
          "commit": {
            "abbreviatedOid": "593e8b4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-01T14:52:54Z",
          "updatedAt": "2019-07-01T14:52:54Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "nygren-httpssvc",
      "baseRefOid": "aa6d0e3b95127cc4e926dd049f7b6f30b43a9330",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-typos",
      "headRefOid": "593e8b453e34b9a07d7a217af5f761e71856c7d0",
      "mergeCommit": {
        "oid": "c48304f1e70d5c9426a6695febfc27b1fae5c7b1"
      }
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0MjI4NDI4",
      "title": "Replace typos of \"HTTPSVC\" with \"HTTPSSVC\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/31",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Of course I noticed this just as we submitted the -00.",
      "createdAt": "2019-07-03T15:43:57Z",
      "updatedAt": "2019-07-03T16:00:36Z",
      "closedAt": "2019-07-03T16:00:36Z",
      "mergedAt": "2019-07-03T16:00:36Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU3NTkwMDYz",
          "commit": {
            "abbreviatedOid": "a7ddcbe"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-03T16:00:29Z",
          "updatedAt": "2019-07-03T16:00:29Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9a088ec47f656348b8d58366d86e4ccc38eadb5f",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-fix-httpsvc-to-httpssvc",
      "headRefOid": "a7ddcbe9133c7700bf6f06f2e04f2e845950d691",
      "mergeCommit": {
        "oid": "5d1da9338e8026df7bf3ac57ebef2a00e630a5b9"
      }
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0MzExMTM5",
      "title": "Suggestions from Ilari: Update tls13 reference.  Switch from 302 to 307 redirect.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/33",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-03T20:02:58Z",
      "updatedAt": "2019-07-08T21:03:21Z",
      "closedAt": "2019-07-08T21:03:15Z",
      "mergedAt": "2019-07-08T21:03:15Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MTU1MTAx",
          "commit": {
            "abbreviatedOid": "4e52078"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T21:02:46Z",
          "updatedAt": "2019-07-08T21:02:46Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "242f0f7722303c02fb0b90e4897267e249c557fb",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-httpssvc-feedback-201907",
      "headRefOid": "4e52078d6a3c21bb6e94baea5d9486d2236149e4",
      "mergeCommit": {
        "oid": "c04513f7b2a9c457dd0f8e2bfbae8c505397691d"
      }
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODY0OTI1",
      "title": "Remove redundancy from the wire format.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/35",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Address most issues in #32 \r\n\r\nWe should still land:\r\n\r\n\r\n## Special cases for SvcDomainName\r\n\r\nWhen SvcRecordType=1, there are some special cases to handle\r\nfor SvcDomainName:\r\n* How to indicate it should be equivalent to the RRNAME?\r\n* How to indicate it should be equivalent to the hostname?\r\n* What happens if it has the value \".\"?  SRV and MX have this\r\n  mean \"no service available.",
      "createdAt": "2019-07-05T12:49:45Z",
      "updatedAt": "2019-07-08T12:22:21Z",
      "closedAt": "2019-07-08T12:22:16Z",
      "mergedAt": "2019-07-08T12:22:16Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTg2MjI5",
          "commit": {
            "abbreviatedOid": "9afd423"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-06T11:21:13Z",
          "updatedAt": "2019-07-06T11:26:32Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This talks about SvcDomainName being empty, but SvcDomainName can't be empty in this serialization.",
              "createdAt": "2019-07-06T11:21:13Z",
              "updatedAt": "2019-07-08T12:19:44Z"
            },
            {
              "originalPosition": 54,
              "body": "I think we should resolve this before merging.  If SRV and MX special-case \".\", I think that we can do the same.\r\n\r\nI don't think we need a way to say \"equivalent to the hostname\".  The hostname has already been delegated to this RRNAME.",
              "createdAt": "2019-07-06T11:25:25Z",
              "updatedAt": "2019-07-08T12:19:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODQyNDEw",
          "commit": {
            "abbreviatedOid": "dd959ba"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T11:29:32Z",
          "updatedAt": "2019-07-08T12:00:34Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Missing \"the\".",
              "createdAt": "2019-07-08T11:29:33Z",
              "updatedAt": "2019-07-08T12:19:44Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "5d1da9338e8026df7bf3ac57ebef2a00e630a5b9",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-remove-wireformat-redundancy",
      "headRefOid": "97de449f1ddab4940458e18a4a9f2f8460c23ed1",
      "mergeCommit": {
        "oid": "1ef3d3a266627c2577a539d88e137c103ab7b096"
      }
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MDQwNzEz",
      "title": "Missing semicolons in Alt-Svc records",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/36",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There should be a semicolon before esnikeys",
      "createdAt": "2019-07-06T13:50:35Z",
      "updatedAt": "2019-07-08T20:13:47Z",
      "closedAt": "2019-07-08T20:13:47Z",
      "mergedAt": "2019-07-08T20:13:47Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "8885fdd540604ef97d55d021977ab12251794250",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-missing-semicolons",
      "headRefOid": "ffae9befab3b60c9b01888517d81bde217bfd153",
      "mergeCommit": {
        "oid": "242f0f7722303c02fb0b90e4897267e249c557fb"
      }
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MzEyMjMx",
      "title": "Switch from \"hq\" to \"h3\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/37",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per suggestion from Lucas Pardue.",
      "createdAt": "2019-07-08T12:26:03Z",
      "updatedAt": "2019-07-08T12:31:07Z",
      "closedAt": "2019-07-08T12:31:03Z",
      "mergedAt": "2019-07-08T12:31:02Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODY3MDc4",
          "commit": {
            "abbreviatedOid": "ae453a0"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T12:27:44Z",
          "updatedAt": "2019-07-08T12:27:44Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "64a678a09793e6f14e6f75f0f6a2c8071479197f",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-hq-h3",
      "headRefOid": "4f395e9ec0e2e81f2ef3c73e28e25cbb580ef55e",
      "mergeCommit": {
        "oid": "8885fdd540604ef97d55d021977ab12251794250"
      }
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MzIyNDky",
      "title": "Update README.md",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/38",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add httpssvc to the readme",
      "createdAt": "2019-07-08T12:54:39Z",
      "updatedAt": "2019-07-08T13:05:07Z",
      "closedAt": "2019-07-08T13:05:00Z",
      "mergedAt": "2019-07-08T13:05:00Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "8885fdd540604ef97d55d021977ab12251794250",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-readme-and-impl",
      "headRefOid": "88810c5d19507cf8f1e1c2fd15e4818ea0da90be",
      "mergeCommit": {
        "oid": "43eb6348486506ee925886c4946148f07671bc83"
      }
    },
    {
      "number": 43,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk3MjE2MzY2",
      "title": "fix title",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/43",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-12T20:39:24Z",
      "updatedAt": "2019-08-20T18:43:51Z",
      "closedAt": "2019-08-20T18:43:48Z",
      "mergedAt": "2019-08-20T18:43:48Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc3MzY2NzIy",
          "commit": {
            "abbreviatedOid": "5aece38"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-08-20T18:43:41Z",
          "updatedAt": "2019-08-20T18:43:41Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c04513f7b2a9c457dd0f8e2bfbae8c505397691d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-fix-title",
      "headRefOid": "5aece38f5033f3d82899d5a51da8f54fe20a034b",
      "mergeCommit": {
        "oid": "6d8a728ec6133768283a1c19b647526955867fb2"
      }
    },
    {
      "number": 50,
      "id": "MDExOlB1bGxSZXF1ZXN0MzEyNDk1MDk5",
      "title": "Full edit pass on SVCB",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/50",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc",
        "enygren"
      ],
      "labels": [],
      "body": "This includes a mix of syntactic, editorial, and\r\nsubstantive changes, with the goal of getting ready\r\nfor 00.",
      "createdAt": "2019-08-29T21:08:13Z",
      "updatedAt": "2019-09-20T21:08:38Z",
      "closedAt": "2019-09-20T21:08:30Z",
      "mergedAt": "2019-09-20T21:08:30Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgzMTYxMzU1",
          "commit": {
            "abbreviatedOid": "f3b0a62"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-03T17:52:08Z",
          "updatedAt": "2019-09-03T17:52:09Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Reading through both the Abstract and the Intro, it would be nice to edit these a bit more heavily for length:\r\n- Abstract is quite long, would be nice to be one paragraph (minus the parts that will be removed)\r\n- While the note in the abstract does explain the name, it may be nice to explain a bit. Especially since SVCB isn't really obvious as a name.\r\n- The abstract mentions enhancements to performance and privacy, but these aren't summarized at all in the intro. I'd expect some explanation here to enhance the \"why should I care\".",
              "createdAt": "2019-09-03T17:52:09Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgzMjkxNjU3",
          "commit": {
            "abbreviatedOid": "f3b0a62"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-03T22:20:36Z",
          "updatedAt": "2019-09-03T22:20:37Z",
          "comments": [
            {
              "originalPosition": 469,
              "body": "Thanks for the reference!\r\n\r\nAs a nit, missing a period at the end of the sentence:\r\n```suggestion\r\nuse an approach such as {{!HappyEyeballsV2=RFC8305}}.\r\n```",
              "createdAt": "2019-09-03T22:20:36Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgzMjkyNzI1",
          "commit": {
            "abbreviatedOid": "f3b0a62"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-03T22:23:50Z",
          "updatedAt": "2019-09-03T22:23:50Z",
          "comments": [
            {
              "originalPosition": 625,
              "body": "```suggestion\r\nThe SvcParamKey for ESNI is \"esnikeys\".  Its value is defined in\r\n```",
              "createdAt": "2019-09-03T22:23:50Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg0NDE4NTY1",
          "commit": {
            "abbreviatedOid": "72ea181"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-05T17:22:35Z",
          "updatedAt": "2019-09-05T17:22:35Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Done and done.",
              "createdAt": "2019-09-05T17:22:35Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1MTI0NjQy",
          "commit": {
            "abbreviatedOid": "72ea181"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This looks generally quite good!  See a bunch of questions throughout, although many are just ideas/suggestions/clarifications and some we can defer for later.  I'm also going to submit a PR against this from enygren-svcb-generalization-2 with a bunch of additional minor edits. ",
          "createdAt": "2019-09-06T22:24:18Z",
          "updatedAt": "2019-09-07T03:17:05Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Do we still want to mention extensibility somewhere in the intro?  I think that would be helpful to give context for some of the design decisions.  (ie, that this also may allow future use-cases to be covered without needing to add additional DNS lookups.)",
              "createdAt": "2019-09-06T22:24:18Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 152,
              "body": "It only is functionally equivalent for the services it specifies.  Hence why the \"for alternative service endpoints including HTTPS\" was there.  Is there a better way to phrase this compactly?",
              "createdAt": "2019-09-06T22:27:55Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 268,
              "body": "Do we want to include all of ALPHA or just:\r\n\r\n          ALPHA_LC          =  %x61-7A   ;  a-z\r\n\r\n?  (Since case insensitive.)",
              "createdAt": "2019-09-06T22:34:19Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 275,
              "body": "\"SHOULD NOT \"?\r\nShould clients use the first or last instance of a parameter that violates this and appears more than once if the specification doesn't allow this?  Perhaps MUST use just the first?  ",
              "createdAt": "2019-09-06T22:36:37Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 417,
              "body": "Isn't it possible that it can contain all of these? \r\nPerhaps:\r\n\r\n> The SvcDomainName MUST point to a domain name that contains\r\n> another SVCB record, address (AAAA and/or A) records,\r\n> or both address records and a ServiceForm SVCB record.\r\n",
              "createdAt": "2019-09-06T23:03:27Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 465,
              "body": "Should we have something more consistent here?  For example:\r\n\r\n> Unless specified otherwise by the protocol mapping, clients MUST ignore\r\n> SvcFieldValue parameters that they do not understand.\r\n",
              "createdAt": "2019-09-06T23:06:26Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 478,
              "body": "Adding an example here would be helpful.  For example:\r\n\r\n> For example, in the following example \"svc2.example.net\"\r\n> is the effective SvcDomainName:\r\n> \r\n>     www.example.com.  7200  IN HTTPSSVC svc.example.net.\r\n>     svc.example.net.  7200  IN CNAME    svc2.example.net.\r\n>     svc2.example.net. 7200  IN HTTPSSVC 0 . ( alpn=h2\r\n>                                          port=8002 esnikeys=\"...\" )\r\n>     svc2.example.net. 300   IN A         192.0.2.2\r\n>     svc2.example.net. 300   IN AAAA      2001:db8::2\r\n",
              "createdAt": "2019-09-06T23:12:10Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 503,
              "body": "Is the duplicate SvcFieldValue a typo?",
              "createdAt": "2019-09-07T02:04:40Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 1182,
              "body": "Meta:  \r\n\r\nI guess we should pick \"an SVCB\" or \"a SVCB\" and then replace consistently throughout. Which depends on whether it is pronounced \"a Service B record\" or \"an S.V.C.B. record\".\r\n",
              "createdAt": "2019-09-07T02:12:07Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 652,
              "body": "Should we rename this as \"proto\"?  That might be more human-friendly?",
              "createdAt": "2019-09-07T02:34:57Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 659,
              "body": "Should we allow multiple \"alpn\" entries?  One specific use-case would be to allow both h2 and http1.1 to be listed compactly as options in the same entry, which might be a common case?  (In this case, the first one listed should be defined to take preference.)  Or is this too much complexity?",
              "createdAt": "2019-09-07T02:38:51Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 821,
              "body": "Do we want to exclude \"a\" and \"aaaa\" from this?  (If anything, the defined format won't work within Alt-Svc.)",
              "createdAt": "2019-09-07T02:54:02Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 933,
              "body": "Do we not need any of this?",
              "createdAt": "2019-09-07T02:58:30Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 1085,
              "body": "Do we want a column for \"Repeats\" to indicate whether it is allowed to repeat?  (Or maybe just leave that with the definition?)",
              "createdAt": "2019-09-07T03:01:43Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 478,
              "body": "(This is included in my PR)",
              "createdAt": "2019-09-07T03:15:42Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NTQ2MTkx",
          "commit": {
            "abbreviatedOid": "72ea181"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T14:25:09Z",
          "updatedAt": "2019-09-09T15:08:43Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "OK, I've modified this text to note that.",
              "createdAt": "2019-09-09T14:25:09Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 152,
              "body": "Clarified.",
              "createdAt": "2019-09-09T14:26:22Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 275,
              "body": "Done",
              "createdAt": "2019-09-09T14:36:16Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 417,
              "body": "Resolved in your edit",
              "createdAt": "2019-09-09T14:36:28Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 465,
              "body": "Done",
              "createdAt": "2019-09-09T14:37:31Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 503,
              "body": "Fixed in your edit.",
              "createdAt": "2019-09-09T14:38:04Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 652,
              "body": "I think \"proto\" sounds like something that would apply to any \"protocol\" that uses SVCB, but in fact this field is specific to TLS-based protocols.  For example, one might be tempted to use \"proto=ssh\" for a SVCB-for-SSH, but of course that is nonsense.\r\n\r\nIf you want we could change it to \"tls-proto\", but I think \"ALPN\" is the usual nomenclature in the TLS and HTTP world.",
              "createdAt": "2019-09-09T14:46:09Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 659,
              "body": "I see the appeal, but I'd rather preserve the 1:1 mapping with Alt-Svc.  Allowing multiple ALPNs significantly complicates the Alt-Svc synthesis algorithm.\r\n\r\nIn practice, I think the only ALPNs in play are \"h2\" and \"h3\", so we're not talking about an enormous amount of duplication.",
              "createdAt": "2019-09-09T14:46:57Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 821,
              "body": "They are excluded by virtue of not having a defined mapping.  However, I don't want to rule out a future draft defining a mapping.\r\n\r\nI think the format will work fine in Alt-Svc; it just requires quotes around the value.",
              "createdAt": "2019-09-09T14:54:25Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 933,
              "body": "On closer inspection, it looks like I lost the bit about the trailing \".\".  I added that back in.\r\n\r\nI tried to remove the parts of this section that were restating information that was already defined: our resolution procedure, the conceptual mapping in `#map2altsvc`, and the Alt-Svc syntax from RFC 7838.  I think we should lean toward brevity until we get a request for clarification.\r\n\r\nI did preserve the portion about ordering, which did not appear to be duplicated anywhere else.",
              "createdAt": "2019-09-09T14:59:16Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 1085,
              "body": "I don't think it's necessary at this time.",
              "createdAt": "2019-09-09T14:59:58Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            },
            {
              "originalPosition": 1182,
              "body": "There was only one instance of \"a SVCB\", so I went with the majority.",
              "createdAt": "2019-09-09T15:00:45Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NTc5NTAx",
          "commit": {
            "abbreviatedOid": "cdcaef2"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T15:09:22Z",
          "updatedAt": "2019-09-09T15:09:22Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "It sounds like you want registered keys to be lower-case, but display-form to be case-insensitive.  I attempted to capture that.",
              "createdAt": "2019-09-09T15:09:22Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzE2NDc5",
          "commit": {
            "abbreviatedOid": "cdcaef2"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Partial review, but these generally look like improvements.  I'll read further tomorrow.",
          "createdAt": "2019-09-09T18:59:24Z",
          "updatedAt": "2019-09-09T21:04:46Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Maybe easier to just say \"Support non-default TCP and UDP ports\"?",
              "createdAt": "2019-09-09T18:59:24Z",
              "updatedAt": "2019-09-12T20:57:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg3NzAwODAx",
          "commit": {
            "abbreviatedOid": "cdcaef2"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "@MikeBishop, please let me know if you have any other comments.  I would like to get this finalized for -00 as soon as possible.",
          "createdAt": "2019-09-12T20:58:13Z",
          "updatedAt": "2019-09-12T20:58:47Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "Done",
              "createdAt": "2019-09-12T20:58:13Z",
              "updatedAt": "2019-09-12T20:58:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNTYxODQ5",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T13:23:15Z",
          "updatedAt": "2019-09-19T13:23:16Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "I'm not seeing this or am I missing this.  Did this not get committed/merged?",
              "createdAt": "2019-09-19T13:23:16Z",
              "updatedAt": "2019-09-19T13:23:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNTYzNDky",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T13:25:38Z",
          "updatedAt": "2019-09-19T13:25:38Z",
          "comments": [
            {
              "originalPosition": 933,
              "body": "I'm not seeing this or am I missing this.  Did this not get committed/merged?",
              "createdAt": "2019-09-19T13:25:38Z",
              "updatedAt": "2019-09-19T13:25:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNTY0MjI1",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T13:26:40Z",
          "updatedAt": "2019-09-19T13:26:40Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "I'm not seeing this or am I missing this.  Did this not get committed/merged?",
              "createdAt": "2019-09-19T13:26:40Z",
              "updatedAt": "2019-09-19T13:26:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNTY1NzM1",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T13:28:49Z",
          "updatedAt": "2019-09-19T13:28:49Z",
          "comments": [
            {
              "originalPosition": 1182,
              "body": "I think this may be because it used to be \"an ALTSVC\" and then \"an HTTPS\" so when I did the query-replace I didn't fix/replace.  This can get cleaned up later.",
              "createdAt": "2019-09-19T13:28:49Z",
              "updatedAt": "2019-09-19T13:28:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNjcwMzMz",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T15:51:33Z",
          "updatedAt": "2019-09-19T15:51:33Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "The current commit says \"Enables CNAME-like functionality at a zone apex (such as \"example.com\") for participating protocols, and generally enables delegation of operational authority for an origin within the DNS to an alternate name.\"\r\n\r\n",
              "createdAt": "2019-09-19T15:51:33Z",
              "updatedAt": "2019-09-19T15:51:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNjcxNzE0",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T15:53:43Z",
          "updatedAt": "2019-09-19T15:53:43Z",
          "comments": [
            {
              "originalPosition": 933,
              "body": "The current commit has the text \"The SvcDomainName is mapped into the uri-host portion of alt-authority with the trailing \".\" removed.\", at the top of `#map2altsvc`.",
              "createdAt": "2019-09-19T15:53:43Z",
              "updatedAt": "2019-09-19T15:53:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNjczMzMy",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-19T15:56:08Z",
          "updatedAt": "2019-09-19T15:56:08Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "I believe this is covered by lines 100-107.  It sounds like some changes aren't showing for you, so you might need to select \"Changes from all commits\" in the \"Files changed\" tab.",
              "createdAt": "2019-09-19T15:56:08Z",
              "updatedAt": "2019-09-19T15:56:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkxMzg4NjQz",
          "commit": {
            "abbreviatedOid": "b85bdcd"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me!  Ship it.",
          "createdAt": "2019-09-20T20:45:45Z",
          "updatedAt": "2019-09-20T20:45:45Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "enygren-svcb-generalization-1",
      "baseRefOid": "d34ff409b6d49573acec2b7caaeab4b198934b25",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-generalization-1",
      "headRefOid": "b85bdcd3f091b1271f7a68347d73f27249969f19",
      "mergeCommit": {
        "oid": "97ba8ae51e6c957d256dfd31160c2c31da1e63f3"
      }
    },
    {
      "number": 51,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE1MTYyMDM1",
      "title": "Proposed edits to Ben's edits.  Most are minor.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/51",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bemasc"
      ],
      "labels": [],
      "body": "Minor typo fixes and edits.  Add proxy behavior.  Add a/aaaa param clarifications.",
      "createdAt": "2019-09-07T03:18:45Z",
      "updatedAt": "2019-09-09T14:22:36Z",
      "closedAt": "2019-09-09T14:22:36Z",
      "mergedAt": "2019-09-09T14:22:36Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NTQwNDI3",
          "commit": {
            "abbreviatedOid": "71adab4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I have some thoughts on the substantive changes but I'll propose further revisions in another PR.",
          "createdAt": "2019-09-09T14:17:29Z",
          "updatedAt": "2019-09-09T14:22:20Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "It sounds like you are proposing to chase the SVCB chain outside the proxy, and then use the final SvcDomainName in the request-target.  That seems like a fine idea to me, but I think the recommendation should be weaker.  I don't want anyone to think that we're telling them to leak DNS queries to an untrusted resolver when using a proxy for privacy purposes.",
              "createdAt": "2019-09-09T14:17:29Z",
              "updatedAt": "2019-09-09T14:22:20Z"
            },
            {
              "originalPosition": 144,
              "body": "I think this requirement already exists, regardless of whether the client is IPv6-only.",
              "createdAt": "2019-09-09T14:21:01Z",
              "updatedAt": "2019-09-09T14:22:20Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-generalization-1",
      "baseRefOid": "e8662772d0dc217842e546917510b21d0d5d18ab",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-svcb-generalization-2",
      "headRefOid": "71adab4b3f62dd5b275327e7d90b8537fa923009",
      "mergeCommit": {
        "oid": "cdb286768e431fd274ca9707163de27e4a87fa22"
      }
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE1NTk0NzE2",
      "title": "Proxy and DNS64 text proposals",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/52",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-09-09T15:39:44Z",
      "updatedAt": "2019-09-09T20:23:04Z",
      "closedAt": "2019-09-09T20:23:04Z",
      "mergedAt": "2019-09-09T20:23:04Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NjczMjg0",
          "commit": {
            "abbreviatedOid": "7c6a390"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-09-09T17:43:37Z",
          "updatedAt": "2019-09-09T17:48:10Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Mention \"unless SVCB queries are also issued via the proxy (eg, via DoH)\"?\r\n\r\nPart of the need to specify the proxy behavior is to get ESNI to work properly.  Should we spell this out here (to explain why this proxy behavior is important), or perhaps later?  ie, part of getting ESNI to work means the keys and SvcDomainName corresponding to the connect need to match up.",
              "createdAt": "2019-09-09T17:43:37Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            },
            {
              "originalPosition": 63,
              "body": "I'm still solidly in the \"if you are skipping your local DNS resolver's DNS64, you MUST do rfc7050 synthesis\" camp.  There are tens (hundreds?) of millions of mobile end-users who will be broken otherwise for IPv4-only sites.  An alternative would be to say that a \"aaaa\" parameter MUST be included if an \"a\" parameter is present?  (Which puts the onus on the server-side.)  If we don't have a MUST on the client or the server, recursive resolvers will do DNS64 synthesis here so having a MUST NOT there is unrealistic.",
              "createdAt": "2019-09-09T17:47:55Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1Njk4NTc2",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T18:27:54Z",
          "updatedAt": "2019-09-09T18:27:55Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "OK, I added an explanation of motivations for the proxy section.",
              "createdAt": "2019-09-09T18:27:54Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1Njk5Nzkz",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T18:29:53Z",
          "updatedAt": "2019-09-09T18:29:53Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "> I'm still solidly in the \"if you are skipping your local DNS resolver's DNS64, you MUST do rfc7050 synthesis\" camp.\r\n\r\nMe too.\r\n\r\n> There are tens (hundreds?) of millions of mobile end-users who will be broken otherwise for IPv4-only sites.\r\n\r\nI don't think anyone will be broken, because the alternative is to just ignore address hints you can't use.\r\n\r\n> If we don't have a MUST on the client or the server...\r\n\r\nWe have a MUST on the client: \"clients MUST perform A and/or AAAA queries for SvcDomainName as in {{client-behavior}}\"",
              "createdAt": "2019-09-09T18:29:53Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzAzMTQy",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T18:35:35Z",
          "updatedAt": "2019-09-09T18:35:36Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Good point.  So perhaps:\r\n\r\nWhen only \"a\" parameters are present, IPv6-only clients may either synthesize IPv6 addresses as specified in {{!RFC7050}} or fall back to resolving SvcDomainName. To avoid this, \"aaaa\" parameters SHOULD be published whenever \"a\" parameters are published.\r\n\r\n?",
              "createdAt": "2019-09-09T18:35:36Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzA0MjQ1",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T18:37:37Z",
          "updatedAt": "2019-09-09T18:37:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Sounds good.  Do we want to highlight that proxies trying to do content filtering and assuming that what they are connecting to is the Host/SNI could get confused?  (Which are the same proxies that ESNI will make sad.)",
              "createdAt": "2019-09-09T18:37:37Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzA4Nzc5",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T18:45:38Z",
          "updatedAt": "2019-09-09T18:45:39Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Works for me.",
              "createdAt": "2019-09-09T18:45:39Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzM0NDAy",
          "commit": {
            "abbreviatedOid": "33a6aa0"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T19:34:19Z",
          "updatedAt": "2019-09-09T19:34:20Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I'd rather leave that alone if possible.  Using an \"affiliated resolver\" as described would cover that use case.",
              "createdAt": "2019-09-09T19:34:19Z",
              "updatedAt": "2019-09-09T19:46:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzQwNTky",
          "commit": {
            "abbreviatedOid": "1c2ae4b"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-09T19:46:48Z",
          "updatedAt": "2019-09-09T19:46:48Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "OK, I added a version of this.  Note that \"fallback\" is probably not an accurate depiction of what's going on here: the AAAA query MUST be issued regardless, and SHOULD be used as soon as it's ready, so the only question is whether to wait for it.",
              "createdAt": "2019-09-09T19:46:48Z",
              "updatedAt": "2019-09-09T19:46:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NzU0MzY2",
          "commit": {
            "abbreviatedOid": "1c2ae4b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-09T20:12:05Z",
          "updatedAt": "2019-09-09T20:12:05Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-generalization-1",
      "baseRefOid": "cdcaef2b5ca6b356487930fe5bb074a1900c1a2f",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-generalization-2",
      "headRefOid": "1c2ae4b6475269e42a39825b7567a174071e2ad1",
      "mergeCommit": {
        "oid": "c6e3586285307168b1e489a788ed2fdd489c5a37"
      }
    },
    {
      "number": 53,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIwNDA1Mzcz",
      "title": "Minor changes from a fresh read",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/53",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Use DNS terminology consistent with RFC 8499.\r\n* Renamed \"a\" and \"aaaa\" to \"ipv4hint\" and \"ipv6hint\"\r\n* Editorial changes for clarity and brevity.",
      "createdAt": "2019-09-23T17:40:49Z",
      "updatedAt": "2019-09-23T21:04:49Z",
      "closedAt": "2019-09-23T21:04:43Z",
      "mergedAt": "2019-09-23T21:04:43Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkxOTYzMDYw",
          "commit": {
            "abbreviatedOid": "4a3761d"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-23T18:15:22Z",
          "updatedAt": "2019-09-23T18:15:22Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkyMDUyNzYx",
          "commit": {
            "abbreviatedOid": "4a3761d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Look good to me!",
          "createdAt": "2019-09-23T21:03:28Z",
          "updatedAt": "2019-09-23T21:03:28Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "6c51820908de2f41cdcfe44d54b307afff9a07c4",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-proofread",
      "headRefOid": "4a3761db3988362d51fe08790d36af906a6ab088",
      "mergeCommit": {
        "oid": "0b6486523ea9720693329ff64d08519f1acd2600"
      }
    },
    {
      "number": 54,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIwNDg5MTI4",
      "title": "Define SVCB only within the IN class (issue #41)",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/54",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-09-23T21:28:44Z",
      "updatedAt": "2019-09-23T22:54:11Z",
      "closedAt": "2019-09-23T22:54:01Z",
      "mergedAt": "2019-09-23T22:54:01Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkyMDk2Nzcw",
          "commit": {
            "abbreviatedOid": "2c32c05"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-23T22:53:54Z",
          "updatedAt": "2019-09-23T22:53:54Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0b6486523ea9720693329ff64d08519f1acd2600",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-issue-41",
      "headRefOid": "2c32c053d7d041f866adc586a366ff6711a7590a",
      "mergeCommit": {
        "oid": "d280fdfee16bd03d8ec01a7de13e1b869a6f59da"
      }
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIxNDA5NDM5",
      "title": "Clarify racing behavior for A/AAAA and SVCB parallel queries. Give rationale to A/AAAA answer preference.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/56",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We have text in the ESNI draft which describes what to do when A/AAAA arrives before ESNI (equivalently SVCB). This attempts to port that text over. Please have a look!\r\n\r\n@enygren @MikeBishop @bemasc ",
      "createdAt": "2019-09-25T19:49:20Z",
      "updatedAt": "2019-10-09T14:26:14Z",
      "closedAt": "2019-09-27T13:51:24Z",
      "mergedAt": "2019-09-27T13:51:24Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for identifying this optimization and writing it up!",
          "createdAt": "2019-09-26T17:52:57Z",
          "updatedAt": "2019-09-26T17:52:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMzI3NDc1",
          "commit": {
            "abbreviatedOid": "d87fbb7"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T19:58:41Z",
          "updatedAt": "2019-09-25T19:58:42Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Since you pronounce this \"Ess Vee Cee Bee\" it should remain \"an\"",
              "createdAt": "2019-09-25T19:58:41Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMzI0OTg2",
          "commit": {
            "abbreviatedOid": "d87fbb7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-25T19:54:08Z",
          "updatedAt": "2019-09-26T14:13:07Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "The current logic just requires the client to wait for the SVCB response.  As you note, the SVCB response contains security-relevant information, so it's important not to miss it.\r\n\r\nIs the goal here to handle [DNS non-response](https://tools.ietf.org/html/draft-ietf-dnsop-no-response-issue-13)?  Even the most ancient DNS servers will return an error if there is a problem with the SVCB query.  Total non-response is a serious bug, but it does happen.\r\n\r\nAs that draft notes, the client [can measure this behavior](https://tools.ietf.org/html/draft-ietf-dnsop-no-response-issue-13#section-3.1.2).  If you think it's worth documenting a solution for this case, I'd prefer that approach, and I'd suggest doing it in a separate \"Compatibility\" section.",
              "createdAt": "2019-09-26T14:09:41Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 50,
              "body": "I think this would have a very high false-positive rate due to iterative lookups required to walk the SVCB chain.",
              "createdAt": "2019-09-26T14:10:22Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzc0OTE1",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T14:39:32Z",
          "updatedAt": "2019-09-26T14:39:33Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "> Is the goal here to handle DNS non-response?\r\n\r\nNot quite! The goal is to handle answers received out of order. It\u2019s an optimization. ",
              "createdAt": "2019-09-26T14:39:32Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzc4MzUy",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T14:44:03Z",
          "updatedAt": "2019-09-26T14:44:03Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "This is the delay in waiting for the first SVCB response, not the delay in abandoning ESNI altogether. The value is meant to give the SVCB answer time to arrive since, presumably, clients would prefer using that over the A/AAAA answer(s). Maybe I\u2019m misunderstanding your point. ",
              "createdAt": "2019-09-26T14:44:03Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzg3NTQ0",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T14:55:37Z",
          "updatedAt": "2019-09-26T14:55:37Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "This should also reference {#optimizations} and also allow the use of responses in the client DNS cache, not just hints.  In-particular due to this it may often be possible that the hint values aren't needed if the SvcDomainName already has valid A/AAAA records in-cache (eg, due to being part of the CNAME chain from the A/AAAA lookups issued in-parallel):\r\n\r\n> To avoid a delay for clients using a nonconforming recursive resolver, domain owners SHOULD use a single SVCB record whose SvcDomainName is in the origin hostname's CNAME chain if possible. This will ensure that the required address records are already present in the client's DNS cache as part of the responses to the address queries that were issued in parallel.",
              "createdAt": "2019-09-26T14:55:37Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzg3NzQ0",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T14:55:52Z",
          "updatedAt": "2019-09-26T14:55:52Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Typo.  s/SVCR/SVCB/",
              "createdAt": "2019-09-26T14:55:52Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzk4NTQx",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T15:10:00Z",
          "updatedAt": "2019-09-26T15:10:01Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Will fix!",
              "createdAt": "2019-09-26T15:10:00Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzk4OTk2",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T15:10:38Z",
          "updatedAt": "2019-09-26T15:10:38Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Yes, great point! I'll specify that cached answers are viable. (This content already exists in the {#optimizations} section, so a citation seems redundant?)",
              "createdAt": "2019-09-26T15:10:38Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzNzkxMjE0",
          "commit": {
            "abbreviatedOid": "cbaca38"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T15:00:06Z",
          "updatedAt": "2019-09-26T15:12:14Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "OK.  As your text notes, SVCB covers a variety of transports and use cases, so I think we need to express this with more generality, like:\r\n> If an A or AAAA response arrives before an SVCB response, the client MAY begin connection as if the SVCB query returned NODATA, but MUST NOT transmit any information that could be altered by an SVCB response until the SVCB response arrives. For example, ...(esni)... .\r\n\r\nAnd then separately\r\n> If an SVCB RR is consistent with an active or in-progress connection, the client MAY prefer that RR.",
              "createdAt": "2019-09-26T15:00:07Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 50,
              "body": "OK, got it.",
              "createdAt": "2019-09-26T15:02:09Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODIyODMy",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T15:44:17Z",
          "updatedAt": "2019-09-26T15:44:17Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Excellent suggestion! I tweaked your proposed text and added it. Please have a look!",
              "createdAt": "2019-09-26T15:44:17Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODI4MTA2",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T15:51:58Z",
          "updatedAt": "2019-09-26T15:59:12Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "I think \"ClientHello\" would be clearer than \"connection\"",
              "createdAt": "2019-09-26T15:51:58Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 58,
              "body": "I think changing between \"RR\" and \"record\" in this sentence is slightly confusing.",
              "createdAt": "2019-09-26T15:52:49Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 60,
              "body": "Maybe \"in-progress TCP connection\"?  \"proceed on that socket\"?  Also might want to mention ports...",
              "createdAt": "2019-09-26T15:53:47Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 64,
              "body": "I would prefer a definition of \"consistent\" where the SVCB record is also consistent with a socket if the AAAA for SvcDomainName matches the socket's IP.",
              "createdAt": "2019-09-26T15:55:57Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 66,
              "body": "This requirement is already present in the definition of `ipv*hint`.  Can we find a way to avoid having to repeat it?",
              "createdAt": "2019-09-26T15:58:25Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODM5NzMz",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:09:27Z",
          "updatedAt": "2019-09-26T16:09:28Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "I didn't want to bubble up too much of TLS, but if you're fine with it, that works for me!",
              "createdAt": "2019-09-26T16:09:27Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQwMDkw",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:10:02Z",
          "updatedAt": "2019-09-26T16:10:03Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I'll stick with record! (And I'll make that change in the rest of this section, too.)",
              "createdAt": "2019-09-26T16:10:02Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQxMzQw",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:12:07Z",
          "updatedAt": "2019-09-26T16:12:08Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I think a simplification is, \"TLS should proceed on that connection,\" so we don't need to get into socket or port details. Does that work?",
              "createdAt": "2019-09-26T16:12:08Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQ0MDYy",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:16:43Z",
          "updatedAt": "2019-09-26T16:16:43Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Hmm... is it? The paragraph here aims to say that if the hints are *not* present, then (1) look in the cache or (2) try to resolve. The definition of `ipv*hint` doesn't seem to cover this case since it assumes they're present, right?",
              "createdAt": "2019-09-26T16:16:43Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQ0MzM0",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:17:12Z",
          "updatedAt": "2019-09-26T16:17:13Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": ":+1: ",
              "createdAt": "2019-09-26T16:17:12Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQ5MTc0",
          "commit": {
            "abbreviatedOid": "e55a034"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:25:24Z",
          "updatedAt": "2019-09-26T16:25:24Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Agreed -- I made an attempt at adding one. Please have a look!",
              "createdAt": "2019-09-26T16:25:24Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODQ4NDQz",
          "commit": {
            "abbreviatedOid": "c832436"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:24:14Z",
          "updatedAt": "2019-09-26T16:40:23Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Maybe it would be clearer to say\r\n> if an SVCB record arrives with an \"esnikeys\" value and an IP address from \"ipv6hint\" or an attached AAAA record that matches an in-progress connection, ...\r\n\r\nThat doesn't cover every case it but clarifies what is meant by \"consistent\".",
              "createdAt": "2019-09-26T16:27:53Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 58,
              "body": "This definition is good but it leaves out ports and IP hints.",
              "createdAt": "2019-09-26T16:35:59Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 66,
              "body": "I don't think this paragraph is necessary.  The relevant requirements are already laid out in `{client-behavior}` and `{svcparamkeys-iphints}`.",
              "createdAt": "2019-09-26T16:37:30Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 49,
              "body": "The normative force here is unclear.  Is optimistic pre-connection RECOMMENDED?  What does it mean to wait for \"up to CD milliseconds\"?\r\n\r\nI would prefer for optimistic pre-connection to be OPTIONAL.",
              "createdAt": "2019-09-26T16:39:59Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODYxNTc0",
          "commit": {
            "abbreviatedOid": "e55a034"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:47:37Z",
          "updatedAt": "2019-09-26T16:47:38Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "As mentioned above, I don't think `{svcparamkeys-iphints}` handles this case. (It handles the opposite one, namely, where hints are present.) I think it's important to include this case (paragraph) to be complete. ",
              "createdAt": "2019-09-26T16:47:38Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODYyOTk3",
          "commit": {
            "abbreviatedOid": "e55a034"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:50:13Z",
          "updatedAt": "2019-09-26T16:50:13Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I think this is OBE.",
              "createdAt": "2019-09-26T16:50:13Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODY2MzE0",
          "commit": {
            "abbreviatedOid": "e55a034"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T16:55:50Z",
          "updatedAt": "2019-09-26T16:55:51Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "SHOULD and RECOMMENDED are the same per RFC2119, right? I'm fine bumping it down to optional advice, since it truly is optional.\r\n\r\n> What does it mean to wait for \"up to CD milliseconds\"?\r\n\r\nIs \"wait up to CD milliseconds before connecting\" not clear? It means, \"don't try and connect until CD ms go by.\" How can we make this more clear?",
              "createdAt": "2019-09-26T16:55:50Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODY5MTUw",
          "commit": {
            "abbreviatedOid": "9665bf7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:00:46Z",
          "updatedAt": "2019-09-26T17:00:46Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I can add ports, but I don't think IP hints are part of the definition. (Or, rather, they don't change things.) There's two cases for hints:\r\n\r\n1. The hints match C's address: Continue using C's address.\r\n2. The hints do not match C's address: The definition of the hints says that C's address should be used since it corresponds to the A/AAAA of SvcDomainName.\r\n\r\nSo I left them out and just included the port.",
              "createdAt": "2019-09-26T17:00:46Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODcwMTA1",
          "commit": {
            "abbreviatedOid": "9665bf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:02:25Z",
          "updatedAt": "2019-09-26T17:02:26Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "\"SHOULD wait ... before connecting\" is ambiguous.  Is it \"SHOULD wait and SHOULD connect\" or \"MAY connect but SHOULD wait\"?  I would prefer the latter.  If indirection (non-empty SvcDomainName) turns out to be the most common reason why SVCB is slow, the success rate for this trick might be too low to justify the complexity.\r\n\r\nIt sounds like \"wait *at least* CD milliseconds\" would better capture your meaning.",
              "createdAt": "2019-09-26T17:02:26Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODc1NDAy",
          "commit": {
            "abbreviatedOid": "9665bf7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:12:06Z",
          "updatedAt": "2019-09-26T17:19:33Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Under the current definition, this record is not consistent with this socket.  The IP hint matches, but consistency is defined in terms of the address record, not the IP hint.\r\n\r\nI think we should fix this by changing the definition, e.g.\r\n> An SVCB record is consistent with an active or in-progress connection if the client would attempt an equivalent connection when making use of that record.",
              "createdAt": "2019-09-26T17:12:06Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            },
            {
              "originalPosition": 72,
              "body": "Could you help me understand what the new requirement is here?  Or could we simplify this to \"If the SVCB record is not consistent with ... clients must proceed as described in step 3 of `{{client-behavior}}`.",
              "createdAt": "2019-09-26T17:19:29Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODgxMTI0",
          "commit": {
            "abbreviatedOid": "9665bf7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:22:08Z",
          "updatedAt": "2019-09-26T17:22:09Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "> It sounds like \"wait at least CD milliseconds\" would better capture your meaning.\r\n \r\nIndeed it would! I'll use that.",
              "createdAt": "2019-09-26T17:22:08Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODgxNjk0",
          "commit": {
            "abbreviatedOid": "9665bf7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:23:07Z",
          "updatedAt": "2019-09-26T17:23:07Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Simplifying like so is perfectly fine by me! I wanted to keep the blurb to close the dangling \"else\" case in this section. Good suggestion. :)",
              "createdAt": "2019-09-26T17:23:07Z",
              "updatedAt": "2019-09-26T17:47:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODk1NzU4",
          "commit": {
            "abbreviatedOid": "e602609"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-09-26T17:47:19Z",
          "updatedAt": "2019-09-26T17:47:20Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Fixed -- thanks!",
              "createdAt": "2019-09-26T17:47:19Z",
              "updatedAt": "2019-09-26T17:47:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODk4ODAz",
          "commit": {
            "abbreviatedOid": "e602609"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-26T17:52:30Z",
          "updatedAt": "2019-09-26T17:52:30Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk5NDUyOTY5",
          "commit": {
            "abbreviatedOid": "e602609"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-09T14:26:13Z",
          "updatedAt": "2019-10-09T14:26:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@tfpauly, you can also pronounce it \"Service Bee,\" in which case it's \"a\".  Ah, the linguistic implications of how we read acronyms....\r\n\r\nUnless we're going to specify a pronunciation in the draft?  Would have headed off a whole lot of \"giff/jiff\" nonsense.",
              "createdAt": "2019-10-09T14:26:13Z",
              "updatedAt": "2019-10-09T14:26:14Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "d280fdfee16bd03d8ec01a7de13e1b869a6f59da",
      "headRepository": "chris-wood/dns-alt-svc",
      "headRefName": "caw/edits",
      "headRefOid": "e6026096e93ff6ca7316dbaa74972ce16d418dcb",
      "mergeCommit": {
        "oid": "6deadcf323780c220f21edc0d5c5064fcafe4b56"
      }
    },
    {
      "number": 62,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIyMjAwMTI1",
      "title": "Polish the performance optimization section",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/62",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-09-27T14:49:35Z",
      "updatedAt": "2019-10-10T20:39:22Z",
      "closedAt": "2019-10-10T20:39:19Z",
      "mergedAt": "2019-10-10T20:39:19Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk5NTg0Mjcw",
          "commit": {
            "abbreviatedOid": "c249774"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2019-10-09T17:43:29Z",
          "updatedAt": "2019-10-09T17:43:36Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Might want to just rewrap the paragraph.",
              "createdAt": "2019-10-09T17:43:29Z",
              "updatedAt": "2019-10-10T17:19:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAwMjI4MDU1",
          "commit": {
            "abbreviatedOid": "e4d7531"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-10T17:20:56Z",
          "updatedAt": "2019-10-10T17:20:57Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Done",
              "createdAt": "2019-10-10T17:20:56Z",
              "updatedAt": "2019-10-10T17:20:57Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "6deadcf323780c220f21edc0d5c5064fcafe4b56",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-race",
      "headRefOid": "e4d7531c68f7d59acd613691efe2980006a8a834",
      "mergeCommit": {
        "oid": "94a17ceb976ae608e586ae1a1eeef8b9dd1b28cf"
      }
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0MzIyMzMwOTA0",
      "title": "Change the definition of AliasForm",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/64",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes checking the form of an RR faster and simpler,\r\nand ensures that sorting by priority does the right\r\nthing.\r\n\r\nFixes #55 ",
      "createdAt": "2019-09-27T21:16:26Z",
      "updatedAt": "2019-11-04T15:10:36Z",
      "closedAt": "2019-11-04T15:10:32Z",
      "mergedAt": "2019-11-04T15:10:32Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3NTMxNjg5",
          "commit": {
            "abbreviatedOid": "79e10af"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-04T14:56:08Z",
          "updatedAt": "2019-10-04T14:56:08Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Do we still need to declare that SvcFieldValue must be empty for AliasForm?  Or that clients must ignore SvcFieldValue in AliasForm?\r\n\r\nGenerally I worry a little about overloading SvcFieldPriority...",
              "createdAt": "2019-10-04T14:56:08Z",
              "updatedAt": "2019-11-04T15:08:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3NTQ4NTE1",
          "commit": {
            "abbreviatedOid": "79e10af"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-04T15:22:25Z",
          "updatedAt": "2019-10-04T15:22:26Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "My thought is to lean toward \"clients must ignore\", which is already implicit in the client behavior specification.  That would be forward-compatible if we eventually discover a use for SvcFieldValue in AliasForm.\r\n\r\nI admit that this proposal special-cases \"0\", but I think \"0 is special\" is an ancient CS tradition.  I particularly like that clients can just sort by priority and then walk down the sorted list in a simple way.",
              "createdAt": "2019-10-04T15:22:25Z",
              "updatedAt": "2019-11-04T15:08:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwODI2OTM0",
          "commit": {
            "abbreviatedOid": "79e10af"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This one would be good to get into a -01 version  (and may also be worth a discussion in dnsop to confirm this decision after the change is made).",
          "createdAt": "2019-11-03T16:43:55Z",
          "updatedAt": "2019-11-03T16:43:55Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "f22274b1a2289c33cd4f1b17488bfeca486ec28b",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-pri",
      "headRefOid": "52ccd9b5adf5c636fdd27eb9a55f4c2b7a93c4f7",
      "mergeCommit": {
        "oid": "a5c921ce10bdd3006b28edb73e5e2b11d7021d81"
      }
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI1NDYzMDI1",
      "title": "Account for semicolon in the presentation format",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/65",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Semicolon is the comment character in zone files.\r\n\r\nFixes #61",
      "createdAt": "2019-10-07T19:45:00Z",
      "updatedAt": "2019-10-13T02:20:32Z",
      "closedAt": "2019-10-13T02:20:32Z",
      "mergedAt": "2019-10-13T02:20:31Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxMDI5Njcz",
          "commit": {
            "abbreviatedOid": "5a0141b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-10-13T02:20:23Z",
          "updatedAt": "2019-10-13T02:20:23Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "6deadcf323780c220f21edc0d5c5064fcafe4b56",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-semicolon",
      "headRefOid": "5a0141bc4c777bfea75b8421f651ceba518def18",
      "mergeCommit": {
        "oid": "fd5feaa8e0807322448967768b8fc0e60979a5bd"
      }
    },
    {
      "number": 66,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI3MzgxNzQ0",
      "title": "Reduce the emphasis on conversion to Alt-Svc",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/66",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "HTTPSSVC is less nearly equivalent to Alt-Svc than\r\nit used to be, and conversion is not a requirement,\r\nnor does it seem to be the most likely path to\r\nimplementation.\r\n\r\nFixes #60 and #58.",
      "createdAt": "2019-10-11T22:00:54Z",
      "updatedAt": "2019-11-04T15:07:43Z",
      "closedAt": "2019-11-04T15:07:40Z",
      "mergedAt": "2019-11-04T15:07:40Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxMDI5NDU0",
          "commit": {
            "abbreviatedOid": "bb19232"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good, minus the comment on \"secure delivery\" being a not clearly defined term. ",
          "createdAt": "2019-10-13T02:09:58Z",
          "updatedAt": "2019-10-13T02:13:25Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Do we need to define \"secure delivery\"?  That term seems hand-wavy.",
              "createdAt": "2019-10-13T02:09:58Z",
              "updatedAt": "2019-11-04T15:06:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxMDc3MTAx",
          "commit": {
            "abbreviatedOid": "bb19232"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-14T00:16:41Z",
          "updatedAt": "2019-10-14T00:16:41Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "True.  (So does \"untrusted channels\" below.)  I guess we're really talking about authenticity?  But maybe the thing to do is to repeat \"untrusted channels\" here...",
              "createdAt": "2019-10-14T00:16:41Z",
              "updatedAt": "2019-11-04T15:06:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxMDgyMzgy",
          "commit": {
            "abbreviatedOid": "bb19232"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-14T01:30:37Z",
          "updatedAt": "2019-10-14T01:30:37Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Perhaps be consistent about \"untrusted channels\" but then define what that means somewhere, such as its first reference?",
              "createdAt": "2019-10-14T01:30:37Z",
              "updatedAt": "2019-11-04T15:06:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxOTQ0ODU4",
          "commit": {
            "abbreviatedOid": "27d6ce1"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-15T14:18:06Z",
          "updatedAt": "2019-10-15T14:18:07Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "OK, I've rephrased this to be about \"untrusted channels\".  Please review.",
              "createdAt": "2019-10-15T14:18:07Z",
              "updatedAt": "2019-11-04T15:06:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwODI2ODY2",
          "commit": {
            "abbreviatedOid": "27d6ce1"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-03T16:42:32Z",
          "updatedAt": "2019-11-03T16:42:32Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "3743162190f58b01e22c631dac5d072adeeefcc2",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-lessalt",
      "headRefOid": "2e56380479cbdc40a782a280f1a1ace507a18352",
      "mergeCommit": {
        "oid": "f22274b1a2289c33cd4f1b17488bfeca486ec28b"
      }
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI4MzU2NTU1",
      "title": "Explain the need for HTTPSSVC due to wildcards",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/67",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #59",
      "createdAt": "2019-10-15T16:19:05Z",
      "updatedAt": "2020-01-14T22:54:30Z",
      "closedAt": "2020-01-14T22:54:29Z",
      "mergedAt": "2020-01-14T22:54:29Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the explanation.  I've adjusted the text to include it.",
          "createdAt": "2019-11-04T16:07:54Z",
          "updatedAt": "2019-11-04T16:07:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwODI2Nzkx",
          "commit": {
            "abbreviatedOid": "d67d32c"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Beyond wildcards, another major benefit and driver for HTTPSSVC is that it allows CDNs to start returning HTTPSSVC without requiring their customers to point additional CNAMEs to them.  We may want to add text to this effect as well:\r\n\r\n\"HTTPSSVC also allows the targets of existing CNAME chains to start returning it (such as for CDN integrations), whereas an separate {{?Attrleaf}} name would require an additional integration step.\"",
          "createdAt": "2019-11-03T16:40:34Z",
          "updatedAt": "2019-11-03T16:40:34Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODkzMzM5",
          "commit": {
            "abbreviatedOid": "0c4d689"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-14T22:53:55Z",
          "updatedAt": "2020-01-14T22:53:55Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c72d6439f081bcfbeb8f65754896b3be9baaa657",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-wildcard",
      "headRefOid": "0c4d68919e391125398efe76fc563026f035c418",
      "mergeCommit": {
        "oid": "f72e4d2eadeb34c40cab09f5d463f5bfbefcefde"
      }
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0MzMyMTYxNDQ5",
      "title": "Expand on ESNI requirements for the server.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/68",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-10-24T17:34:23Z",
      "updatedAt": "2019-10-25T21:21:53Z",
      "closedAt": "2019-10-25T21:21:52Z",
      "mergedAt": "2019-10-25T21:21:52Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2Nzg0Njgw",
          "commit": {
            "abbreviatedOid": "acc13f8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-10-24T18:39:21Z",
          "updatedAt": "2019-10-24T18:40:14Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Nit: attacker _who_",
              "createdAt": "2019-10-24T18:39:21Z",
              "updatedAt": "2019-10-24T18:46:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA2Nzg4OTE1",
          "commit": {
            "abbreviatedOid": "6ee9bb3"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-24T18:46:30Z",
          "updatedAt": "2019-10-24T18:46:31Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "\ud83d\udc4d \r\n",
              "createdAt": "2019-10-24T18:46:30Z",
              "updatedAt": "2019-10-24T18:46:31Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "fd5feaa8e0807322448967768b8fc0e60979a5bd",
      "headRepository": "chris-wood/dns-alt-svc",
      "headRefName": "caw/esni-reqs",
      "headRefOid": "6ee9bb39748ae29be56d3a191be787efd7bfb91d",
      "mergeCommit": {
        "oid": "6b21e04f2e4f73b11f3205f5e97679ec1a28bcca"
      }
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0MzMyNjc0MDY0",
      "title": "Relax the text around when to use ipv[46]hints and when to",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/69",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "switch to the SrvDomainName IPs. There are two normative\r\nchanges here:\r\n\r\n- Relax the MUST look up SrvDomainName to SHOULD\r\n- Relax the SHOULD switch as soon as possible to MAY and\r\n  leave the SHOULD for future connections.\r\n\r\nThis makes HTTPSVC more closely match the previous ESNI behavior, which\r\nis appropriate if we are going to replace it.",
      "createdAt": "2019-10-25T20:43:19Z",
      "updatedAt": "2019-10-25T21:02:42Z",
      "closedAt": "2019-10-25T21:02:42Z",
      "mergedAt": "2019-10-25T21:02:42Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NDQ1NzYx",
          "commit": {
            "abbreviatedOid": "5d9e703"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-10-25T20:49:59Z",
          "updatedAt": "2019-10-25T20:49:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NDUwODE5",
          "commit": {
            "abbreviatedOid": "5d9e703"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-10-25T21:01:28Z",
          "updatedAt": "2019-10-25T21:01:28Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "fd5feaa8e0807322448967768b8fc0e60979a5bd",
      "headRepository": "ekr/dns-alt-svc",
      "headRefName": "relax_hints_text",
      "headRefOid": "5d9e70307e1e31fa8c200f5c5f21fff0dca35a3d",
      "mergeCommit": {
        "oid": "4fc26be1281dfe21bc3d90964a1ab3c4f9a799dd"
      }
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0MzMyNjg0MzU0",
      "title": "Clarify utility of IP hints",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/70",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-10-25T21:17:53Z",
      "updatedAt": "2020-01-14T22:56:56Z",
      "closedAt": "2020-01-14T22:56:56Z",
      "mergedAt": "2020-01-14T22:56:56Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "That's true, but I think it's probably offset by (1) the likelihood of hints being a suboptimal IP and (2) the increased response size.\r\n\r\nI've adjusted the language to be a bit less absolute.",
          "createdAt": "2019-11-04T16:17:44Z",
          "updatedAt": "2019-11-04T16:17:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwODI2NTE0",
          "commit": {
            "abbreviatedOid": "c81e581"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "The benefit might still come if one of the A/AAAA queries or responses was lost, or if the client is doing lookups synchronously.  (I think including this text/recommendation is fine, though?)  Maybe \"limited\" rather than \"no\"?",
          "createdAt": "2019-11-03T16:35:32Z",
          "updatedAt": "2019-11-03T16:35:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODk0NjI3",
          "commit": {
            "abbreviatedOid": "21976bf"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-14T22:56:48Z",
          "updatedAt": "2020-01-14T22:56:48Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c72d6439f081bcfbeb8f65754896b3be9baaa657",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hint",
      "headRefOid": "21976bf59fa9fca20f20515304c823900535d44f",
      "mergeCommit": {
        "oid": "9385e296539aea1c860e4e9dd9c0a5d0ec4c8804"
      }
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0MzMzMTc0Mzkz",
      "title": "ESNIKeys is now ESNIConfig",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/71",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Matches the terminology from https://github.com/tlswg/draft-ietf-tls-esni/pull/187\r\n\r\n@chris-wood FYI",
      "createdAt": "2019-10-28T15:22:58Z",
      "updatedAt": "2019-11-04T15:27:23Z",
      "closedAt": "2019-11-04T15:27:19Z",
      "mergedAt": "2019-11-04T15:27:19Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM -- thanks, @bemasc!",
          "createdAt": "2019-10-28T15:24:08Z",
          "updatedAt": "2019-10-28T15:24:08Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like that PR hasn't landed yet, so this one should probably wait until it's merged.",
          "createdAt": "2019-10-28T15:29:44Z",
          "updatedAt": "2019-10-28T15:29:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bemasc the ESNI draft PR has been merged, so this one should be good to go. One thing we might want to consider is the option for the field to represent a set of configurations, so perhaps we can rename this to \"esniconfigs\" and note that it's the concatenation of one or more ESNIConfig structures?",
          "createdAt": "2019-11-04T14:55:18Z",
          "updatedAt": "2019-11-04T14:55:18Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the reviews.\r\n\r\n> unless we want to just call it \"esni\" ?\r\n\r\nI would be OK with renaming to \"esni\", but I do wonder if it could be confusing, because the contents of this field are not the \"encrypted SNI\".  I would defer to the ESNI authors on preferred terminology.\r\n\r\n> perhaps we can rename this to \"esniconfigs\" and note that it's the concatenation of one or more ESNIConfig structures\r\n\r\nI would be OK with this, but it seems like a nontrivial change so I'm not going to attempt it in this PR.  I would also want to think a bit about what the use case is.  It occurs to me that a client with multiple `ESNIConfig`s could potentially have some kind of fallback behavior (but how does that interact with `esni_retry_request`?) or it could even put multiple `encrypted_server_name` extensions in the ClientHello.",
          "createdAt": "2019-11-04T15:27:13Z",
          "updatedAt": "2019-11-04T15:27:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3OTMyODEy",
          "commit": {
            "abbreviatedOid": "3aa992b"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-10-28T15:24:11Z",
          "updatedAt": "2019-10-28T15:24:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwODI2NDEx",
          "commit": {
            "abbreviatedOid": "3aa992b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks fine to me unless we want to just call it \"esni\" ?",
          "createdAt": "2019-11-03T16:33:18Z",
          "updatedAt": "2019-11-03T16:33:18Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "a5c921ce10bdd3006b28edb73e5e2b11d7021d81",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-esniconfig",
      "headRefOid": "bd3f6d747b56de8bd38a89784cea21715da56baa",
      "mergeCommit": {
        "oid": "759d0c63b6d2bcd110b04b0e8356e035c9ff5204"
      }
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0MzM2MzcyNDY2",
      "title": "Clean up handling of the \"http\" scheme",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/72",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-11-04T16:39:30Z",
      "updatedAt": "2020-01-15T22:47:41Z",
      "closedAt": "2020-01-15T22:47:41Z",
      "mergedAt": "2020-01-15T22:47:41Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODk2NjE3",
          "commit": {
            "abbreviatedOid": "53dcddb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Other than the \"what to do with :80\" in a URL this looks fine to merge.",
          "createdAt": "2020-01-14T23:01:23Z",
          "updatedAt": "2020-01-14T23:01:50Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "What if a URL is:\r\nhttp://www.example.com:80/foo.html\r\ndo we drop/ignore the \":80\" ?  I'd assume so and this might be good to call out here explicitly.",
              "createdAt": "2020-01-14T23:01:24Z",
              "updatedAt": "2020-01-15T22:46:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjg0MjMw",
          "commit": {
            "abbreviatedOid": "53dcddb"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T15:04:15Z",
          "updatedAt": "2020-01-15T15:04:16Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "The `{{hsts}}` link points to the section on \"HTTP Strict Transport Security\", which says \"If the \"http\" URL explicitly specifies port 80, specify port 443.\".  Do you think we need to repeat that instruction here?",
              "createdAt": "2020-01-15T15:04:15Z",
              "updatedAt": "2020-01-15T22:46:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTIxOTE4",
          "commit": {
            "abbreviatedOid": "53dcddb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T21:08:11Z",
          "updatedAt": "2020-01-15T21:08:11Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Seems safer to include?  (perhaps copy the text and reference back.)",
              "createdAt": "2020-01-15T21:08:11Z",
              "updatedAt": "2020-01-15T22:46:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTYyOTU0",
          "commit": {
            "abbreviatedOid": "be58871"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T22:22:57Z",
          "updatedAt": "2020-01-15T22:22:58Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I'd like to avoid repeating the URL conversion algorithm, but I've rephrased this to avoid implying that the conversion is a simple replacement of the scheme.",
              "createdAt": "2020-01-15T22:22:57Z",
              "updatedAt": "2020-01-15T22:46:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTcxNjg1",
          "commit": {
            "abbreviatedOid": "be58871"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-15T22:41:31Z",
          "updatedAt": "2020-01-15T22:41:31Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTc0MjU3",
          "commit": {
            "abbreviatedOid": "5d2fc03"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Resolved conflicts and merged.",
          "createdAt": "2020-01-15T22:47:29Z",
          "updatedAt": "2020-01-15T22:47:29Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c67737b96ac84347845f36c07ada1a1f6101bc00",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hsts",
      "headRefOid": "5d2fc032974e1fb4f1f4ddcf24ecbd1f39cc26ef",
      "mergeCommit": {
        "oid": "cf37c85890f1d46ffebff7da6556d5d4028b040b"
      }
    },
    {
      "number": 76,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQwNjA2OTcx",
      "title": "Remove recommendation to shorten the TTL",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/76",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Shortening the TTL doesn't actually solve the problem,\r\nbecause some caches ignore small TTL values.  Regardless of TTL,\r\nservers have to be able to deal with occasional use of expired\r\nrecords.  Shortening TTL is also bad for efficiency, so we\r\nshouldn't encourage it.\r\n\r\nFixes #74",
      "createdAt": "2019-11-13T18:34:08Z",
      "updatedAt": "2020-01-15T22:51:41Z",
      "closedAt": "2020-01-15T22:51:41Z",
      "mergedAt": "2020-01-15T22:51:41Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyMDMxNzEx",
          "commit": {
            "abbreviatedOid": "777eaab"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-12-13T18:11:27Z",
          "updatedAt": "2019-12-13T18:11:28Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "\"MUST NOT\" seems wrong here.  Maybe this can be non-normative operational guidance or SHOULD NOT.",
              "createdAt": "2019-12-13T18:11:28Z",
              "updatedAt": "2020-01-15T22:43:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODk4ODcw",
          "commit": {
            "abbreviatedOid": "777eaab"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Change \"MUST NOT\" to something softer and then this looks good to merge.",
          "createdAt": "2020-01-14T23:06:56Z",
          "updatedAt": "2020-01-14T23:07:21Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Agreed, especially as ESNI key rotations need to assume that clients will at least eventually re-resolve and not extend the lifetime indefinitely.  Perhaps \"[...], so server operators should assume that clients will continue to use records for some amount of time past their expiration.\"   ?",
              "createdAt": "2020-01-14T23:06:56Z",
              "updatedAt": "2020-01-15T22:43:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjk0MTcw",
          "commit": {
            "abbreviatedOid": "d7d9c81"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T15:17:06Z",
          "updatedAt": "2020-01-15T15:17:07Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I've adjusted the advice here.  PTAL.",
              "createdAt": "2020-01-15T15:17:07Z",
              "updatedAt": "2020-01-15T22:43:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTIzMzQ3",
          "commit": {
            "abbreviatedOid": "d7d9c81"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-01-15T21:10:51Z",
          "updatedAt": "2020-01-15T21:10:56Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Do we want to call out ESNI keys as well?\r\n\r\n\"Instead, server operators SHOULD continue operating the endpoints listed in expired records until they\r\nobserve that nearly all existing and new connections have migrated to the new endpoints (and are using new ESNI keys if applicable).\"",
              "createdAt": "2020-01-15T21:10:51Z",
              "updatedAt": "2020-01-15T22:43:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTcyNzUw",
          "commit": {
            "abbreviatedOid": "45567cc"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T22:43:58Z",
          "updatedAt": "2020-01-15T22:43:58Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I tried to capture this by changing the text to describe \"configurations\" instead of \"endpoints\".",
              "createdAt": "2020-01-15T22:43:58Z",
              "updatedAt": "2020-01-15T22:43:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTc2MTIz",
          "commit": {
            "abbreviatedOid": "45567cc"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-15T22:51:32Z",
          "updatedAt": "2020-01-15T22:51:32Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "973820db37d4577750bb23506eb23615bb6de5f7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-ttl",
      "headRefOid": "45567cc2ee2af889e23482190d6e38445e04d0e6",
      "mergeCommit": {
        "oid": "30d65cb6e04e2dedbb0d368b87db575c3ee01119"
      }
    },
    {
      "number": 77,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQwNjI4ODk4",
      "title": "Clarify various recommendations",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/77",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #75 and addresses comments in #40\r\n\r\n@puneetsood FYI",
      "createdAt": "2019-11-13T19:32:01Z",
      "updatedAt": "2020-01-15T22:50:13Z",
      "closedAt": "2020-01-15T22:50:13Z",
      "mergedAt": "2020-01-15T22:50:12Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE2NTM4MDI5",
          "commit": {
            "abbreviatedOid": "aa7d5d1"
          },
          "author": "puneetsood",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-13T20:35:40Z",
          "updatedAt": "2019-11-13T20:35:41Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "RRSIG, NSEC and NSEC3\r\n",
              "createdAt": "2019-11-13T20:35:41Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE2NTQzNzYx",
          "commit": {
            "abbreviatedOid": "ac4ac48"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-13T20:45:52Z",
          "updatedAt": "2019-11-13T20:45:53Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "Done",
              "createdAt": "2019-11-13T20:45:52Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTAyNTQ5",
          "commit": {
            "abbreviatedOid": "ac4ac48"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks fine other than the two review comments.",
          "createdAt": "2020-01-14T23:16:34Z",
          "updatedAt": "2020-01-14T23:18:23Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Is the negative behavior actually possible?    (Is it possible to add an empty record additionals?  I'm forgetting whether this is valid, but I can't recall seeing it done?  It may be that neither is possible?)    Also, is there a distinction to be made here between NODATA/NOERROR (the RRType doesn't exist) and NXDOMAIN?  Certainly, I don't believe the latter can be added to the Additional section? ",
              "createdAt": "2020-01-14T23:16:34Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            },
            {
              "originalPosition": 60,
              "body": "\"iterative\" or \"recursive\" ?  I typically see the latter used.",
              "createdAt": "2020-01-14T23:17:06Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzY3NjI3",
          "commit": {
            "abbreviatedOid": "ac4ac48"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T16:50:57Z",
          "updatedAt": "2020-01-15T16:53:58Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I think you're right.  Changed to \"recursive\".",
              "createdAt": "2020-01-15T16:50:58Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            },
            {
              "originalPosition": 67,
              "body": "> Is the negative behavior actually possible?\r\n\r\nI think it might be possible, but it's definitely not straightforward.  It would require the client to recapitulate the recursive resolution procedure, notice the absence of certain RRSets, and check for a corresponding SOA instead.  It's more obviously possible (but even more complicated) for signed zones.\r\n\r\nAnyway, I've significantly reworked this section to try to pin down the precise behavior of which records go where, what RCODE to return, etc.",
              "createdAt": "2020-01-15T16:53:22Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTI5MzY0",
          "commit": {
            "abbreviatedOid": "70681f0"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-01-15T21:21:32Z",
          "updatedAt": "2020-01-15T21:21:49Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Perhaps add:\r\n\r\n\"Recursive resolvers MAY respond to the SVCB Answer with \r\nonly a subset of Additional RRs when the response would\r\nbe larger than is permitted or when responding before fully chasing \r\ndependencies would improve performance.  Additional information from\r\nhigher priority ServiceForm records SHOULD be prioritized over lower priority\r\nServiceForm records.\"",
              "createdAt": "2020-01-15T21:21:33Z",
              "updatedAt": "2020-01-15T22:38:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTcwODU4",
          "commit": {
            "abbreviatedOid": "d2b6c49"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T22:39:39Z",
          "updatedAt": "2020-01-15T22:39:39Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "OK.  I added this to the Performance Optimizations section.",
              "createdAt": "2020-01-15T22:39:39Z",
              "updatedAt": "2020-01-15T22:39:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTc1MzI2",
          "commit": {
            "abbreviatedOid": "d2b6c49"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-15T22:49:45Z",
          "updatedAt": "2020-01-15T22:49:45Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "973820db37d4577750bb23506eb23615bb6de5f7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-clarity",
      "headRefOid": "d2b6c49297f6f28704f8357b357d799214926b1a",
      "mergeCommit": {
        "oid": "35ab6b46bd05ffcf354eaebbcc6b24a838de00dd"
      }
    },
    {
      "number": 78,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQwNjc4NDYw",
      "title": "Restore and clarify ALPN requirements",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/78",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #40",
      "createdAt": "2019-11-13T21:33:41Z",
      "updatedAt": "2019-11-14T18:17:02Z",
      "closedAt": "2019-11-14T18:16:59Z",
      "mergedAt": "2019-11-14T18:16:59Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE2NjgwMjEz",
          "commit": {
            "abbreviatedOid": "069110e"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-14T02:29:57Z",
          "updatedAt": "2019-11-14T02:29:57Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "973820db37d4577750bb23506eb23615bb6de5f7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-alpn",
      "headRefOid": "069110e07592011dc09aee7a1a7ab2e98a33244a",
      "mergeCommit": {
        "oid": "9c133e81c8932d4017a9cff040577c09273186c7"
      }
    },
    {
      "number": 85,
      "id": "MDExOlB1bGxSZXF1ZXN0MzQ1NDY4NTE4",
      "title": "Clarify examples",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/85",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #83, #84",
      "createdAt": "2019-11-25T23:31:09Z",
      "updatedAt": "2020-01-15T21:25:21Z",
      "closedAt": "2020-01-15T21:25:20Z",
      "mergedAt": "2020-01-15T21:25:20Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTA2NzA4",
          "commit": {
            "abbreviatedOid": "9a6507a"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good other than comments.",
          "createdAt": "2020-01-14T23:28:00Z",
          "updatedAt": "2020-01-14T23:40:36Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "replace \"new\" with \"added\" or \"additional\".  (\"new\" might imply that they replace the A and AAAA records.",
              "createdAt": "2020-01-14T23:28:00Z",
              "updatedAt": "2020-01-15T17:05:08Z"
            },
            {
              "originalPosition": 96,
              "body": "Perhaps explicitly call out that pool.svc.example. may be either the target of a CNAME chain or an alias?\r\nFor example:\r\n\r\n$ORIGIN example.com.\r\nwww    3600 IN CNAME pool.svc.example.\r\n .          3600 IN HTTPSSVC 0 pool.svc.example.\r\n",
              "createdAt": "2020-01-14T23:33:48Z",
              "updatedAt": "2020-01-15T17:05:08Z"
            },
            {
              "originalPosition": 96,
              "body": "It would also be good to clarify that neither form impacts the domain name in the origin.\r\nFor example:\r\n------\r\n\r\nSimilar to CNAME, HTTPSSVC aliases have no impact on the origin name.  When connecting, clients will continue to treat the authoritative origins as \"https://www.example.com\" and \"https://example.com\", respectively, and will validate TLS server certificates accordingly.",
              "createdAt": "2020-01-14T23:39:38Z",
              "updatedAt": "2020-01-15T17:05:08Z"
            },
            {
              "originalPosition": 89,
              "body": "Might be less confusing if we called it \"h3pool\" ?",
              "createdAt": "2020-01-14T23:40:23Z",
              "updatedAt": "2020-01-15T17:05:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzc3OTAx",
          "commit": {
            "abbreviatedOid": "9a6507a"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T17:05:25Z",
          "updatedAt": "2020-01-15T17:06:19Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Done",
              "createdAt": "2020-01-15T17:05:25Z",
              "updatedAt": "2020-01-15T17:06:20Z"
            },
            {
              "originalPosition": 89,
              "body": "Done",
              "createdAt": "2020-01-15T17:05:31Z",
              "updatedAt": "2020-01-15T17:06:20Z"
            },
            {
              "originalPosition": 96,
              "body": "> Perhaps explicitly call out that pool.svc.example. may be either the target of a CNAME chain or an alias?\r\n\r\nThis is already in the preceding example.\r\n\r\n> It would also be good to clarify that neither form impacts the domain name in the origin.\r\n\r\nAdded.",
              "createdAt": "2020-01-15T17:06:12Z",
              "updatedAt": "2020-01-15T17:06:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTMxNDQ5",
          "commit": {
            "abbreviatedOid": "7df0771"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-15T21:25:11Z",
          "updatedAt": "2020-01-15T21:25:11Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9c133e81c8932d4017a9cff040577c09273186c7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-examples",
      "headRefOid": "7df0771f219813df4f7ca13b96f1bee19eff37ea",
      "mergeCommit": {
        "oid": "c67737b96ac84347845f36c07ada1a1f6101bc00"
      }
    },
    {
      "number": 89,
      "id": "MDExOlB1bGxSZXF1ZXN0MzUwMjIyOTIw",
      "title": "Replace \"alpn\" with \"proto\"/\"no-proto\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/89",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change\r\n1. Makes it difficult for admins to accidentally drop support for HTTP/1.1 and HTTP/2\r\n2. Makes it easy for clients to determine the precise set of a protocols supported by an endpoint before attempting a connection.\r\n\r\nFixes #73",
      "createdAt": "2019-12-06T22:23:33Z",
      "updatedAt": "2020-01-24T16:16:45Z",
      "closedAt": "2020-01-24T16:16:45Z",
      "mergedAt": null,
      "mergedBy": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@enygren @MikeBishop I've updated this PR to reflect our conversation today.  PTAL.",
          "createdAt": "2019-12-13T21:13:28Z",
          "updatedAt": "2019-12-13T21:13:28Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Documenting here that I think we're leaning in the direction of transport/no-default-transport and will reject this alternate PR? ",
          "createdAt": "2020-01-24T14:41:06Z",
          "updatedAt": "2020-01-24T14:41:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI4NDkzMDkz",
          "commit": {
            "abbreviatedOid": "0f2b836"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-12-06T22:31:17Z",
          "updatedAt": "2019-12-06T22:31:25Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "What about DoH that mandates H2 support?  It also is entirely reasonable for service endpoints to support QUIC and not H2 or HTTP/1.1.  There are features of QUIC that make it attractive to have it on separate IPs that are QUIC-only.\r\n\r\nSpecial-casing http/1.1 seems reasonable, but I'm not sure this is the easiest way.  \r\nPerhaps:\r\nA service endpoint supporting \"h2\" SHOULD also support \"http/1.1\" unless either no service endpoints support \"http/1.1\" or a distinct service endpoint is specified for \"http/1.1\"\r\n\r\n?",
              "createdAt": "2019-12-06T22:31:17Z",
              "updatedAt": "2019-12-13T21:07:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI4NTA4NjAw",
          "commit": {
            "abbreviatedOid": "0f2b836"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-12-06T23:25:22Z",
          "updatedAt": "2019-12-06T23:25:23Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "> What about DoH that mandates H2 support?\r\n\r\nDoH doesn't recommend refusing connections over HTTP/1.1, so I don't think there's a conflict.\r\n\r\n> There are features of QUIC that make it attractive to have it on separate IPs that are QUIC-only.\r\n\r\nI'd be really interested to know more about this use case.  I've been hearing concerns from browser people that support for QUIC-only endpoints may be difficult to implement, because it complicates TCP fallback when UDP is failing.  I'm hoping that we can find a middle ground that addresses both needs.  (Feel free to switch to email if it's too long for this comment thread.)",
              "createdAt": "2019-12-06T23:25:22Z",
              "updatedAt": "2019-12-13T21:07:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM0NzUwMzA1",
          "commit": {
            "abbreviatedOid": "c4eebef"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "This looks good, with some small consistency nitpicks.",
          "createdAt": "2019-12-19T16:25:22Z",
          "updatedAt": "2019-12-19T16:30:13Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "This could go either way, but since there are existing implementations with supported protocols at codepoint 1, wouldn't it make sense to put `no-proto` at 0 instead?",
              "createdAt": "2019-12-19T16:25:22Z",
              "updatedAt": "2019-12-19T16:30:13Z"
            },
            {
              "originalPosition": 179,
              "body": "Slight nitpick -- TCP 8003 is not the same point as UDP 8003, so \"both ports\" might not be applicable.  This RRSET makes assertions about *three* ports.",
              "createdAt": "2019-12-19T16:27:12Z",
              "updatedAt": "2019-12-19T16:30:13Z"
            },
            {
              "originalPosition": 205,
              "body": "Also:\r\n\r\n- h2=\"svc3.example.net:8003\"; esniconfig=\"ABC...\"; ma=7200,\r\n- http/1.1=\"svc3.example.net:8003\"; esniconfig=\"ABC...\"; ma=7200,\r\n- http/1.1=\"svc.example.net:8002\"; esniconfig=\"123...\"; ma=7200",
              "createdAt": "2019-12-19T16:29:20Z",
              "updatedAt": "2019-12-19T16:30:13Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9c133e81c8932d4017a9cff040577c09273186c7",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-alpn",
      "headRefOid": "c4eebef4f76ee1ac45e7a518e4e402bc46804c51",
      "mergeCommit": null
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0MzUzNzA3Nzky",
      "title": "Make HTTPSSVC imply fatal certificate errors",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/93",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "MikeBishop",
        "enygren"
      ],
      "labels": [],
      "body": "This is the other half of HSTS. Closes #87.",
      "createdAt": "2019-12-16T18:48:14Z",
      "updatedAt": "2019-12-19T16:50:21Z",
      "closedAt": "2019-12-19T16:50:21Z",
      "mergedAt": "2019-12-19T16:50:21Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "HSTS uses MUST instead of SHOULD, but I've left it as SHOULD to align with the rest of HTTPSSVC.",
          "createdAt": "2019-12-16T18:48:41Z",
          "updatedAt": "2019-12-16T18:48:41Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMyODU4MTAy",
          "commit": {
            "abbreviatedOid": "26e93ec"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Works for me.",
          "createdAt": "2019-12-16T20:53:08Z",
          "updatedAt": "2019-12-16T20:53:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Nit: \"the client\"",
              "createdAt": "2019-12-16T20:53:08Z",
              "updatedAt": "2019-12-17T03:53:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzMzMDEzNDc4",
          "commit": {
            "abbreviatedOid": "7f911ef"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-12-17T03:53:35Z",
          "updatedAt": "2019-12-17T03:53:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Fixed.",
              "createdAt": "2019-12-17T03:53:35Z",
              "updatedAt": "2019-12-17T03:53:36Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM0NzU0NjYw",
          "commit": {
            "abbreviatedOid": "7f911ef"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-12-19T16:31:38Z",
          "updatedAt": "2019-12-19T16:31:38Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9c133e81c8932d4017a9cff040577c09273186c7",
      "headRepository": "davidben/dns-alt-svc",
      "headRefName": "hsts-part-two",
      "headRefOid": "7f911ef86f87fea50dd358f52339c2e9791a867e",
      "mergeCommit": {
        "oid": "127af38059c6eaa213c7b43edd86ad11108ec6cf"
      }
    },
    {
      "number": 94,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU0MjE3NjU3",
      "title": "Do not allow duplicate ipv4hint and ipv6hint parameters",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/94",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The contents already encode multiple addresses. We shouldn't have multiple ways to say the same thing.",
      "createdAt": "2019-12-17T17:10:45Z",
      "updatedAt": "2020-03-05T16:03:16Z",
      "closedAt": "2020-03-05T16:03:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dmcardle FYI",
          "createdAt": "2019-12-18T21:19:29Z",
          "updatedAt": "2019-12-18T21:19:29Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@enygren I believe you added this language in https://github.com/MikeBishop/dns-alt-svc/commit/9e1726cd142d32dde32d18d5c86db16f2e60d61a.  Do you think it's still needed?",
          "createdAt": "2019-12-19T20:42:00Z",
          "updatedAt": "2019-12-19T20:42:00Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I think if we address issue #95 and just recommend using a multi-value parameter (and have very clear specification that duplicate parameters must ignored in a deterministic manner) that this text isn't needed as-is.",
          "createdAt": "2019-12-19T20:53:18Z",
          "updatedAt": "2019-12-19T20:53:18Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we replace this with text elsewhere prohibiting the same parameter key from being used multiple times and specifying that one (first? last?) should be deterministically selected?",
          "createdAt": "2020-01-15T21:28:42Z",
          "updatedAt": "2020-01-15T21:28:42Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "(so pend this on #95 and close/wontfix if we merge that, or approve if we reject #95)",
          "createdAt": "2020-01-15T21:29:35Z",
          "updatedAt": "2020-01-15T21:29:35Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been merged in #109.",
          "createdAt": "2020-03-05T16:03:16Z",
          "updatedAt": "2020-03-05T16:03:16Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9c133e81c8932d4017a9cff040577c09273186c7",
      "headRepository": "davidben/dns-alt-svc",
      "headRefName": "duplicate-ip-hints",
      "headRefOid": "1c169dda92b382133f5c3b370f5f3b1c9ebc8aea",
      "mergeCommit": null
    },
    {
      "number": 97,
      "id": "MDExOlB1bGxSZXF1ZXN0MzU1MzM2Mjg3",
      "title": "Replace \"alpn\" with \"transport\"/\"no-default-transport\"",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/97",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is an alternative to #89, based on our discussion in #73.\r\n\r\nThis is the \"maximalist\" approach, including a new IANA registry and a (backwards-compatible) update to RFC 7838.\r\n\r\nCurrent text is definitely a rough cut.  We can clean up the requirements language if we agree this is the right direction.",
      "createdAt": "2019-12-19T20:23:31Z",
      "updatedAt": "2020-02-15T06:27:39Z",
      "closedAt": "2020-02-14T21:28:50Z",
      "mergedAt": "2020-02-14T21:28:50Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "In general I do like how this disconnects from Alt-Svc to address the problems mentioned by @davidben. However, I have two questions.\r\n\r\n1) I'm not sure what the purpose of `no-transport` is. Having a definition of default transports for a scheme sounds like something that will become very rapidly obsolete. Why not simply just use `transport`?\r\n\r\n2) How do we think this will interact with HTTP/3 or QUIC versions? In the TLS use-case, specifying `tls` is sufficient because TLS has an in-band version negotiation mechanism that does not cost round-trips, and ALPN also doesn't cost round trips. For QUIC, it's not quite certain we'll have that, so it might help to indicate the QUIC version? All that said, if we tighten this spec to have `quic` mean only QUICv1, then we can figure that out later.",
          "createdAt": "2019-12-19T22:25:45Z",
          "updatedAt": "2019-12-19T22:25:45Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "One thing to point out is that this causes the \"port\" parameter to have a dual meaning.   Suppose we build an HTTPSSVC record with `transport=quic transport=tls port=123` \u2014 the \"port\" parameter now applies to both UDP  and TCP!",
          "createdAt": "2019-12-19T22:30:13Z",
          "updatedAt": "2019-12-19T22:30:13Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "> Having a definition of default transports for a scheme sounds like something that will become very rapidly obsolete.\r\n\r\nIt quite possibly will.  The concern that prompted this set of designs was that someone might publish a record indicating H3 support and providing ESNI keys, and thereby restrict those keys to the H3 endpoint.  It then makes it possible to disable ESNI over TLS/TCP by blocking the QUIC connection.\r\n\r\nBy requiring the record to explicitly disclaim H1/H2 support if it intends not to offer them on a given record, this accidental misconfiguration and associated attack become harder.\r\n\r\nSpecifically, I think that a list of transports is likely to have more staying power than particular versions.  Even if, however unlikely this seems, H1 becomes obsolete in the near future, I suspect HTTP over TLS will still exist in some negotiable shape.",
          "createdAt": "2019-12-27T15:44:54Z",
          "updatedAt": "2019-12-27T15:44:54Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think `no-transport` addresses those concerns. They still apply, with or without this set manipulation complexity. It merely adds additional complexity concerns. Clients, in particular, parse untrusted input, so needless complexity in formats must be dropped.\r\n\r\nAt the end of the day, if it is possible to express an ESNI key for the QUIC path without an ESNI key for the TCP path, the client needs to do *something* in response to it. The draft currently says the interpretation is that you disable the TCP path, which is unacceptable (see https://github.com/MikeBishop/dns-alt-svc/issues/73#issuecomment-565681979). The alternative non-rejecting interpretation is to silently lose ESNI, which is also unacceptable.\r\n\r\nThus it *must* be considered a misconfiguration. Well-designed mechanisms make misconfigurations impossible to spell. Example: advertising QUIC is purely additive, without a `no-transport` option, like the original `Alternate-Protocol` header. `Alt-Svc`-like designs regress this.\r\n\r\nAlas, the reason for this regression was to support using different IPs for QUIC. We could do a two-level thing, with ESNI being specified at the top level, but this is perhaps a little goofy:\r\n```\r\ntcp.example.com; ipv4hint=1.2.3.4; port=443; esniconfigs=...; alt-transports={\r\n  quic={quic.example.com; ipv4hint=5.6.7.8; port=444},\r\n  fancyprotocol={fancyprotocol.example.com; ipv4hint=9.10.11.12; port=445},\r\n}\r\n```\r\n\r\nFailing that, we are left with a misconfiguration that is otherwise syntactically valid. This is unstable under ecosystem effects and, as noted, receivers still must do *something*. To counter this, the spec *must* define requirements to reject as loudly as feasible so administrators fix it. Here is a concrete possibility:\r\n* There is a single \"default\" transport: whatever you would have done with A/AAAA records. It is specified by omitting the `transport` parameter and doesn't need a name.\r\n* Remove the odd filtering and empty string rules around `esniconfig`. Optionally filtering an HTTPSSVC set complicates the rule below. If you want ESNI, you need to specify it on each HTTPSSVC arm. (A network attacker can always redirect you to the other machines, so having ESNI-capable and ESNI-incapable IPs that both speak for the public name is an inherently insecure configuration.)\r\n* In a set of HTTPSSVC records, there must be one entry for the default transport. If there isn't, this is a misconfiguration:\r\n  * Authoritative DNS servers reject this at config-time and do not advertise it at all.\r\n  * Config file formats SHOULD make it hard to express the misconfiguration. Maybe add a `no-default-transport` token and compile it out? This is a local decision, so pick something.\r\n  * If the authoritative DNS server is non-compliant, clients silently drop the record and fall back to A/AAAA. (Failing the HTTP request would be ideal but probably too much due to DNS caching.)",
          "createdAt": "2019-12-27T16:33:13Z",
          "updatedAt": "2019-12-27T16:42:58Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "> Thus it _must_ be considered a misconfiguration. Well-designed mechanisms make misconfigurations impossible to spell.\r\n\r\nAnd here, I think, is the distinction.  This isn't *necessarily* a misconfiguration, but it's potentially a misconfiguration.  The goal isn't to make H3-only impossible to say, it's to make it difficult to say accidentally.\r\n\r\nStill, I think it's probably a fair assertion that HTTP services are practically guaranteed to include a TCP endpoint for the foreseeable future, and making that sound alarm bells if violated is a goal we can all agree on.  Perhaps requiring you to have a TCP entry, even if that entry then says `null` as the destination, is a good compromise?",
          "createdAt": "2019-12-30T14:55:07Z",
          "updatedAt": "2019-12-30T14:55:07Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You quoted the conclusion without the rationale which led to it. The need for that to be a misconfiguration follows from the other two possible interpretations (drop TCP fallback or silently leak SNI) not working. A TCP entry with null destination would not work for browser scenarios, where site failures [impact users](https://www.w3.org/TR/html-design-principles/#priority-of-constituencies). I would push for Chrome to either ignore the spec and treat it as a misconfiguration regardless, or punt HTTPSSVC in favor of a more suitable record type.\r\n\r\nNote that, without ESNI, HTTPSSVC already doesn't allow an h3-only configuration anyway. A/AAAA path is always an implicit route. It only accidentally happens for ESNI-capable clients as a quirk of HTTPSSVC's ESNI filtering bits.",
          "createdAt": "2019-12-30T15:12:54Z",
          "updatedAt": "2019-12-30T15:15:32Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the comments.  I've uploaded a new version that tries to find a compromise between @MikeBishop and @davidben's suggestions.  I think the key line is:\r\n\r\n> clients MAY reject the entire SVCB RRSet and fall back to basic connection establishment if all of the RRs indicate \"no-default-transport\"\r\n\r\nThis is similar to some of @davidben's suggestions.\r\n\r\nWhile this doesn't make such RRSets non-compliant, it does clarify that clients are permitted to enforce such a requirement.  Assuming some popular clients adopt this behavior, such RRSets will be difficult to create accidentally, low-impact for end-users if admins do create them, and reasonably obvious to admins when testing or observing stats.\r\n\r\nI haven't made any changes to the \"esniconfig\" logic, because I believe it is a separable question, and probably best addressed in a different PR.\r\n\r\nPTAL!",
          "createdAt": "2020-01-03T22:09:26Z",
          "updatedAt": "2020-01-03T22:09:26Z"
        },
        {
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "body": "> One thing to point out is that this causes the \"port\" parameter to have a dual meaning. Suppose we build an HTTPSSVC record with `transport=quic transport=tls port=123` \u2014 the \"port\" parameter now applies to both UDP and TCP!\r\n\r\nAny thoughts on this problem?\r\n\r\nQuoting the introductory example from the latest patch:\r\n\r\n```\r\n    svc.example.net.  7200  IN HTTPSSVC 2 svc3.example.net. (\r\n        additional-transport=quic port=8003 esniconfig=\"...\" )\r\n    svc.example.net.  7200  IN HTTPSSVC 3 svc2.example.net. (\r\n                                        port=8002 esniconfig=\"...\" )\r\n```\r\nDoesn't the first HTTPSSVC record imply \"quic\" and \"tls\" are both available over port 8003 on svc3.example.net?  How would you express a different port for QUIC?",
          "createdAt": "2020-01-15T19:30:22Z",
          "updatedAt": "2020-01-15T19:30:22Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> > One thing to point out is that this causes the \"port\" parameter to have a dual meaning. Suppose we build an HTTPSSVC record with `transport=quic transport=tls port=123` \u2014 the \"port\" parameter now applies to both UDP and TCP!\r\n> \r\n> Any thoughts on this problem?\r\n\r\nI updated the text to allude to this (line 162).\r\n\r\n> Doesn't the first HTTPSSVC record imply \"quic\" and \"tls\" are both available over port 8003 on svc3.example.net?\r\n\r\nYes.  Sharing a port like this is a fairly common configuration (e.g. Google runs HTTPS over TLS and QUIC, both on port 443 on the same IPs).\r\n\r\n> How would you express a different port for QUIC?\r\n\r\nI would add `no-default-transport` to the QUIC RR, indicating that TLS is not supported.",
          "createdAt": "2020-01-15T19:38:24Z",
          "updatedAt": "2020-01-15T19:38:24Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I am liking the direction of this, but this is a broad-reaching enough change that we should expand this proposal/discussion to include a larger audience when we're ready. A bunch of comments and questions:\r\n\r\n    Can we name this something easier to write?\r\n    The usability of \"additional-transport\" seems poor.\r\n    Also, it is bikeshedding, but having a good name that\r\n    these tokens and their registry can be referred\r\n    to with and distinguished from ALPN seems critical.\r\n    (So far \"TP\" is the best I've come up with as writing\r\n    tp=tls is more readable.)\r\n\r\n    I'm not sure all encodings / data types have\r\n    an empty value as meaningful.\r\n\r\n    We should talk about the relationship of {additional-transport /\r\n    transport protocol} to ALPN. If we are going to go this path, this\r\n    seems like a broader conversation to have that we should loop people\r\n    like Martin Thompson and Tommy Pauly into as well. (There may be a\r\n    question as to whether there is value to also supporting ALPN, but\r\n    that may be unneeded complexity.) How this relates to Alt-Svc is\r\n    something that should likely have discussion in the HTTP and QUIC\r\n    (and perhaps TAPS?) working groups as well once there is a concrete\r\n    proposal. A question may be whether this should get factored into\r\n    its own document as this is a significant enough change to Alt-Svc.\r\n\r\n    One way to frame the difference may be that:\r\n        $TP (whatever we call it) defines a transport layer\r\n        or transport+security layer protocol (eg, TCP+TLS, UDP+QUIC).\r\n        Each of these provide a way to communicate over the network\r\n        in a way that a secure connection can be negotiated and\r\n        initiated.\r\n        ALPN is an aggreement as part of the $TP negotiation\r\n        to agree on the upper application-layer protocol\r\n        (eg, HTTP-over-HTTP/1.1 vs HTTP-over-HTTP/2).\r\n\r\n    Closely related to this is the relation of the \"transport protocol\r\n    set\" with ALPN values. (ie, are there cases where the client\r\n    needs to be aware which ALPN protocols within the transport\r\n    protocol an endpoint supports prior to connecting?)\r\n\r\n    Does it make sense that the transport registry is HTTPS-specific\r\n    or should a single registry be shared across HTTPS\r\n    and other protocols? I'd be inclined towards a single registry,\r\n    especially given the uniqueness properites with ALPN.\r\n    Having a bunch of registries all sharing a key space\r\n    sounds like a disaster.\r\n\r\n    There are legitimate use-cases for no-default-transport\r\n    outside ot web browsers. It would be entirely reasonable\r\n    for web services in a closed ecosystem to only support HTTP/3.\r\n\r\n    Do we need to update something to indicate that\r\n    the ALPN registry also doesn't collide with this?\r\n    Does IANA have a precedent for this? Would merging\r\n    these into a single registry with a new column (for if\r\n    it is a $TP or an ALPN) be easier?\r\n\r\n    We may want to be clear in our initial registry entries\r\n    that these are \"TLS over TCP\" and \"QUIC over UDP\" ?\r\n\r\n    We should provide guidance for how servers make\r\n    a transition for Alt-Svc from alpn to these additional-transports.\r\n    (ie, recommend that they include both, and we should probably\r\n    show this in our example.)\r\n\r\n    For \"tls\", what ALPN protocols does a server need to support?\r\n    Could a server be HTTP/2 only or HTTP/1.1 only? I guess\r\n    this will get figured out during the TLS handshake negotiation?\r\n    (How this relates to Alt-Svc is also important.)\r\n",
          "createdAt": "2020-01-15T21:05:07Z",
          "updatedAt": "2020-01-15T21:05:07Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "ALPN and Transport Protocol are different layers.  TLS and QUIC share a common property:  They are able to agree on an application protocol as part of their handshake.  Thus, our need for $TP is merely to point at the correct transport, and let its internal negotiation mechanisms handle the rest.  The open question is what happens if we\u2019re pointing to a transport that does not have an internal protocol negotiation mechanism, but could nonetheless have several protocols (or incompatible protocol versions) on it.  I would suggest that\u2019s no different from the world in TCP today, and the protocol has to do version agreement internal to itself.\r\n \r\nHowever, there may also be cases like the QUIC version where having a hint in advance which version to pick would potentially speed up the process.  Those cases can just define a new parameter, I suppose.\r\n \r\nAs to whether it makes sense to require a particular ALPN value, I\u2019d argue that it doesn\u2019t.  ALPN is capable of restricting itself on either side \u2013 the client won\u2019t offer anything it\u2019s not willing to use, and the server won\u2019t choose anything it\u2019s not happy with.  The only value in knowing the \u201cexpected\u201d outcome in advance is to then fail the connection if you don\u2019t like what the server selected, even though you offered it as a valid choice.  (Or, potentially, for use with 0-RTT; but then you know in advance from the previous session without need of a SVCB record.)\r\n",
          "createdAt": "2020-01-16T19:03:39Z",
          "updatedAt": "2020-01-16T19:03:39Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "(Skipping questions addressed by Mike's comment and reordering a few things...)\r\n\r\n> Can we name this something easier to write?\r\n> The usability of \"additional-transport\" seems poor.\r\n\r\nOK, I changed it to \"transport\".  I think that's short enough, and a lot more human-readable than \"tp\".\r\n\r\n> Do we need to update something to indicate that\r\n> the ALPN registry also doesn't collide with this?\r\n\r\nI decided to try to solve this by taking a different approach.  In the latest commit, this draft now defines a new fake ALPN (\"any\") to indicate that ALPN should be negotiated.  This makes the HTTPS-Transport and ALPN registries completely independent (not sharing a keyspace, no need for conflict avoidance).\r\n\r\n> If we are going to go this path, this seems like a broader conversation to have...\r\n\r\nWhatever we do, it'll definitely become a bigger conversation, but I'd like to rev the draft to include our best consensus idea before soliciting input from other WGs.\r\n\r\n> Does it make sense that the transport registry is HTTPS-specific\r\n> or should a single registry be shared across HTTPS\r\n> and other protocols? I'd be inclined towards a single registry,\r\n> especially given the uniqueness properites with ALPN.\r\n> Having a bunch of registries all sharing a key space\r\n> sounds like a disaster.\r\n\r\nOK, I've changed the design to avoid that disaster.  I do think it makes sense to have separate transport registries.  If we have a single transport registry that describes the allowable transports for HTTP, HTTPS, SSH, and DNS, it's going to be a real mess to explain which ones you can use when.\r\n\r\n> There are legitimate use-cases for no-default-transport\r\n> outside ot web browsers. It would be entirely reasonable\r\n> for web services in a closed ecosystem to only support HTTP/3.\r\n\r\nThe relevant text is:\r\n```\r\nFor compatibility with clients that require default transports,\r\nzone operators SHOULD ensure that at least one RR in each RRSet supports the\r\ndefault transports.\r\n```\r\nI think it's clear enough that one is free to violate that SHOULD in a closed ecosystem.\r\n\r\n> We may want to be clear in our initial registry entries\r\n> that these are \"TLS over TCP\" and \"QUIC over UDP\" ?\r\n\r\nThe \"TLS\" line is referenced to RFC 2818, which seems like it ought to be the place for that to be specified.  I admit that RFC 2818 could be a little clearer about that, but personally I don't think it's ambiguous.  Hopefully the HTTP-over-QUIC RFC will be clearer.  If you think it's unclear, I guess we could add a \"meaning\" column to the registry.\r\n\r\n> We should provide guidance for how servers make\r\n> a transition for Alt-Svc from alpn to these additional-transports.\r\n> (ie, recommend that they include both,\r\n\r\nDone\r\n\r\n> and we should probably show this in our example.)\r\n\r\nI didn't add an example of this, but we can if you want.  It gets us back into some thorny territory with esniconfig...",
          "createdAt": "2020-01-17T21:30:47Z",
          "updatedAt": "2020-01-17T21:30:47Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been rebased and substantially simplified. There is no longer any need for the \"any\" ALPN and other interaction with Alt-Svc.  PTAL.",
          "createdAt": "2020-01-24T19:41:07Z",
          "updatedAt": "2020-01-24T19:41:07Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "It sounds like we have a lot more to discuss in the finer details of this arrangement, but it's clear that this PR is closer to our consensus than what's in `master`, so I'm going merge this as-is.  We can improve the representation in followup PRs.",
          "createdAt": "2020-02-14T21:28:38Z",
          "updatedAt": "2020-02-14T21:28:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTAzNTky",
          "commit": {
            "abbreviatedOid": "65f3ba2"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-15T20:34:55Z",
          "updatedAt": "2020-01-15T21:05:24Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Not all SvcParm types have wire formats where \"empty value\" is meaningful or well-defined (eg, integers or IPs).  We should either qualify this here and later on.  Does this add too much complexity?",
              "createdAt": "2020-01-15T20:34:55Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            },
            {
              "originalPosition": 129,
              "body": "nit: what is \"transport\" vs \"protocol\" here?  Perhaps say \"any compatible transport protocols\" ?",
              "createdAt": "2020-01-15T20:40:23Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODQxOTc2",
          "commit": {
            "abbreviatedOid": "908c699"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-17T21:07:32Z",
          "updatedAt": "2020-01-17T21:07:33Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "I added notes to the keys that don't support empty values.  Hopefully that should be enough to make it clear.\r\n\r\nI made this adjustment because `transport=quic no-default-transport` seemed a lot clearer than `transport=quic no-default-transport=\"\"`.  In general, I think its worth investing in clarity for zone file editors, since zone files get edited a lot more often than DNS software.",
              "createdAt": "2020-01-17T21:07:33Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODQyMDE0",
          "commit": {
            "abbreviatedOid": "908c699"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-17T21:07:38Z",
          "updatedAt": "2020-01-17T21:07:38Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Done.",
              "createdAt": "2020-01-17T21:07:38Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTg1MzI4",
          "commit": {
            "abbreviatedOid": "908c699"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-24T14:24:12Z",
          "updatedAt": "2020-01-24T14:24:13Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Perhaps \"supports HTTPS-over-QUIC (HTTP/3) in addition to HTTPS over TLS\" ?",
              "createdAt": "2020-01-24T14:24:12Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTk1OTgx",
          "commit": {
            "abbreviatedOid": "908c699"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-24T14:39:41Z",
          "updatedAt": "2020-01-24T14:39:42Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Adding a \"meaning\" column to the registry may make sense.\r\n\r\nIt seems like we're making enough changes to Alt-Svc here that we may need to split some of these out to an alt-svc-bis draft?   Switching Alt-Svc to use ALPN=any but focusing on transport may make sense.  At a minimum we likely should include a section here on how filtering works for Alt-Svc in a world where records are like:\r\n\r\n       Alt-Svc: any=\"pool.service.example:443\" transport=quic, any=\"pool.service.example:443\" transport=tls \r\n\r\nAs part of this change we should include a reminder that clients using HTTPSSVC or AltSvc with \"any\" MUST still send TLS SNI (or ESNI when esniconfig is specified).\r\n\r\nGoing back to a question from @MikeBishop, do we still want a hinting/filtering mechanism for ALPN?  This can be useful for letting clients using an experimental protocol know that it is available on a pool with a different name.  That has been one Alt-Svc use-case for ALPN.  Or does this add too much complexity?",
              "createdAt": "2020-01-24T14:39:41Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzA4MTQz",
          "commit": {
            "abbreviatedOid": "aaa918c"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-04T21:18:22Z",
          "updatedAt": "2020-02-04T22:25:47Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "> This can be useful for letting clients using an experimental protocol know that it is available on a pool with a different name.\r\n\r\nNote that such a deployment loses downgrade-protection of ALPN. So does a temporary heterogeneous deployment during rollout or rollback on a multi-instance service, but I think such situations are better understood to be temporary.",
              "createdAt": "2020-02-04T21:18:22Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            },
            {
              "originalPosition": 127,
              "body": "Having one port parameter describe all transports is kind of odd, both when it's TCP vs UDP and UDP vs UDP. For TCP/TLS/H{1.1,2} the port is a TCP port. For UDP/QUIC/H3, the port is a UDP port. That maps TCP and UDP ports onto each other, which seems a little odd? But at least it's distinguishable because the endpoint layer branches.\r\n\r\nSuppose we were to later define UDP/VeryFancyProto/H4. This design more-or-less forces all new UDP-based protocols for transporting HTTP to share protocol invariants with QUIC. You get exactly two sets of protocol invariants, one for TCP and one for UDP, and then it starts getting very inconvenient. This is... odd.\r\n\r\nOn the other hand, if we were to define UDP/QUICv2/H3 such that QUIC and QUICv2 *did* expect to run together *but* benefited from an out-of-band version hint (if QUICv2 is purely in-band negotiation like TLS, then there is no need to incorporate it into HTTPSSVC at all), then this works as separate transports. Although it is interesting to note that, in that picture, UDP/QUIC and UDP/QUICv2 have a very different relationship from TCP/TLS. (I don't know how `Alternate-Protocol` expressed this, but Google's `Alt-Svc` advertisement for gQUIC seems to use a separate `v` attribute for denoting versions.)\r\n\r\nAn alternate design would have been to instead:\r\n1. Get rid of `no-default-transport`.\r\n2. `transport` is an optional single-valued token. If omitted, it is the default transport.\r\n3. `port` and other attributes modify just the one transport.\r\n4. Replace the \"if all of the RRs indicate `no-default-transport`\" with \"if none of the RRs indicates the default transport\".\r\n\r\nThis avoids the port oddities and flattens the structure a bit, which seems simpler to me. One wriggle is it requires duplicating the ESNI config per transport whereas this design avoids it *in cases where the port confusion is what you wanted*. (Clllleeeeaaarrly we need a more complicated encoding! :-D)\r\n\r\nAnother design would be some odd two-level thing where transports have associated attributes.\r\n\r\n@DavidSchinazi I'm curious what your thoughts on all this is. Most of the oddities pertain to QUIC.",
              "createdAt": "2020-02-04T21:29:36Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            },
            {
              "originalPosition": 141,
              "body": "s/SHOULD/MUST/\r\n\r\nIt's a syntax error. Syntax errors are fatal.",
              "createdAt": "2020-02-04T22:24:18Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODk5ODUw",
          "commit": {
            "abbreviatedOid": "aaa918c"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-05T17:23:05Z",
          "updatedAt": "2020-02-05T17:23:05Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "> This design more-or-less forces all new UDP-based protocols for transporting HTTP to share protocol invariants with QUIC.\r\n\r\nI'm not quite sure what this means, or if it's true.  There may indeed be two UDP transports that can't share a port.  That's fine; they can just go in separate RRs with different port numbers.\r\n\r\nWe could certainly restructure this to require one transport per RR, or to express multiple ports per RR (TCP and UDP or per-transport), but the former seems inefficient, and the latter seems overcomplicated.  Sharing a port number between TCP and UDP may not be precisely principled, but in practice IANA [almost always](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers) assigns both ports to the same service, so I think it's fairly intuitive.\r\n\r\nAs you noted, sharing an RR is mostly a space optimization, especially with ESNIConfig.  My guess is that the majority of IPs that have QUIC and TLS with the same ESNIConfig will also have them at the same port number, so one-port-number-per-RR gets us most of the space savings with the least complexity.",
              "createdAt": "2020-02-05T17:23:05Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTIxMDA3",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-05T17:55:32Z",
          "updatedAt": "2020-02-05T17:55:33Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Done",
              "createdAt": "2020-02-05T17:55:32Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTU3NzE1",
          "commit": {
            "abbreviatedOid": "aaa918c"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-05T18:52:07Z",
          "updatedAt": "2020-02-05T18:52:08Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Sorry, I should have elaborated on \"more-or-less\". Encoding separate RRs for port purposes in this proposal is fussy (you need a no-default-transport) and costs a duplicate ESNI config. (Which we presumably care about or we'd go with the flattened design.) That means there will be pressure at the protocol design phase to share invariants, which means we effectively are saying this.\r\n\r\nThat's not to say this is fatal. Maybe each scheme only needs two sets of protocol invariants? QUIC folks have no doubt thought about this more than me so I'd like to know what they think. My main position is that, if we're strongly incentivizing this, we need to recognize that and decide we're okay with it, and not hide behind the verbose alternative existing.",
              "createdAt": "2020-02-05T18:52:07Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjQ4MjQz",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-10T20:43:06Z",
          "updatedAt": "2020-02-10T20:43:06Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "> Encoding separate RRs for port purposes in this proposal is fussy (you need a no-default-transport) and costs a duplicate ESNI config. (Which we presumably care about or we'd go with the flattened design.)\r\n\r\nAgreed, although this syntax was also motivated by simplicity for zone owners when QUIC and TLS share all parameters, which we took to be the common case.\r\n\r\n> That means there will be pressure at the protocol design phase to share invariants, which means we effectively are saying this.\r\n\r\nI think this is at most a weak incentive, not a significant pressure on future designs.  Suppose NOTQUIC is a secure transport protocol over UDP that cannot share a port with QUIC.  (I think this is an unlikely scenario but we should nonetheless support it.)  In the current design, this would be written as\r\n```\r\n... port=1234 transport=quic esniconfig=\"abc...\" ; TLS and QUIC\r\n... port=4321 transport=notquic no-default-transport esniconfig=\"def...\" ; NOTQUIC\r\n```\r\nIn a flattened design, this would instead be\r\n```\r\n... port=1234 esniconfig=\"abc...\" ; TLS\r\n... port=1234 transport=quic esniconfig=\"abc...\" ; QUIC\r\n... port=4321 transport=notquic esniconfig=\"def...\" ; NOTQUIC\r\n```\r\nI don't see a major advantage in comprehensibility between these options.  On balance, I prefer the former; duplicating the ESNIConfig seems to invite typos and misconfigurations that will not easily be caught.\r\n\r\nBTW, even if NOTQUIC can't share a UDP port with QUIC, users can still avoid `no-default-transport` by running TLS on the TCP port of the same number.  This seems like a reasonable, perhaps likely configuration, for the same reasons that it appears to be popular with QUIC.",
              "createdAt": "2020-02-10T20:43:06Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzkzODE2",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-02-11T02:43:20Z",
          "updatedAt": "2020-02-11T02:43:33Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "The problem with the half-flattened scheme is this design is extremely inconsistent in its principles. It simultaneously believes `no-default-transport` is a rare misfeature only to be used for questionable deployment patterns, at the same time it is a pattern for new protocols. It then simultaneously believes duplicating the ESNIConfig is a problem and should be avoided, yet recommends it as a pattern for new protocols. All this mixup then pressures new protocols to share UDP ports to avoid all these design flaws, yet it also insists this pressure doesn't exist.\r\n\r\n> BTW, even if NOTQUIC can't share a UDP port with QUIC, users can still avoid no-default-transport by running TLS on the TCP port of the same number. This seems like a reasonable, perhaps likely configuration, for the same reasons that it appears to be popular with QUIC.\r\n\r\nNo, this is not a reasonable or likely configuration. Moreover, it's dangerous because it further incentivizes existing TCP HTTP servers to not check port numbers against the HTTP `Host` header. (This check is a security requirement for sites running different origins on different ports as it's the only thing preventing the network from mixing ports up.)\r\n\r\nIt's popular with QUIC because, barring any reason to pick another port, 443 is the natural one in order to match with the origin. HTTPSSVC having broken all these standard assumption is not going to suddenly make people want to deploy TCP over the corresponding port for NOTQUIC. That doesn't really make any sense at all.",
              "createdAt": "2020-02-11T02:43:20Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Nzk2OTQ4",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-11T16:20:37Z",
          "updatedAt": "2020-02-11T16:20:37Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "It sounds like you're proposing to drop the requirement that zone authors need to take an explicit action to disable TLS support, as in your flattened example in this thread.  If you're willing to drop that requirement, I agree that we can find a more principled design.\r\n\r\nPersonally, I would lean toward more multiplexing, e.g.\r\n```\r\n... ports=tls:1234,quic:1234 esniconfig=\"abc...\"\r\n... ports=notquic:4321 esniconfig=\"def...\"\r\n```",
              "createdAt": "2020-02-11T16:20:37Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODE1OTUw",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-11T16:43:09Z",
          "updatedAt": "2020-02-11T16:43:09Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "I'm not a fan of multiplexing based on port and making it primary in the model.  There may be transports in the future that move away from numeric ports or have a different model that isn't port-based.  As an example, if we had a future L4 protocol assignment for some QUIC successor (rather than requiring it to be over UDP).",
              "createdAt": "2020-02-11T16:43:09Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODQzMjkw",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-11T17:17:44Z",
          "updatedAt": "2020-02-11T17:17:44Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "I think extension to portless protocols would work fine in this model.  It would just require defining one or more new SvcParamKeys.  For example, we could have\r\n```\r\n... ports=tls:443,quic:443,quic:8443 l4quic esniconfig=\"abc...\"\r\n```\r\nwhere `l4quic` is a new empty-valued SvcParamKey indicating support for the (hypothetical) QUIC-at-L4 protocol.\r\n\r\nBasically, ServiceForm is extensible enough that we can probably convey whatever information we need to in the future.",
              "createdAt": "2020-02-11T17:17:44Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTExODYw",
          "commit": {
            "abbreviatedOid": "fb79fba"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-14T17:46:10Z",
          "updatedAt": "2020-02-14T17:46:11Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Perhaps add:\r\n\"The wire format for the value of no-default-transport is empty (a SvcParamValue with a length of zero octets).\"\r\nor something else to be crystal clear that value is still present in the wire format but empty.",
              "createdAt": "2020-02-14T17:46:10Z",
              "updatedAt": "2020-02-14T19:34:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTcyNjUx",
          "commit": {
            "abbreviatedOid": "566806a"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-14T19:34:39Z",
          "updatedAt": "2020-02-14T19:34:40Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "OK, I added clarifying text to this effect.",
              "createdAt": "2020-02-14T19:34:39Z",
              "updatedAt": "2020-02-14T19:34:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjI2NDgw",
          "commit": {
            "abbreviatedOid": "566806a"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-14T21:22:53Z",
          "updatedAt": "2020-02-14T21:22:53Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzI5Nzc3",
          "commit": {
            "abbreviatedOid": "566806a"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-15T06:27:39Z",
          "updatedAt": "2020-02-15T06:27:39Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "> It sounds like you're proposing to drop the requirement that zone authors need to take an explicit action to disable TLS support, as in your flattened example in this thread.\r\n\r\nI mean, I never requested that property to begin with. :-) I think something got lost in translation here.\r\n\r\nThe deployability requirement is that is *impossible* to disable the default transport. Possible with explicit action doesn't solve anything. It should either be syntactically impossible (preferred) or, if that can't be avoided, it needs to be easy to describe and detect (that's why I've been trying to avoid giving it a name that differs by scheme), with the expectation that authoritative servers reject it at the config level and clients reject it if they see it.\r\n\r\nFrom there, it would be nice if the wrong thing was easy to avoid, but if authoritatives perform the mandatory checks, that helps smooth things over a bit.\r\n\r\nLet's sync after the long weekend. GitHub PRs aren't a great medium for design discussions. I think we need something more synchronous and high-bandwidth. This DNS record has gotten far too complicated. We need to cut down the flexibility by an order of magnitude before this is viable.",
              "createdAt": "2020-02-15T06:27:39Z",
              "updatedAt": "2020-02-15T06:27:39Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "bc40093d09c5bcf09c827d2ab438266b781b26dd",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-transport",
      "headRefOid": "566806a329b5c326bff1de8a4268d4079bc929b8",
      "mergeCommit": {
        "oid": "21c1a83dcb298abe5758ccea4f45cc37a8bc0275"
      }
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0MzYzMTkxMzUy",
      "title": "Alt-Used example",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/102",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Add an example for Alt-Used per issue #101  (although exact details may need to change depending on other PRs around alpn vs transport).\r\n* Fix reference to client-behavior",
      "createdAt": "2020-01-15T15:19:56Z",
      "updatedAt": "2020-06-18T07:09:47Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9385e296539aea1c860e4e9dd9c0a5d0ec4c8804",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-alt-used-example",
      "headRefOid": "6d2598e9ce3c40356d1ad7d1e9bf670e0be4f9e1",
      "closedAt": "2020-04-13T20:55:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sending this header has some interesting tracking consequences. Your DNS resolver can unilaterally send a common cross-site identifier to every site by faking an HTTPSSVC name. The DNS resolver would answer for that name too, so it doesn't matter if the name is fake. More generally, this is feeding an insecure value into a header in a secure context, which is odd.\r\n\r\n(Chrome doesn't send `Alt-Used` for Alt-Svc either, though I don't know what the reasoning was at the time.)",
          "createdAt": "2020-01-15T22:51:23Z",
          "updatedAt": "2020-01-15T22:51:40Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "In Alt-Svc days, the argument was that the issuer of Alt-Svc could produce tracking anyway -- they give you a name that resolves to an IPv6 address with the host portion being the identifier they want to use, then serve over the whole prefix.  The argument was that Alt-Used didn't give them any additional information versus that structure.  (However, it permits it to work over IPv4, which seems like a sufficient increase in capability to warrant some caution.)\r\n\r\nHowever, that requires control of the actual IP address.  The recipient of Alt-Used need not be the issuer of the Alt-Svc record if the alternative can come from DNS.  Seems like another incarnation of these records not being authenticated as being from the affected domain.",
          "createdAt": "2020-01-16T19:08:24Z",
          "updatedAt": "2020-01-16T19:08:24Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Per #107, it looks like we're going to try a different direction for this. @enygren, would you like to close this PR?",
          "createdAt": "2020-01-24T20:01:52Z",
          "updatedAt": "2020-01-24T20:01:52Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Abandoning this for now, pending discussion of issue 107.",
          "createdAt": "2020-04-13T20:55:28Z",
          "updatedAt": "2020-04-13T20:55:28Z"
        },
        {
          "author": "bagder",
          "authorAssociation": "NONE",
          "body": "Not exactly the right place for this but note that `Alt-Used` is slightly flawed in that it doesn't mention protocol/alpn so when we switch *nothing but* h2 to h3 to the same host name and port number, Cloudflare for example will wrongly think it is a loop.",
          "createdAt": "2020-06-18T07:09:47Z",
          "updatedAt": "2020-06-18T07:09:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzgyNDMx",
          "commit": {
            "abbreviatedOid": "e5dd062"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-15T17:12:01Z",
          "updatedAt": "2020-01-15T17:13:00Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I would suggest \"(and https://pool.svc.example, if it exists)\", since there's no particular need for that origin to exist.",
              "createdAt": "2020-01-15T17:12:01Z",
              "updatedAt": "2020-01-15T21:31:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 104,
      "id": "MDExOlB1bGxSZXF1ZXN0MzYzNzg5NTc1",
      "title": "Generalize SERVFAIL handling for security",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/104",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #103",
      "createdAt": "2020-01-16T18:41:00Z",
      "updatedAt": "2020-02-03T23:37:06Z",
      "closedAt": "2020-01-27T21:08:45Z",
      "mergedAt": "2020-01-27T21:08:45Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is to address the attack we discussed where the attacker drops QUIC packets to time out the HTTPSSVC response, right? I think the rationale here should be in the draft, in case this fix fails. E.g., if many authoritative servers time out unexpected record types, HTTPSSVC would break sites and thus this would not be viable.\r\n\r\nHaving the reasoning documented means we won't forget to explore alternate fixes. (Perhaps we make some kind of \"combined query\" to the DoH resolver so it knows to pack the responses together?)",
          "createdAt": "2020-02-03T22:35:43Z",
          "updatedAt": "2020-02-03T22:35:43Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "The rationale is there:\r\n> A transport error or timeout can\r\n> occur if an active attacker between the client and the recursive resolver is\r\n> selectively dropping SVCB queries or responses, based on their size or\r\n> other observable patterns.",
          "createdAt": "2020-02-03T22:57:11Z",
          "updatedAt": "2020-02-03T22:57:11Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah oops! Apparently I can't read. :-)\r\n\r\n(We were discussing how we want to handle this and the risks associated.)",
          "createdAt": "2020-02-03T23:37:06Z",
          "updatedAt": "2020-02-03T23:37:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTY5NTU4",
          "commit": {
            "abbreviatedOid": "e96cf37"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-24T14:00:00Z",
          "updatedAt": "2020-01-24T14:00:00Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Can the client use a previous stale answer if it has one in-cache still? ",
              "createdAt": "2020-01-24T14:00:00Z",
              "updatedAt": "2020-01-24T15:46:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTcwNDEz",
          "commit": {
            "abbreviatedOid": "e96cf37"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-24T14:01:25Z",
          "updatedAt": "2020-01-24T14:01:25Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "The client may also wish to retry the query against another equally-trusted resolver?  (eg, if it has multiple resolver IPs.)",
              "createdAt": "2020-01-24T14:01:25Z",
              "updatedAt": "2020-01-24T15:46:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDQzNDk5",
          "commit": {
            "abbreviatedOid": "cea004f"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-24T15:47:12Z",
          "updatedAt": "2020-01-24T15:47:13Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Good point, we don't necessarily want to rule out those options.  I've changed the text from \"MUST abandon\" to \"MUST NOT fall back\".",
              "createdAt": "2020-01-24T15:47:12Z",
              "updatedAt": "2020-01-24T15:47:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTc1NzU2",
          "commit": {
            "abbreviatedOid": "cea004f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-27T21:08:37Z",
          "updatedAt": "2020-01-27T21:08:37Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "30d65cb6e04e2dedbb0d368b87db575c3ee01119",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-srvfail",
      "headRefOid": "cea004f1071604d3a335fa19c73ec04147516fa1",
      "mergeCommit": {
        "oid": "08bb96aca32a86c41805dcc8633ee8e0f1f8c82b"
      }
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY1NDc2Mjky",
      "title": "Fully specify HTTPSSVC/Alt-Svc/ESNI interaction",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/106",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #105",
      "createdAt": "2020-01-21T19:41:06Z",
      "updatedAt": "2020-02-14T17:10:49Z",
      "closedAt": "2020-02-14T17:10:43Z",
      "mergedAt": "2020-02-14T17:10:43Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This proposal has been substantially simplified now that Alt-Svc changes are excluded from this draft.",
          "createdAt": "2020-01-24T19:59:39Z",
          "updatedAt": "2020-01-24T19:59:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjk5NTc0",
          "commit": {
            "abbreviatedOid": "d4e4c66"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-04T21:03:58Z",
          "updatedAt": "2020-02-04T21:09:49Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "This text still allows clients to short-circuit HTTPSSVC if an Alt-Svc cache entry exists, which means all the issues from #105 apply. (Is this just a mistake? The ESNI client behavior below seems to suggest HTTPSSVC goes first.)\r\n\r\nOr is the intent that the ESNI client behavior overrides this paragraph? It's probably worth writing this a bit more explicitly. The combination is also weird because that text isn't additional requirements on top of the base algorithm. It completely changes it. (The base algorithm, while not explicitly spelled out, implies that the Alt-Svc integration point is before HTTPSSVC while the ESNI algorithm says it's after.)",
              "createdAt": "2020-02-04T21:03:58Z",
              "updatedAt": "2020-02-14T16:49:20Z"
            },
            {
              "originalPosition": 83,
              "body": "Marking it more preferred means ESNI is still not downgrade-protected, right? I.e. the prioirty thing is just to be opportunistically okay? It's probably worth clarifying. This confused me at first.",
              "createdAt": "2020-02-04T21:09:11Z",
              "updatedAt": "2020-02-14T16:49:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NjM1ODgw",
          "commit": {
            "abbreviatedOid": "ef7fa4c"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-06T17:28:13Z",
          "updatedAt": "2020-02-06T17:28:13Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "> Or is the intent that the ESNI client behavior overrides this paragraph? It's probably worth writing this a bit more explicitly.\r\n\r\nYes.  I've pushed a change to clarify this.",
              "createdAt": "2020-02-06T17:28:13Z",
              "updatedAt": "2020-02-14T16:49:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NjM2MDk0",
          "commit": {
            "abbreviatedOid": "ef7fa4c"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-06T17:28:30Z",
          "updatedAt": "2020-02-06T17:28:30Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "OK, I've added a clarification on this point.",
              "createdAt": "2020-02-06T17:28:30Z",
              "updatedAt": "2020-02-14T16:49:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDcwMjY5",
          "commit": {
            "abbreviatedOid": "ef7fa4c"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-14T16:37:44Z",
          "updatedAt": "2020-02-14T16:37:45Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "It seems like we should be explicit around whether DNS lookups for the Alt-Svc host are done only for A/AAAA records or also for SVCB/HTTPSSVC records?\r\nApproaches:\r\n1) Be explicit that the host in Alt-Svc is just resolved for A/AAAA records/\r\n2) Have an Alt-Svc attribute of \"svcb=1\" which would indicate that the Alt-Svc name is to a HTTPSSVC record?  In the behavior ordering, we could include then allow these to go before HTTPSSVC DNS lookups.  This might make sense in a separate AltSvc-bis/rfc7838bis draft that updates this and 7838 (along with other changes).",
              "createdAt": "2020-02-14T16:37:44Z",
              "updatedAt": "2020-02-14T16:49:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDgxMzM4",
          "commit": {
            "abbreviatedOid": "6645082"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-14T16:53:49Z",
          "updatedAt": "2020-02-14T16:53:50Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I think your option 1 is our only choice at this point.  I've uploaded a sentence to clarify that.\r\n\r\nSome kind of interaction between Alt-Svc and SVCB could be very interesting in the future, but as it stands, I don't see how to make that delegation work.  For example, there could be very complex interactions between Alt-Svc and HTTPSSVC values that can disagree (e.g. ALPN/\"transport\", \"persist\", \"esniconfig\").\r\n\r\nI think Alt-Svc-bis is beginning to sound like a good idea, but first we should get this draft finalized.",
              "createdAt": "2020-02-14T16:53:49Z",
              "updatedAt": "2020-02-14T16:53:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDkxNTc4",
          "commit": {
            "abbreviatedOid": "6645082"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-14T17:09:57Z",
          "updatedAt": "2020-02-14T17:09:57Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "bc40093d09c5bcf09c827d2ab438266b781b26dd",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-fallback",
      "headRefOid": "66450828406dcc0e67d72aad6f40316cd6fc8bc9",
      "mergeCommit": {
        "oid": "343eac0b3b115d8064958fbbd1393d791ba704d6"
      }
    },
    {
      "number": 108,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY2OTU3MTEw",
      "title": "Remove normative references to Alt-Svc",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/108",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This simplifies the draft, and allows any changes\r\nto Alt-Svc to happen in a separate draft.  Substantive\r\ntext relating HTTPSSVC to Alt-Svc has been moved into\r\na new file of notes for posterity.",
      "createdAt": "2020-01-24T18:18:06Z",
      "updatedAt": "2020-01-24T19:34:52Z",
      "closedAt": "2020-01-24T19:34:52Z",
      "mergedAt": "2020-01-24T19:34:52Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "It's a good start.  I still think we should define precedence when clients implement both Alt-Svc and HTTPSSVC, though we can potentially handle that separately.",
          "createdAt": "2020-01-24T19:05:03Z",
          "updatedAt": "2020-01-24T19:05:03Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> I still think we should define precedence when clients implement both Alt-Svc and HTTPSSVC, though we can potentially handle that separately.\r\n\r\nAgreed.  I'm hoping to handle that in a followup PR.",
          "createdAt": "2020-01-24T19:11:36Z",
          "updatedAt": "2020-01-24T19:11:36Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTYxOTk5",
          "commit": {
            "abbreviatedOid": "7b31937"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-24T19:05:14Z",
          "updatedAt": "2020-01-24T19:05:14Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "30d65cb6e04e2dedbb0d368b87db575c3ee01119",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-split",
      "headRefOid": "f1f25ae8ed0dc0ded50507be5bfe00833f461c60",
      "mergeCommit": {
        "oid": "bc40093d09c5bcf09c827d2ab438266b781b26dd"
      }
    },
    {
      "number": 109,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODc5OTYw",
      "title": "Only allow each SvcParamKey to appear once",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/109",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This includes some adjustments to make repeated keys\r\nunnecessary.\r\n\r\nIncorporates #94 by @davidben\r\nAddresses #95",
      "createdAt": "2020-02-18T23:01:39Z",
      "updatedAt": "2020-03-05T02:30:08Z",
      "closedAt": "2020-03-05T02:30:08Z",
      "mergedAt": "2020-03-05T02:30:08Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "> This is over specification on ungrounded fears that people will generate bad RRs that need to be debugged through resolvers. This change is not driven by consensus.\r\n\r\n@marka63 : which particular part of this are you concerned about?  (There are lots of items in this thread now.)",
          "createdAt": "2020-02-21T15:52:07Z",
          "updatedAt": "2020-02-21T15:52:07Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Did we have any remaining issues here before we merge?\r\n",
          "createdAt": "2020-03-04T21:37:26Z",
          "updatedAt": "2020-03-04T21:37:26Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "(I'm ready to merge after approval from one of the authors.)",
          "createdAt": "2020-03-04T22:40:18Z",
          "updatedAt": "2020-03-04T22:40:18Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjIyMTI1",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T20:48:35Z",
          "updatedAt": "2020-02-20T20:48:36Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Should we mention that clients SHOULD instead use other non-malformed RRs in the RRSET if possible?  (We want to avoid forward compat issues where a client implementation bug or some change causes entire rrsets to get rejected.)\r\n\r\nWould it be safer for some of these to have deterministic behavior rather than \"reject the RR\"?",
              "createdAt": "2020-02-20T20:48:35Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjMzODUz",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T21:06:14Z",
          "updatedAt": "2020-02-20T21:06:14Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "If a RR is malformed the entire RRset should be rejected.  One cannot safely use partial RRsets.   Operators should not depend on RRsets getting through a recursive server if a RR is malformed.\r\n\r\nSTD 13 says to reject the entire zone if a single RR is malformed when loading a zone. \r\nRecursive servers that are aware of the structure of these records should be rejecting answers that contain malformed RRs (they are not permitted to filter out individual RRs).",
              "createdAt": "2020-02-20T21:06:14Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjM2MjE4",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T21:10:26Z",
          "updatedAt": "2020-02-20T21:10:26Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "That would seem to argue in-favor of having deterministic handling of certain types of errors rather than rejecting the RR? \r\nFor example, in the case of a parameter appearing multiple times, clients MUST use only the first instance.\r\nOverly strict rejection (rather than deterministic handling) could make extensibility much harder in the future?",
              "createdAt": "2020-02-20T21:10:26Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjUxMjYx",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T21:36:47Z",
          "updatedAt": "2020-02-20T21:36:48Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Does this restrict us to only one address of each family?",
              "createdAt": "2020-02-20T21:36:47Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjU2NjU3",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "dmcardle",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T21:46:02Z",
          "updatedAt": "2020-02-20T21:46:02Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Both ipv4hint and ipv6hint are meant to contain an unordered set of addresses.\r\n\r\nLooks like it was not included in the diff context, but this appears earlier in the section:\r\n\r\n> The wire format for each parameter is a sequence of IP addresses in network\r\nbyte order.  Like an A or AAAA RRSet, the list of addresses represents an\r\nunordered collection, and clients SHOULD pick addresses to use in a random order.\r\nAn empty list of addresses is invalid.",
              "createdAt": "2020-02-20T21:46:02Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjY3MTIz",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T22:03:39Z",
          "updatedAt": "2020-02-20T22:03:39Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "There are exactly 4 conditions listed here.\r\n\r\n1 the last TLV being malformed (incomplete tag, length or value)\r\n2 TLVs not being sorted on T\r\n3 multiple T with the same value\r\n4 L being incorrect for a given T\r\n\r\nNamed already implements 1.\r\nNamed already implements 4 for some T.\r\n\r\ne.g. for port L == 2, for hint4 L != 0 && L % 4 == 0.\r\n\r\nThis checks are done as named parses a record learn off the wire or after loading with unknown record format.   All the tools which lookup records also perform these checks. \r\n\r\nNone of these currently implemented checks actually prevent new Ts being deployed. ",
              "createdAt": "2020-02-20T22:03:39Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjc2ODQ0",
          "commit": {
            "abbreviatedOid": "ceb71a3"
          },
          "author": "ericorth",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T22:21:11Z",
          "updatedAt": "2020-02-20T22:21:12Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "I would have been worried about invalid SVCBs breaking everything until I came to accept the suggestion from a couple weeks ago that the client would handle an SVCB timeout by disallowing fallback to A/AAAA.  So we're already into the territory that a resolver doing something bad or a bad config can completely break resolving the name, and not just the SVCB response.\r\n\r\nSpecific to the case of repeating keys, as long as we have good standardized semantics for list values, I don't see any reason we'd ever need to switch to allowing repeated keys.  So I don't see any reason to ever treat it as anything other than malformed and thus reject the RRSet.  Better for completely invalid things to get noticed by brokenness, so people fix them.\r\n\r\nBut in general, anywhere that we have good reason to want future extensibility, yes, deterministic handling of things that are \"valid but unknown\" is often reasonable.  The obvious example is the \"clients MUST ignore SvcFieldValue parameters that they do not recognize\" rule.",
              "createdAt": "2020-02-20T22:21:12Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjg5MTg1",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T22:45:28Z",
          "updatedAt": "2020-02-20T22:45:29Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "> If a RR is malformed the entire RRset should be rejected. One cannot safely use partial RRsets.\r\n\r\nI think this is reasonable.  I've updated the PR with that logic.\r\n\r\nTechnically, I don't think it's a security issue, but this situation should never happen so it makes sense to be cautious.  Who knows what else might have gotten corrupted if one RR is malformed?  Rejecting the whole RRSet seems like a clearer signal to the zone owner that something is wrong with (e.g.) their authoritative server.\r\n\r\n> Operators should not depend on RRsets getting through a recursive server if a RR is malformed.\r\n> Recursive servers that are aware of the structure of these records should be rejecting answers that contain malformed RRs (they are not permitted to filter out individual RRs).\r\n\r\nI disagree with this.  I've updated the PR to clarify that we don't want recursive resolvers even thinking about the TLVs.  If recursive resolvers are dropping whole RRSets, it will be harder for clients to debug this class of problems (SERVFAIL can mean almost anything).  It's also bad for consistency between resolvers, bad for performance, and could encourage laziness on the part of clients.\r\n\r\n> That would seem to argue in-favor of having deterministic handling of certain types of errors rather than rejecting the RR?\r\n\r\nI agree that determinism is important, and the text was unclear on what was supposed to happen.  I've updated the PR to clarify the intended client behavior.\r\n\r\n> For example, in the case of a parameter appearing multiple times, clients MUST use only the first instance.\r\n> Overly strict rejection (rather than deterministic handling) could make extensibility much harder in the future?\r\n\r\nI'm open to this kind of change, but I think if we impose the single-value requirement now, the chances of us wanting to remove it later are very slim.  If we did do something like what you describe, I think we would also need to GREASE it, because clients could easily implement the \"first value wins\" logic incorrectly (e.g. by rejecting the RR, or using the last value instead of the first) without visibly different behavior in any normal case.\r\n\r\nAs @marka63 notes, extension by adding new types should continue to work as expected, and seems to cover all of our anticipated needs.",
              "createdAt": "2020-02-20T22:45:29Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjkyNjM3",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T22:52:41Z",
          "updatedAt": "2020-02-20T22:52:42Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "yeah, it's really the support for new SvcParamTypes that is most important.  (Do we want to encourage greasing of them and allocating a range for greased ones?)",
              "createdAt": "2020-02-20T22:52:41Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjk1NTY2",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T22:58:43Z",
          "updatedAt": "2020-02-20T23:05:33Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "This one is redundant with the one above it (which is why increasing numeric order is nice). To avoid folks missing this and adding an unnecessary extra check, what if we said:\r\n\r\n----\r\nClients MUST consider an RR malformed if\r\n* the parser reaches [...]\r\n* SvcParamKeys are not in strictly increasing numeric order.\r\n* a SvcParamValue for [...]\r\n\r\nNote the second condition implies there are no duplicate SvcParamKeys.",
              "createdAt": "2020-02-20T22:58:43Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            },
            {
              "originalPosition": 113,
              "body": "Replace this with fixed-width length prefixes. A client parsing DNS (and TLS for that matter) already has tons of routines for such formats. Nothing the client parses in this spec may use separators.\r\n\r\nThen revert the change to `protocol-id`. It should be an 8-bit-clean opaque byte string, like ALPN, so we do not have random implementation variations around people remembering to and forgetting to check, getting the check subtle wrong, and weird bugs in the corners.",
              "createdAt": "2020-02-20T23:05:18Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjk4OTQ4",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T23:06:34Z",
          "updatedAt": "2020-02-20T23:06:35Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Great, thanks!",
              "createdAt": "2020-02-20T23:06:34Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzA2OTA4",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T23:26:12Z",
          "updatedAt": "2020-02-20T23:26:12Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "> > If a RR is malformed the entire RRset should be rejected. One cannot safely use partial RRsets.\r\n> \r\n> I think this is reasonable. I've updated the PR with that logic.\r\n> \r\n> Technically, I don't think it's a security issue, but this situation should never happen so it makes sense to be cautious. Who knows what else might have gotten corrupted if one RR is malformed? Rejecting the whole RRSet seems like a clearer signal to the zone owner that something is wrong with (e.g.) their authoritative server.\r\n> \r\n> > Operators should not depend on RRsets getting through a recursive server if a RR is malformed.\r\n> > Recursive servers that are aware of the structure of these records should be rejecting answers that contain malformed RRs (they are not permitted to filter out individual RRs).\r\n> \r\n> I disagree with this. I've updated the PR to clarify that we don't want recursive resolvers even thinking about the TLVs. If recursive resolvers are dropping whole RRSets, it will be harder for clients to debug this class of problems (SERVFAIL can mean almost anything). It's also bad for consistency between resolvers, bad for performance, and could encourage laziness on the part of clients.\r\n\r\nYes, SERVFAIL can mean almost anything which is why there are tools like DiG that are designed to follow delegations and talk directly to authoritative servers.  They can even dump malformed responses as hex blobs.\r\n\r\nNamed has been rejecting malformed RR content for over a decade now and I guarantee you that it has been a net plus.  I think there has been 1 bug report in that entire time where someone put garbage into a record in a zone and expected named to serve it rather than rejecting it or expected it to get through a resolver. \r\n\r\nI also think that you are worrying way too much about malformed records being there in the first place.  People will use tools to generate the records.  The tools will get it right from the start or will be very quickly fixed to get it right.  SERVFAIL from the recursive server is a great motivator to fix tools.\r\n\r\nAs for lazy clients, whether the resolver rejects malformed records or not it won't make a difference.\r\n\r\nI also don't want to have to do the validation of the record as I am printing it out.  Validation on data entry is much safer.\r\n\r\n",
              "createdAt": "2020-02-20T23:26:12Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzEyNzEw",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-20T23:37:57Z",
          "updatedAt": "2020-02-20T23:37:57Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Also if it isn't the recursive server checking the content it will end up being the firewall and once it is validation the record content debugging becomes just about impossible.",
              "createdAt": "2020-02-20T23:37:57Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzIzNjUz",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "This is over specification on ungrounded fears that people will generate bad RRs that need to be debugged through resolvers.  This change is not driven by consensus.",
          "createdAt": "2020-02-21T00:08:28Z",
          "updatedAt": "2020-02-21T00:08:28Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzI4NDQ0",
          "commit": {
            "abbreviatedOid": "466c0cc"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-21T15:53:06Z",
          "updatedAt": "2020-02-21T15:53:06Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Makes sense to use fixed-width length prefixes to be consistent with everything else.",
              "createdAt": "2020-02-21T15:53:06Z",
              "updatedAt": "2020-02-21T17:52:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODA4MDc4",
          "commit": {
            "abbreviatedOid": "7f26432"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-21T17:52:59Z",
          "updatedAt": "2020-02-21T17:52:59Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "Done",
              "createdAt": "2020-02-21T17:52:59Z",
              "updatedAt": "2020-02-21T17:52:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODA4MzM0",
          "commit": {
            "abbreviatedOid": "7f26432"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-21T17:53:26Z",
          "updatedAt": "2020-02-21T17:53:26Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Done.  I made them 1-byte prefix, so the max size is 255.",
              "createdAt": "2020-02-21T17:53:26Z",
              "updatedAt": "2020-02-21T17:53:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODEwNTY1",
          "commit": {
            "abbreviatedOid": "7f26432"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-21T17:57:15Z",
          "updatedAt": "2020-02-21T17:57:15Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "@marka63 Thanks for sharing your experience with malformed records in practice.  I've removed the recommendation regarding recursive server behavior.\r\n\r\nI think that this draft is negotiating a culture clash between the flexibility of DNSOP and the paranoia of TLS, but I'm optimistic that we'll be able to find a middle ground on the question of specificity.",
              "createdAt": "2020-02-21T17:57:15Z",
              "updatedAt": "2020-02-21T17:57:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjU5MDg5",
          "commit": {
            "abbreviatedOid": "7f26432"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-05T02:29:55Z",
          "updatedAt": "2020-03-05T02:29:55Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "21c1a83dcb298abe5758ccea4f45cc37a8bc0275",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-singular",
      "headRefOid": "7f26432a43d40399be51457d57eb25b8e96d8f45",
      "mergeCommit": {
        "oid": "e8966ec2f0b94572380328a9857bb04c37233706"
      }
    },
    {
      "number": 110,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDUyMDc0",
      "title": "Add reference to the GitHub",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/110",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Warren Kumari suggests on dnsop:\r\n=======================\r\n\r\nCould I suggest adding something like:\r\n[ RFC Editor - please remove before publication. This document is being\r\ncollaborated on in Github at:\r\nhttps://github.com/MikeBishop/dns-alt-svc.  The most\r\nrecent version of the document, open issues, etc should all be\r\navailable here.  The authors (gratefully) accept pull requests.]\r\n\r\nto the abstract - that way, people reading the draft know where submit PRs, etc.",
      "createdAt": "2020-02-19T23:38:13Z",
      "updatedAt": "2020-02-20T15:10:08Z",
      "closedAt": "2020-02-20T15:10:08Z",
      "mergedAt": "2020-02-20T15:10:08Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-02-20T15:10:00Z",
          "updatedAt": "2020-02-20T15:10:00Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "21c1a83dcb298abe5758ccea4f45cc37a8bc0275",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-wkumari-github-reference",
      "headRefOid": "1c9d44f4af33797977d229be0f089d5de0878d2a",
      "mergeCommit": {
        "oid": "8c9ab4f5fcd579c256b05e42fbd8075cc89edb99"
      }
    },
    {
      "number": 114,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgyNzQyNzAw",
      "title": "Update links to adopted version",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/114",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-03T04:52:24Z",
      "updatedAt": "2020-03-03T15:55:07Z",
      "closedAt": "2020-03-03T15:55:07Z",
      "mergedAt": "2020-03-03T15:55:07Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MTAwMDQ2",
          "commit": {
            "abbreviatedOid": "9209c68"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-03T15:55:00Z",
          "updatedAt": "2020-03-03T15:55:00Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "8c9ab4f5fcd579c256b05e42fbd8075cc89edb99",
      "headRepository": "martinthomson/dns-alt-svc",
      "headRefName": "patch-1",
      "headRefOid": "9209c686c30e97b40821e5d7d39f6b8f68e33356",
      "mergeCommit": {
        "oid": "974bbf9510769e39da5e1d0157276b3e984862f3"
      }
    },
    {
      "number": 116,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDQxNDIx",
      "title": "Switch from transport= back to alpn=",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/116",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per discussion in issue #115, switch back to using ALPN but with clarifications.",
      "createdAt": "2020-03-05T03:04:48Z",
      "updatedAt": "2020-03-09T19:43:44Z",
      "closedAt": "2020-03-09T19:43:44Z",
      "mergedAt": "2020-03-09T19:43:44Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the text needs to address the question of ALPNs indicating a transport, e.g.\r\n```suggestion\r\nThis specification requires that each ALPN value unambiguously indicates a single protocol suite.  If an ALPN value is specified for use with multiple protocol suites (e.g. both TLS and DTLS), it MUST NOT be included in the SvcParamValue.\r\n```\r\nAlternatively, this restriction could be documented as a requirement specific to HTTPSSVC.\r\n\r\nIdeally, I would define a new \"ALPN Context\" registry with values \"TLS\", \"DTLS\", and \"QUIC\", and add a column to the ALPN registry indicating which context each ALPN is allowed in.  However, I worry that will create delay if we add it to this draft, and it runs into a problem with the \"stun\" ALPNs (which are allowed in both TLS and DTLS).",
          "createdAt": "2020-03-05T16:30:14Z",
          "updatedAt": "2020-03-05T16:30:14Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Mjg1OTA4",
          "commit": {
            "abbreviatedOid": "d926967"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for putting this together.  This seems to be the right direction.",
          "createdAt": "2020-03-05T04:15:27Z",
          "updatedAt": "2020-03-05T04:22:55Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "```suggestion\r\nhandshake, clients MUST be willing to use protocols negotiated\r\nduring a handshake even if they do not match an ALPN value from the\r\nset of values indicated in the \"alpn\" parameter.\r\n```",
              "createdAt": "2020-03-05T04:15:28Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 131,
              "body": "```suggestion\r\nIn cases where the ALPN set is a list of multiple values,\r\n```",
              "createdAt": "2020-03-05T04:15:47Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\nby the default ALPN identifier if-present.\r\n```",
              "createdAt": "2020-03-05T04:15:56Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\nRegistry defined for HTTPS.  The only default ALPN value \r\n```",
              "createdAt": "2020-03-05T04:16:14Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 155,
              "body": "I would prefer to correct Alt-Svc on this point.  But that requires more work.  Perhaps you could leave a marker here indicating a desire to fix that aspect of 7838.",
              "createdAt": "2020-03-05T04:17:22Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nendpoint (the \"ALPN set\"), the client parses the set of ALPN identifiers in\r\nthe \"alpn\" parameter, and then adds the default set unless the\r\n```",
              "createdAt": "2020-03-05T04:18:38Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 93,
              "body": "Separately, I think that `no-default-alpn` is the wrong default.  If a server wants to support HTTP/1.1 in this way, the bits it spends on saying that (I count 9 bytes) isn't that much.  I suspect that we'll want to prioritize space for servers that support other protocols in future, and burdening them with an additional attribute is not great.",
              "createdAt": "2020-03-05T04:20:35Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nIn the wire format for \"alpn\", each alpn-value is prefixed by its\r\n```\r\n\r\n```suggestion\r\nIn the wire format for \"alpn\", each ALPN identifier (alpn-value) is prefixed by its\r\n```",
              "createdAt": "2020-03-05T04:21:03Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 67,
              "body": "```suggestion\r\nThe actual application-layer protocol negotiated during \r\n```",
              "createdAt": "2020-03-05T04:21:27Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nClients use the set of ALPN identifiers\r\n```",
              "createdAt": "2020-03-05T04:21:47Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nprotocol identifiers {{?ALPN=RFC7301}} \r\n```",
              "createdAt": "2020-03-05T04:22:12Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzAwNTU3",
          "commit": {
            "abbreviatedOid": "d926967"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T16:05:13Z",
          "updatedAt": "2020-03-05T16:17:28Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "```suggestion\r\nalpn set does not contain any compatible protocol suites.  To ensure\r\n```",
              "createdAt": "2020-03-05T16:05:14Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 131,
              "body": "```suggestion\r\nIn cases where the alpn set contains multiple values,\r\n```",
              "createdAt": "2020-03-05T16:05:52Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 132,
              "body": "If the order matters then this isn't a set, and we need to define, where the default ALPN is inserted, for example.  However, I don't understand what value we are gaining for this complexity.  Why would a server need to tell the client which supported transport should be preferred?",
              "createdAt": "2020-03-05T16:08:56Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 127,
              "body": "I think this paragraph should be replaced by the text we previously had on this point: https://github.com/MikeBishop/dns-alt-svc/commit/9c133e81c8932d4017a9cff040577c09273186c7#diff-6a78b06198e2a4dd4bb7dc07a558a5adR696.  That text essentially states this requirement in the opposite way, which I think is clearer.  It could also be combined with the paragraph at Line 797 to reduce repetition.",
              "createdAt": "2020-03-05T16:12:41Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 93,
              "body": "This structure isn't intended to increase efficiency.  The additional attribute is there to make it hard to disable TLS accidentally.  Otherwise, a zone owner could easily write \"alpn=h3\", observe that everything works in their testing, and deploy without realizing that they've created an outage for all their non-QUIC-capable clients.",
              "createdAt": "2020-03-05T16:17:28Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzY0OTAw",
          "commit": {
            "abbreviatedOid": "d926967"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T17:21:56Z",
          "updatedAt": "2020-03-05T17:21:56Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "The text currently allows a scheme to have _multiple_ default ALPNs, so this needs to be a plural, and instead of a \"default set\" we would presumably need a \"default list\" in a specified order.  (As above, I don't think this is worthwhile.)",
              "createdAt": "2020-03-05T17:21:56Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzg2Mjcy",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T17:53:03Z",
          "updatedAt": "2020-03-05T17:53:04Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "Agreed. I'd drop this sentence.",
              "createdAt": "2020-03-05T17:53:04Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzg3NDMy",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks, @enygren! This looks good, pending suggestions (and in particular the bit about server suite preference).",
          "createdAt": "2020-03-05T17:54:46Z",
          "updatedAt": "2020-03-05T17:54:46Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTg2NTMy",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T23:32:23Z",
          "updatedAt": "2020-03-05T23:32:23Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Sounds good.  Go ahead and drop that version in.",
              "createdAt": "2020-03-05T23:32:23Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTg2ODY3",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T23:33:23Z",
          "updatedAt": "2020-03-05T23:33:23Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "Sounds good to me to drop this.",
              "createdAt": "2020-03-05T23:33:23Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTg4Mjg0",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-05T23:37:22Z",
          "updatedAt": "2020-03-05T23:37:23Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "How do we want to resolve ambiguity here?  ie, if alpn=h3 (and implicit http/1.1) why would a client prefer to connect over QUIC?  I don't think we really want it to be an unordered set?",
              "createdAt": "2020-03-05T23:37:23Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDAzNzI2",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-06T00:19:43Z",
          "updatedAt": "2020-03-06T00:19:43Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "I think that it's fine to say that this is an expression of the server's preferences.\r\n\r\nOrdering relative to the default is another reason why I would prefer to see no default value.",
              "createdAt": "2020-03-06T00:19:43Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDA0MTc2",
          "commit": {
            "abbreviatedOid": "18831c7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-06T00:20:59Z",
          "updatedAt": "2020-03-06T00:21:00Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "One caution there: \"For example, when using a SvcFieldValue with an \"alpn\" of \"h2\", the client MAY also\" has a \"MAY\" in a \"For example\".  The word \"could\" is better.",
              "createdAt": "2020-03-06T00:20:59Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjE3NTUw",
          "commit": {
            "abbreviatedOid": "4ed728e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-06T20:49:46Z",
          "updatedAt": "2020-03-06T20:49:46Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "OK, I added a marker.",
              "createdAt": "2020-03-06T20:49:46Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjE3Nzgz",
          "commit": {
            "abbreviatedOid": "4ed728e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-06T20:50:11Z",
          "updatedAt": "2020-03-06T20:50:12Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Done",
              "createdAt": "2020-03-06T20:50:12Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjE3ODcy",
          "commit": {
            "abbreviatedOid": "4ed728e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-06T20:50:23Z",
          "updatedAt": "2020-03-06T20:50:23Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "Done",
              "createdAt": "2020-03-06T20:50:23Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDY3MDk0",
          "commit": {
            "abbreviatedOid": "4ed728e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Minor corrections",
          "createdAt": "2020-03-09T19:28:30Z",
          "updatedAt": "2020-03-09T19:33:32Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "```suggestion\r\nALPN set does not contain any compatible protocol suites.  To ensure\r\n```",
              "createdAt": "2020-03-09T19:28:30Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 126,
              "body": "```suggestion\r\nEach scheme that uses this SvcParamKey defines a\r\n```",
              "createdAt": "2020-03-09T19:29:01Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\n| 1           | alpn            | Additional supported protocols  | (This document) |\r\n```",
              "createdAt": "2020-03-09T19:31:45Z",
              "updatedAt": "2020-03-09T19:34:38Z"
            }
          ]
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "e8966ec2f0b94572380328a9857bb04c37233706",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-alpn-revisited",
      "headRefOid": "a720d38cae0e73517fac6f3193cdca3c1b0e26df",
      "mergeCommit": {
        "oid": "db3e29b4e108a3c13fa7ec6e88ba56e391541b87"
      }
    },
    {
      "number": 118,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODI2MzUx",
      "title": "Simplify AliasForm wording",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/118",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The previous phrasing was redundant.",
      "createdAt": "2020-03-09T21:24:43Z",
      "updatedAt": "2020-06-11T02:49:19Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "db3e29b4e108a3c13fa7ec6e88ba56e391541b87",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-alias-wording",
      "headRefOid": "b43c17ad9bb930b073859829d452d6a9f1061995",
      "closedAt": "2020-06-11T02:24:49Z",
      "mergedAt": "2020-06-11T02:24:49Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "c22b30623f664504283ca5094ccb83d1f1d77c94"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> @ 3600 IN SVBC foo\r\n> \r\n> should be perfectly fine in a master file.\r\n\r\nGood point.  I've updated the PR to allow that.",
          "createdAt": "2020-03-10T02:04:37Z",
          "updatedAt": "2020-03-10T02:04:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTc1OTQ4",
          "commit": {
            "abbreviatedOid": "92fc430"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "\"full-qualified\" is redundant in a DNS record.   All domain names in DNS records are fully qualified.\r\n\r\nAdditionally are you really wanting to tell master file parsers that they can't use a relative name in the master file.\r\n\r\n@ 3600 IN SVBC foo\r\n\r\nshould be perfectly fine in a master file.",
          "createdAt": "2020-03-09T22:40:57Z",
          "updatedAt": "2020-03-09T22:40:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDMyMDE3",
          "commit": {
            "abbreviatedOid": "b43c17a"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I guess adding the comment about the encoding of \".\" earlier would be redundant?  This is fine for now unless we get feedback.",
          "createdAt": "2020-04-13T20:54:25Z",
          "updatedAt": "2020-06-11T02:24:41Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "If we're going to have this special handling should we also mention it up in the wire format definition?  For example earlier:\r\n\r\n* the uncompressed, fully-qualified SvcDomainName, represented as a sequence of length-prefixed labels as in Section 3.1 of {{!RFC1035}}.  For the special case of a SvcDomainName with the value of \".\" (see {{svcdomainnamedot}}) this is represented as a single zero-legth label.",
              "createdAt": "2020-04-13T20:54:25Z",
              "updatedAt": "2020-06-11T02:24:41Z"
            },
            {
              "originalPosition": 32,
              "body": "(Did we want to make this addition?  Looks good otherwise.)",
              "createdAt": "2020-05-14T02:47:36Z",
              "updatedAt": "2020-06-11T02:24:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTU2OTI4",
          "commit": {
            "abbreviatedOid": "b43c17a"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-11T02:49:19Z",
          "updatedAt": "2020-06-11T02:49:19Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "From an encoding point of view, this isn't a special case.  The encoding of \".\" is always the zero-length label in DNS.\r\n\r\nThere's a logical special case here (\".\" means the RR name), but I don't think we need to repeat that more than we already do.",
              "createdAt": "2020-06-11T02:49:19Z",
              "updatedAt": "2020-06-11T02:49:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODMwMjQ4",
      "title": "Remove redundant requirement on AliasForm values",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/119",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-09T21:35:15Z",
      "updatedAt": "2020-03-10T01:34:43Z",
      "closedAt": "2020-03-10T01:34:39Z",
      "mergedAt": "2020-03-10T01:34:39Z",
      "mergedBy": "bemasc",
      "comments": [],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-alias-wording",
      "baseRefOid": "92fc43010801eff33479df80461de07a6b834f16",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-alias-dot",
      "headRefOid": "086b1c0bc69ebdcbc763ef5243ac17f9f5cd2390",
      "mergeCommit": {
        "oid": "590cc7d90672baaeb554b571c70c1fed6d4d52cb"
      }
    },
    {
      "number": 126,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODkyNzU5",
      "title": "Add missing SvcFieldPriority",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/126",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #121",
      "createdAt": "2020-03-10T01:33:49Z",
      "updatedAt": "2020-04-13T20:48:02Z",
      "closedAt": "2020-04-13T20:48:01Z",
      "mergedAt": "2020-04-13T20:48:01Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDI3OTEw",
          "commit": {
            "abbreviatedOid": "077e8b8"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-13T20:47:56Z",
          "updatedAt": "2020-04-13T20:47:56Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "db3e29b4e108a3c13fa7ec6e88ba56e391541b87",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-missing-priority",
      "headRefOid": "077e8b82a989e49a4979d5f4d13924c89cbda684",
      "mergeCommit": {
        "oid": "c4ca7f85fe3c45bcf837430e5cb148d5831881e8"
      }
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzIzNzQ2",
      "title": "Change \"ESNI\" to \"ECHO\" to match tls-esni-06",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/127",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-11T14:28:53Z",
      "updatedAt": "2020-05-13T03:50:50Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "b33e43e0640829e0c6491ff06e61598da00a8ede",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-echo",
      "headRefOid": "b0fdcad8400fa7381e55e5b13471b50eea859e30",
      "closedAt": "2020-05-13T03:50:50Z",
      "mergedAt": "2020-05-13T03:50:50Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "65ab9f5c91b53c31a046a16c36b9381d4315d3bd"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> Did we intend to remove \"## Differences from the proposed ESNI record \"?\r\n\r\nI removed it because the ESNI record proposal no longer appears in the ESNI (now ECHO) draft, so there's no longer anything to compare against.  Ultimately, I hope to get rid of all of these comparisons before RFC.\r\n\r\n> Would we be better off with calling this \"tlsecho\" instead of \"echoconfig\" ?\r\n(I think either is fine.)\r\n\r\nI prefer \"echoconfig\", since (a) it's closer to the ECHO draft terminology, and (b) it avoids possible confusion around TLS vs QUIC.",
          "createdAt": "2020-04-30T02:23:58Z",
          "updatedAt": "2020-04-30T02:23:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTQ3NTk2",
          "commit": {
            "abbreviatedOid": "9283afa"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-12T13:21:12Z",
          "updatedAt": "2020-03-12T13:21:12Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "ECHO uses `ECHOConfig` to carry this data -- should we do the same here?",
              "createdAt": "2020-03-12T13:21:12Z",
              "updatedAt": "2020-05-13T02:19:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTkzNTkx",
          "commit": {
            "abbreviatedOid": "9283afa"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-12T14:15:53Z",
          "updatedAt": "2020-03-12T14:15:53Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Given \"echo\" has other meetings, that's probably a good plan. \"echoconfig\" is a hair longer but a more unique string.",
              "createdAt": "2020-03-12T14:15:53Z",
              "updatedAt": "2020-05-13T02:19:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODUxMDU3",
          "commit": {
            "abbreviatedOid": "3595076"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-12T19:44:44Z",
          "updatedAt": "2020-03-12T19:44:44Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Done",
              "createdAt": "2020-03-12T19:44:44Z",
              "updatedAt": "2020-05-13T02:19:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDI3NjY2",
          "commit": {
            "abbreviatedOid": "c861788"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Did we intend to remove \"## Differences from the proposed ESNI record \"?\r\n\r\nWould we be better off with calling this \"tlsecho\" instead of \"echoconfig\" ?\r\n(I think either is fine.)",
          "createdAt": "2020-04-13T20:47:34Z",
          "updatedAt": "2020-04-13T20:47:34Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTY5MTMy",
          "commit": {
            "abbreviatedOid": "b0fdcad"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Merging now and we can update if ECHO gets renamed.",
          "createdAt": "2020-05-13T03:50:44Z",
          "updatedAt": "2020-05-13T03:50:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTkyOTky",
      "title": "Document why SVCB is a single type",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/128",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #125 ",
      "createdAt": "2020-04-07T01:54:35Z",
      "updatedAt": "2020-04-13T20:35:12Z",
      "closedAt": "2020-04-13T20:35:12Z",
      "mergedAt": "2020-04-13T20:35:12Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDE5NzUx",
          "commit": {
            "abbreviatedOid": "311a4c3"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-13T20:35:06Z",
          "updatedAt": "2020-04-13T20:35:06Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-echo",
      "baseRefOid": "35950761add3ba218d89826afbe0c4bb2cb941a6",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-twotypes",
      "headRefOid": "311a4c3586d4584f0d39e2df57a01216a239d5e8",
      "mergeCommit": {
        "oid": "c861788038df1a2672d41525cade47fa2dc7272b"
      }
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTk2ODQ0",
      "title": "Improve non-HTTP example text",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/129",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #124",
      "createdAt": "2020-04-07T02:11:43Z",
      "updatedAt": "2020-04-14T03:25:25Z",
      "closedAt": "2020-04-14T03:25:25Z",
      "mergedAt": "2020-04-14T03:25:25Z",
      "mergedBy": "enygren",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Done",
          "createdAt": "2020-04-13T22:23:43Z",
          "updatedAt": "2020-04-13T22:23:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDE4OTg4",
          "commit": {
            "abbreviatedOid": "5b9f64d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can we remove the two words \"like\" before the examples?  (editorial nit)\r\nOtherwise seems fine to merge.",
          "createdAt": "2020-04-13T20:33:52Z",
          "updatedAt": "2020-04-13T20:33:52Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTc4NzM3",
          "commit": {
            "abbreviatedOid": "16ab7a0"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-14T03:25:12Z",
          "updatedAt": "2020-04-14T03:25:12Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-echo",
      "baseRefOid": "35950761add3ba218d89826afbe0c4bb2cb941a6",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-zones",
      "headRefOid": "16ab7a0d13cda774bd736ff5f6b8784376414fbf",
      "mergeCommit": {
        "oid": "ca8def2904fe6cbbe11fcb6cb2c7ecaed420afdf"
      }
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAyNzc0NTQx",
      "title": "Improve description of IP hint requirements",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/131",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-13T18:28:44Z",
      "updatedAt": "2020-04-13T20:31:39Z",
      "closedAt": "2020-04-13T20:31:39Z",
      "mergedAt": "2020-04-13T20:31:39Z",
      "mergedBy": "enygren",
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDE3NTA5",
          "commit": {
            "abbreviatedOid": "a448658"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-13T20:31:34Z",
          "updatedAt": "2020-04-13T20:31:34Z",
          "comments": []
        }
      ],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "db3e29b4e108a3c13fa7ec6e88ba56e391541b87",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hint",
      "headRefOid": "a448658375b60947252e7cade771889f24c6ee51",
      "mergeCommit": {
        "oid": "062727fb72474524a50dbc21ae3815b0798a4b98"
      }
    },
    {
      "number": 137,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA2MzEzODM5",
      "title": "Fix textual error: SvcParam -> SvcFieldValue",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/137",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-04-20T21:31:31Z",
      "updatedAt": "2020-05-07T21:00:25Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c4ca7f85fe3c45bcf837430e5cb148d5831881e8",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-correction",
      "headRefOid": "9c928e9b7473d1e58bf3df770ec559155528b052",
      "closedAt": "2020-05-07T21:00:25Z",
      "mergedAt": "2020-05-07T21:00:25Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "b33e43e0640829e0c6491ff06e61598da00a8ede"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODMyOTM4",
          "commit": {
            "abbreviatedOid": "9c928e9"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-07T21:00:20Z",
          "updatedAt": "2020-05-07T21:00:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 139,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA2NDA4NTIw",
      "title": "Fix up ABNF to comply with RFC5234",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/139",
      "state": "MERGED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "in 5234, the rulename says it must contain a \"combination of alphabetics, digits, and hyphens (dashes)\"\r\n\r\nupdated ALPHA_LC\r\n\r\nalso, %5d-%FF was slightly incorrect.   ",
      "createdAt": "2020-04-21T02:59:32Z",
      "updatedAt": "2020-04-21T03:03:01Z",
      "closedAt": "2020-04-21T03:03:01Z",
      "mergedAt": "2020-04-21T03:03:01Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-04-21T03:02:56Z",
          "updatedAt": "2020-04-21T03:02:56Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c4ca7f85fe3c45bcf837430e5cb148d5831881e8",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "tjw-fix-abnf",
      "headRefOid": "18b57fd64fef24f20e4aa06f6ac2ff630b39d783",
      "mergeCommit": {
        "oid": "bfecec9cc95729cae973d57a89705560e7622544"
      }
    },
    {
      "number": 140,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA4MDE2MzY1",
      "title": "Clarify serialization of values of unknown SvcParamKeys",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/140",
      "state": "MERGED",
      "author": "DesWurstes",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I've added the following:\r\n\r\n```\r\nWhen decoding values of unrecognized keys in the presentation format:\r\n\r\n* a character other than \"\\\" represents its ASCII value in wire format.\r\n* the character \"\\\" followed by three decimal digits, up to 255, represents\r\n  an octet in the wire format.\r\n* the character \"\\\" followed by any allowed character, except a decimal digit,\r\n  represents the subsequent character's ASCII value.\r\n\r\n```\r\nand some other changes as discussed with bemasc in https://github.com/MikeBishop/dns-alt-svc/pull/140/commits/c69812c542fcdce466717f2f55e6ec0a5966e740\r\n\r\nPossible todo:\r\nTODO remove outside ascii characters from alpn, inherit escaping from values of private keys\r\n\r\n---\r\nResolved questions:\r\n\r\nAnd escaped alpn values in the presentation format can contain characters outside the ASCII range, non-visible characters or even the null character. Should I change that too?\r\n\r\nMoreover, some alpn values are in the gray area: They fit in 255 octets in wire format, but they are longer than 255 characters in the presentation format. (For example `,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,`) We should ban those alpn values too?\r\n\r\nSimilarly, *The presentation value of \"alpn\" is a comma-separated list of one or more \"alpn-id\"s.*, It should say at least one alpn value for the wire format as well?\r\n\r\nAnd since there's no requirement about the order of the pairs in the presentation format, duplicate pairs are allowed?\r\n\r\n---\r\nand I would like to add [my implementation](https://github.com/miekg/dns/pull/1067) and [this implementation](https://github.com/rthalley/dnspython/pull/452) to the list. That should be a separate pull request?",
      "createdAt": "2020-04-23T15:57:47Z",
      "updatedAt": "2020-05-01T14:18:27Z",
      "closedAt": "2020-04-30T18:45:19Z",
      "mergedAt": "2020-04-30T18:45:19Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> And escaped alpn values in the presentation format can contain characters outside the ASCII range, non-visible characters or even the null character. Should I change that too?\r\n\r\nI guess so.  It's unlikely ever to be an issue (putting non-ASCII values in the ALPN registry would be very weird).\r\n\r\n> Moreover, some alpn values are in the gray area: They fit in 255 octets in wire format, but they are longer than 255 characters in the presentation format. (For example ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) We should ban those alpn values too?\r\n\r\nNo, we shouldn't have a length limit in the presentation format.\r\n\r\n> Similarly, The presentation value of \"alpn\" is a comma-separated list of one or more \"alpn-id\"s., It should say at least one alpn value for the wire format as well?\r\n\r\nIf you would prefer to make that a wire format syntax error, I'm fine with that.  I don't think it does any harm, but I suppose it's one less weird variation that could go unnoticed.\r\n\r\n> And since there's no requirement about the order of the pairs in the presentation format, duplicate pairs are allowed?\r\n\r\nNo, duplicate pairs are not allowed in the presentation format.  If the text is unclear on that point, please suggest a clarification.",
          "createdAt": "2020-04-30T02:20:43Z",
          "updatedAt": "2020-04-30T02:20:43Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-04-30T18:45:11Z",
          "updatedAt": "2020-04-30T18:45:11Z"
        },
        {
          "author": "DesWurstes",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bemasc Thanks, but I've just found an undocumented feature/bug in markdown. This [webpage which I found from Github help pages says](https://daringfireball.net/projects/markdown/syntax#backslash), that the \\ escapes certain characters, which don't include double quotes. However the backslash in the output isn't rendered, it only escapes the next \". So **could you please replace the \\ in [those lines](https://github.com/MikeBishop/dns-alt-svc/blame/master/draft-ietf-dnsop-svcb-httpssvc.md#L396-L403) with \\\\\\\\**? Or is it easier for you if I open a pull request?",
          "createdAt": "2020-05-01T07:26:08Z",
          "updatedAt": "2020-05-01T07:26:29Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "It would be easier if you could get it rendering the way you want and send a PR.  Thanks!",
          "createdAt": "2020-05-01T14:18:27Z",
          "updatedAt": "2020-05-01T14:18:27Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "bfecec9cc95729cae973d57a89705560e7622544",
      "headRepository": null,
      "headRefName": "master",
      "headRefOid": "c69812c542fcdce466717f2f55e6ec0a5966e740",
      "mergeCommit": {
        "oid": "f44f60a9abd9a5b33c13ac5709f61f39ad12eb1c"
      }
    },
    {
      "number": 141,
      "id": "MDExOlB1bGxSZXF1ZXN0NDExODA0OTI2",
      "title": "Clarifications to the key-value definition text",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/141",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #136",
      "createdAt": "2020-04-30T19:56:58Z",
      "updatedAt": "2020-05-13T03:51:37Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "f44f60a9abd9a5b33c13ac5709f61f39ad12eb1c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-kv-text",
      "headRefOid": "e573f8f2eea555cbad86c9e223bcee3d2bef80c6",
      "closedAt": "2020-05-13T03:51:37Z",
      "mergedAt": "2020-05-13T03:51:37Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "011c37ccc3b15331c0ef353ddf1702f45a324a59"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODMwODk2",
          "commit": {
            "abbreviatedOid": "45dcf55"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good other than the comment above about comma nesting being confusing.",
          "createdAt": "2020-05-07T20:57:21Z",
          "updatedAt": "2020-05-07T20:58:22Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The number of commas here is confusing.  Is there a way to reword this?\r\n\"When the value is omitted, or both the value and the \"=\" are omittied\", then the presentation value is the empty string.\"",
              "createdAt": "2020-05-07T20:57:21Z",
              "updatedAt": "2020-05-13T03:31:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTY0MDM1",
          "commit": {
            "abbreviatedOid": "e573f8f"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-13T03:32:10Z",
          "updatedAt": "2020-05-13T03:32:11Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Done",
              "createdAt": "2020-05-13T03:32:10Z",
              "updatedAt": "2020-05-13T03:32:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTY5MzU4",
          "commit": {
            "abbreviatedOid": "e573f8f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-13T03:51:31Z",
          "updatedAt": "2020-05-13T03:51:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 142,
      "id": "MDExOlB1bGxSZXF1ZXN0NDExODA5MTg3",
      "title": "Move examples to after the specification",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/142",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This has been requested by multiple reviewers.\r\n\r\nFixes #135",
      "createdAt": "2020-04-30T20:06:53Z",
      "updatedAt": "2020-05-14T02:43:19Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "3dab5b9dc61b48877b39e7cd0459b43ca2e91bd0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-move-examples",
      "headRefOid": "696a7476c4e789c54c2235c8d6e9ffe9b56a6096",
      "closedAt": "2020-05-14T02:43:19Z",
      "mergedAt": "2020-05-14T02:43:18Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "80624f4a7d0a7b5f65f5f5de37685598f65233cb"
      },
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "(I'll let you resolve conflicts on this one first since it may be easier to delete and re-do than safely resolve?)",
          "createdAt": "2020-05-13T03:58:56Z",
          "updatedAt": "2020-05-13T03:58:56Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks. Resolved!",
          "createdAt": "2020-05-14T00:55:47Z",
          "updatedAt": "2020-05-14T00:55:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI3ODY4",
          "commit": {
            "abbreviatedOid": "696a747"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-14T02:43:12Z",
          "updatedAt": "2020-05-14T02:43:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "MDExOlB1bGxSZXF1ZXN0NDExODExMjEx",
      "title": "Add warning text about non-default ports",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/143",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #134",
      "createdAt": "2020-04-30T20:11:48Z",
      "updatedAt": "2020-05-13T03:53:50Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "011c37ccc3b15331c0ef353ddf1702f45a324a59",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-ports",
      "headRefOid": "75621eb607e54b991429c4bdf1d704bf06896746",
      "closedAt": "2020-05-13T03:53:50Z",
      "mergedAt": "2020-05-13T03:53:50Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "3dab5b9dc61b48877b39e7cd0459b43ca2e91bd0"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I've adjusted the wording similar to your suggestion",
          "createdAt": "2020-05-13T03:22:06Z",
          "updatedAt": "2020-05-13T03:22:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Nzg5MTA0",
          "commit": {
            "abbreviatedOid": "51b5955"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Maybe:\r\n\"If port-restricting firewalls are in place between some client and the service\r\nendpoint, changing the port number can cause those clients to lose access to the service, so operators should exercise caution when using this SvcParamKey with non-default ports.\"\r\n?",
          "createdAt": "2020-05-07T19:54:17Z",
          "updatedAt": "2020-05-07T19:56:08Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTY5NjI3",
          "commit": {
            "abbreviatedOid": "b21d55f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-13T03:52:32Z",
          "updatedAt": "2020-05-13T03:52:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTY5OTA4",
          "commit": {
            "abbreviatedOid": "75621eb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-13T03:53:37Z",
          "updatedAt": "2020-05-13T03:53:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 144,
      "id": "MDExOlB1bGxSZXF1ZXN0NDEyMTU3ODk5",
      "title": "Clean up my rendering mess",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/144",
      "state": "MERGED",
      "author": "DesWurstes",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@bemasc ",
      "createdAt": "2020-05-01T14:43:30Z",
      "updatedAt": "2020-05-01T16:03:03Z",
      "closedAt": "2020-05-01T16:03:03Z",
      "mergedAt": "2020-05-01T16:03:03Z",
      "mergedBy": "bemasc",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-05-01T16:02:57Z",
          "updatedAt": "2020-05-01T16:02:57Z"
        }
      ],
      "reviews": [],
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "f44f60a9abd9a5b33c13ac5709f61f39ad12eb1c",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "e4137f4c645ef9b6dec1714ae8b22fcbdbcc4fea",
      "mergeCommit": {
        "oid": "366586190d9ea7b00296e54ca3741f5dadde6d52"
      }
    },
    {
      "number": 145,
      "id": "MDExOlB1bGxSZXF1ZXN0NDEyNTE1NTE3",
      "title": "Add some text clarifying echoconfig parameter usage.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/145",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bemasc ",
      "createdAt": "2020-05-02T22:15:19Z",
      "updatedAt": "2020-05-15T01:30:40Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "bemasc-echo",
      "baseRefOid": "b0fdcad8400fa7381e55e5b13471b50eea859e30",
      "headRepository": "chris-wood/dns-alt-svc",
      "headRefName": "caw/echo-extension-guidance",
      "headRefOid": "972c053ecca73b1c1fe82814bc6800855f7e547b",
      "closedAt": "2020-05-15T01:30:40Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This clarification has been made in #148.",
          "createdAt": "2020-05-15T01:30:40Z",
          "updatedAt": "2020-05-15T01:30:40Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTY2ODM4",
          "commit": {
            "abbreviatedOid": "dd22a88"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-02T23:00:28Z",
          "updatedAt": "2020-05-02T23:04:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nextensions. That extension mechanism SHOULD NOT be used for any parameter that\r\n```",
              "createdAt": "2020-05-02T23:00:29Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nother than \"echoconfig\" which affects the TLS ClientHello is directed at the\r\n```",
              "createdAt": "2020-05-02T23:00:52Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            },
            {
              "originalPosition": 8,
              "body": "I think \"connection properties\" is not clear enough.  To me, the only way an ECHOConfig extension could not affect \"connection properties\" would be if it were ignored.",
              "createdAt": "2020-05-02T23:04:05Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nother than \"echoconfig\" that affects the TLS ClientHello is directed at the\r\n```",
              "createdAt": "2020-05-02T23:04:36Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDY3NDI3",
          "commit": {
            "abbreviatedOid": "a7d68ef"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T14:56:14Z",
          "updatedAt": "2020-05-04T14:56:14Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "That may be true. How might you rephrase this?",
              "createdAt": "2020-05-04T14:56:14Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDg5NDU0",
          "commit": {
            "abbreviatedOid": "523d497"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T15:20:02Z",
          "updatedAt": "2020-05-04T15:20:03Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I took a stab at refactoring this. What do you think?",
              "createdAt": "2020-05-04T15:20:02Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTgwNjUz",
          "commit": {
            "abbreviatedOid": "523d497"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T17:08:33Z",
          "updatedAt": "2020-05-04T17:11:34Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nThe value of this parameter and any included ECHOConfig extensions are directed\r\n```",
              "createdAt": "2020-05-04T17:08:33Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nClientHello when ECHO is in use SHOULD use other SVCB parameters, and any other\r\nrelevant SVCB parameters SHALL be applied to the inner ClientHello.\r\n```",
              "createdAt": "2020-05-04T17:10:42Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTg3ODkw",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T17:18:20Z",
          "updatedAt": "2020-05-04T17:18:21Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'd prefer to keep these separate sentences.",
              "createdAt": "2020-05-04T17:18:20Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTkwMzI2",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T17:21:34Z",
          "updatedAt": "2020-05-04T17:21:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "That's fine with me, but I do think we ought to mention the second requirement somewhere in this draft.   (Currently it's only in the ECHO draft.)",
              "createdAt": "2020-05-04T17:21:34Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTk0NjUw",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T17:27:19Z",
          "updatedAt": "2020-05-04T17:27:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\ud83d\udc4d Do you want to merge and then make that change? (This PR targets your ESNI->ECHO branch.)",
              "createdAt": "2020-05-04T17:27:19Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MjAzNTAw",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-04T17:39:16Z",
          "updatedAt": "2020-05-04T17:39:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think it's time for another round of review with the other coauthors.",
              "createdAt": "2020-05-04T17:39:16Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTA4NTY2",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-06T19:09:18Z",
          "updatedAt": "2020-05-06T19:09:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Calling @MikeBishop and @enygren!",
              "createdAt": "2020-05-06T19:09:19Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTA5MTQ3",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-07T14:08:54Z",
          "updatedAt": "2020-05-07T14:08:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I feel like this discussion is about which way to overspecify.\r\n\r\nThe outer ClientHello is an artifact of ECHO: essentially fake and deliberately public.  Therefore, it's entirely legitimate to populate it with public information, e.g. information anyone can obtain over DNS anyway.  It's also legitimate to populate it with junk or lie.  Those are implementation choices; we don't need to specify them.\r\n\r\nThe contents of the SVCB record are a server's declarations about its own capabilities; they are useful in the inner ClientHello and might be usable in the outer ClientHello if the implementation so chooses, since they're public anyway.  This particular parameter is about how to conceal the \"true\" ClientHello using ECHO.  The point of this paragraph is that you don't need this parameter to construct the inner ClientHello; you would construct the inner one as if this parameter weren't there, then encapsulate it if you have an EchoConfig.",
              "createdAt": "2020-05-07T14:08:54Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTIxMzU4",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-07T14:21:12Z",
          "updatedAt": "2020-05-07T14:21:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "@MikeBishop, I don't disagree with what you said, but... are you looking for a change? Suggestions welcome. :-)",
              "createdAt": "2020-05-07T14:21:12Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTQxNDU1",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-07T14:40:50Z",
          "updatedAt": "2020-05-07T14:40:51Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nconstruction of the inner TLS ClientHello.\r\n```\r\nI'm suggesting we can do without this sentence entirely.",
              "createdAt": "2020-05-07T14:40:51Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTQ5OTE0",
          "commit": {
            "abbreviatedOid": "9e57f8d"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-07T14:49:20Z",
          "updatedAt": "2020-05-07T14:49:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Lovely -- thanks!",
              "createdAt": "2020-05-07T14:49:20Z",
              "updatedAt": "2020-05-07T14:49:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODI3OTAz",
          "commit": {
            "abbreviatedOid": "972c053"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-07T20:52:53Z",
          "updatedAt": "2020-05-07T20:52:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The wording \"are directed at\" tripped me up a few times when first reading this.  I wonder if \"influence the construction of\" or similar might be more readable? \r\n\r\nWould giving an illustrative example help for people not as familiar with ECHO?  (\"For example, the echoconfig will specify the SNI and ALPN values to use in ClientHelloOuter but will have no impact on the SNI and ALPN values used in ClientHelloInner.\")",
              "createdAt": "2020-05-07T20:52:53Z",
              "updatedAt": "2020-05-07T20:52:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTA0ODA4",
          "commit": {
            "abbreviatedOid": "972c053"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-13T00:09:04Z",
          "updatedAt": "2020-05-13T00:09:04Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> The wording \"are directed at\" tripped me up a few times when first reading this. I wonder if \"influence the construction of\" or similar might be more readable?\r\n\r\nThat's a great suggestion. We should incorporate it.\r\n\r\n> Would giving an illustrative example help for people not as familiar with ECHO? \r\n\r\nProbably! @bemasc, do you want to take a crack at that? (I won't have time to get back to this PR for quite a while, I'm afraid.)",
              "createdAt": "2020-05-13T00:09:04Z",
              "updatedAt": "2020-05-13T00:09:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTQ1NjAx",
          "commit": {
            "abbreviatedOid": "972c053"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-13T02:27:22Z",
          "updatedAt": "2020-05-13T02:27:23Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "OK, I gave it a try: https://github.com/MikeBishop/dns-alt-svc/pull/148",
              "createdAt": "2020-05-13T02:27:23Z",
              "updatedAt": "2020-05-13T02:27:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 146,
      "id": "MDExOlB1bGxSZXF1ZXN0NDE0NDA2Mzgz",
      "title": "Clarify reference to a default protocol",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/146",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-05-07T01:03:11Z",
      "updatedAt": "2020-05-07T19:52:19Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "366586190d9ea7b00296e54ca3741f5dadde6d52",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-tls-tcp",
      "headRefOid": "189657499b12b39c416efa374ff0e40f8b22c6f1",
      "closedAt": "2020-05-07T19:52:19Z",
      "mergedAt": "2020-05-07T19:52:19Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "4ed64d9988685391cb236f95c3131615f48e25fd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Nzg3NTQx",
          "commit": {
            "abbreviatedOid": "1896574"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-07T19:52:09Z",
          "updatedAt": "2020-05-07T19:52:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "MDExOlB1bGxSZXF1ZXN0NDE3MDc1MjU0",
      "title": "Explain inner vs. outer ClientHello",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/148",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As requested here: https://github.com/MikeBishop/dns-alt-svc/pull/145#discussion_r424102426",
      "createdAt": "2020-05-13T02:27:00Z",
      "updatedAt": "2020-05-15T01:30:09Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "3dab5b9dc61b48877b39e7cd0459b43ca2e91bd0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-echo-guidance",
      "headRefOid": "6d5b630527986d41384b21217cd3796cc978c681",
      "closedAt": "2020-05-14T02:38:45Z",
      "mergedAt": "2020-05-14T02:38:45Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "d9d7e49bcf66daed9260c37bb6b456a7dbfb2f0c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTcxMTk2",
          "commit": {
            "abbreviatedOid": "2fcc1b9"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-13T03:58:20Z",
          "updatedAt": "2020-05-13T03:58:21Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Do we want to add to the example that the ECHOConfig could specify a dummy ALPN TLS extension for the outer client hello (for middlebox compatibility) but it is ignored for connection establishment?  Similarly, explaining how SNI fits in here might be helpful to readers.  (ie, that the \"outer\" contains a dummy SNI from the ECHOConfig and the \"inner\" contains the SNI from the Origin.) ",
              "createdAt": "2020-05-13T03:58:20Z",
              "updatedAt": "2020-05-14T00:50:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzkyNjA4",
          "commit": {
            "abbreviatedOid": "ca478f0"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-14T00:45:53Z",
          "updatedAt": "2020-05-14T00:45:53Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "> Do we want to add to the example that the ECHOConfig could specify a dummy ALPN TLS extension for the outer client hello (for middlebox compatibility) but it is ignored for connection establishment?\r\n\r\nI don't think this is a good place to speculate on possible future extensions to a different draft.  (I also think that particular extension is unlikely to happen any time soon.)\r\n\r\n> Similarly, explaining how SNI fits in here might be helpful to readers. (ie, that the \"outer\" contains a dummy SNI from the ECHOConfig and the \"inner\" contains the SNI from the Origin.)\r\n\r\nAdded.\r\n",
              "createdAt": "2020-05-14T00:45:53Z",
              "updatedAt": "2020-05-14T00:50:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI2NDMy",
          "commit": {
            "abbreviatedOid": "6d5b630"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-14T02:37:58Z",
          "updatedAt": "2020-05-14T02:37:59Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Maybe I misread the ECHO draft, but I thought this was allowed? It's given as an example. But may be more detail than is needed here.",
              "createdAt": "2020-05-14T02:37:58Z",
              "updatedAt": "2020-05-14T02:37:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI2NjIy",
          "commit": {
            "abbreviatedOid": "6d5b630"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-14T02:38:40Z",
          "updatedAt": "2020-05-14T02:38:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0NDIxNTQ3Nzk1",
      "title": "Rename ECHO to ECH.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/150",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/tlswg/draft-ietf-tls-esni/pull/236/files for the related ECHO change.",
      "createdAt": "2020-05-21T19:50:04Z",
      "updatedAt": "2020-05-21T20:05:47Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "80624f4a7d0a7b5f65f5f5de37685598f65233cb",
      "headRepository": "chris-wood/dns-alt-svc",
      "headRefName": "caw/echo-to-ech",
      "headRefOid": "e09927ac003eb2ba6bd5e65756310b654b130498",
      "closedAt": "2020-05-21T20:05:32Z",
      "mergedAt": "2020-05-21T20:05:32Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "85717d7ddc6ae145da818fbed713ca0c1d78a176"
      },
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "(Looks good to me)",
          "createdAt": "2020-05-21T20:05:47Z",
          "updatedAt": "2020-05-21T20:05:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 151,
      "id": "MDExOlB1bGxSZXF1ZXN0NDIyNTE2NDkw",
      "title": "Revise chain length limit description",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/151",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #57",
      "createdAt": "2020-05-25T02:43:35Z",
      "updatedAt": "2020-05-29T19:41:05Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "85717d7ddc6ae145da818fbed713ca0c1d78a176",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-limit",
      "headRefOid": "2f43dcb6156fca64f1aee8cb33c58e9e105147b5",
      "closedAt": "2020-05-29T19:41:04Z",
      "mergedAt": "2020-05-29T19:41:04Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjM5OTQx",
          "commit": {
            "abbreviatedOid": "2f43dcb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-05-29T19:40:59Z",
          "updatedAt": "2020-05-29T19:40:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI0MzM4MzQy",
      "title": "Use \"@\" for current origin, don't use the DNS root \".\" in example.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/152",
      "state": "MERGED",
      "author": "he32",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-05-28T08:41:58Z",
      "updatedAt": "2020-05-28T15:22:54Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "85717d7ddc6ae145da818fbed713ca0c1d78a176",
      "headRepository": "he32/dns-alt-svc",
      "headRefName": "example-fix",
      "headRefOid": "6b936f3fbdc3bceb89406a3d18605d118b98d34e",
      "closedAt": "2020-05-28T15:22:53Z",
      "mergedAt": "2020-05-28T15:22:53Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "1aa86cd4866dfd7c884c711e89908820b9ebeb80"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-05-28T15:22:49Z",
          "updatedAt": "2020-05-28T15:22:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 153,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI0NDk4OTEz",
      "title": "Fix a couple of minor typos.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/153",
      "state": "MERGED",
      "author": "he32",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-05-28T13:49:04Z",
      "updatedAt": "2020-05-28T15:23:37Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "85717d7ddc6ae145da818fbed713ca0c1d78a176",
      "headRepository": "he32/dns-alt-svc",
      "headRefName": "typo-fix",
      "headRefOid": "d256e0b0b6fa5395e06a928d8b9be64f011e6c93",
      "closedAt": "2020-05-28T15:23:37Z",
      "mergedAt": "2020-05-28T15:23:37Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "6164ced2634e029b40929e262d0471103e49216a"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-05-28T15:23:33Z",
          "updatedAt": "2020-05-28T15:23:33Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 155,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NTI2MjUz",
      "title": "Clarify interaction with WebSocket",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/155",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This also covers the general case of WebSocket-like protocols.\r\n\r\nFixes #90",
      "createdAt": "2020-05-30T21:32:54Z",
      "updatedAt": "2020-06-11T02:22:29Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-websocket",
      "headRefOid": "11e9efbd5adf334bf9607e3dd879414babd63e2f",
      "closedAt": "2020-06-11T02:22:29Z",
      "mergedAt": "2020-06-11T02:22:29Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "a91c02c5ec21adb5a349d88e63d6bf5b2130c770"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Coincidentally, we were looking at WebSockets recently for cookies. It's a mess. :-( Whether this definition of \"HTTP-based\" works is... unclear. RFC 6455 does *not* map WebSockets to its corresponding http/https scheme. It believes WebSockets is an entirely independent protocol with an HTTP-looking handshake for convenience.\r\n\r\n>   The WebSocket Protocol is an independent TCP-based protocol.  Its\r\n>   only relationship to HTTP is that its handshake is interpreted by\r\n>   HTTP servers as an Upgrade request.\r\n\r\nBut this is an unhelpful way to specify it and was probably a mistake. It doesn't tell you how WebSockets interacts with cookies, HTTP auth, or redirects, and led to a mess of interop issues.\r\n\r\nFetch, accordingly, [overrides this](https://fetch.spec.whatwg.org/#websocket-protocol) and [maps the schemes to HTTP](https://fetch.spec.whatwg.org/#websocket-opening-handshake). This is partially a no-op because cookies don't check schemes, but we should [fix that](https://tools.ietf.org/html/draft-west-cookie-incrementalism-01). At that point we'll be in a weird situation where, without the WHATWG override of the IETF spec, WebSockets' interactions with cookies will be somewhere between incorrect and insufficiently specified. :-(\r\n\r\nHow that translates to what this specification should do, I don't know. It may make sense to just special-case WebSockets and declare the RFC 6455 specification strategy was a mistake and we shouldn't do it again. Then again, that still means new \"webby\" protocols that are less HTTP-adjacent (WebTransport?) will require separate SVCB records, which also seems poor. Every extra thing we stick in the query (scheme, port, etc.) weakens the security benefits (HTTPS upgrade, ECH).",
          "createdAt": "2020-05-30T22:01:50Z",
          "updatedAt": "2020-05-30T22:02:47Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@davidben Thanks for flagging the discrepancy.  I've tweaked the text to try to be more precise (without explaining the whole situation).",
          "createdAt": "2020-06-07T17:06:08Z",
          "updatedAt": "2020-06-07T17:06:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ5MDE5",
          "commit": {
            "abbreviatedOid": "11e9efb"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T02:22:20Z",
          "updatedAt": "2020-06-11T02:22:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NTI4MTYy",
      "title": "Clarify conditions for enabling HSTS",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/156",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #91",
      "createdAt": "2020-05-30T21:52:55Z",
      "updatedAt": "2020-06-11T14:32:57Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hsts-fallback",
      "headRefOid": "4cfb3035ed167a0ed86e99a8827f994555b5b842",
      "closedAt": "2020-06-11T14:32:57Z",
      "mergedAt": "2020-06-11T14:32:57Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "9d29bfc8d1b413294278c14310460e5de9857212"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR seems reasonable, though @enygren's comment has now confused me. What does fallback mean here? (Did you mean another comment of mine? Doesn't look like I've commented on #79.)",
          "createdAt": "2020-06-11T02:47:51Z",
          "updatedAt": "2020-06-11T02:47:51Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, I meant #91   (no idea why the typo)",
          "createdAt": "2020-06-11T02:54:36Z",
          "updatedAt": "2020-06-11T02:54:36Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah. No, a fallback wouldn't make sense, both semantically and for security. Semantically, by the time you've done an HSTS-like upgrade, you've had to pop up many layers to trigger something like a redirect. That no longer looks like the HTTPSSVC vs. A/AAAA alternate routes. (The client needs to actually change the URL here.) And, in terms of security, if the network can undo the upgrade by blocking the HTTPS upgrade, what was the point? Maybe as well do a plain 302 redirect at that point.",
          "createdAt": "2020-06-11T05:02:06Z",
          "updatedAt": "2020-06-11T05:02:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ4NDk5",
          "commit": {
            "abbreviatedOid": "1232c2d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Did we want to allow clients to fallback?\r\nPerhaps I misunderstood @davidben's comment in #91.  David, do you have any concerns with where this lands?",
          "createdAt": "2020-06-11T02:20:40Z",
          "updatedAt": "2020-06-11T02:54:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTcyODY2",
          "commit": {
            "abbreviatedOid": "4cfb303"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T14:32:51Z",
          "updatedAt": "2020-06-11T14:32:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NTMzNDc1",
      "title": "Clarify port-related requirements",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/157",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #111 and #122",
      "createdAt": "2020-05-30T22:53:11Z",
      "updatedAt": "2020-06-11T02:14:01Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-port",
      "headRefOid": "f309c0d7e58ff2d00286400eb9d9e2f37f03844b",
      "closedAt": "2020-06-11T02:14:01Z",
      "mergedAt": "2020-06-11T02:14:01Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "2248c49c022e000afbfe40a90e5ab09f490926b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ2NDk0",
          "commit": {
            "abbreviatedOid": "f309c0d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T02:13:55Z",
          "updatedAt": "2020-06-11T02:13:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NTQxOTE1",
      "title": "Exclude parentheses from basic-visible",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/158",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #120",
      "createdAt": "2020-05-31T00:36:41Z",
      "updatedAt": "2020-06-11T14:37:31Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-abnf",
      "headRefOid": "6e0e097ff4a86f8ff7cbf0d97e30b19ba27d410a",
      "closedAt": "2020-06-11T14:37:31Z",
      "mergedAt": "2020-06-11T14:37:30Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "4bc31b26ae28241145aa9a9512fda90b762ced97"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@marka63 Could you confirm that this addresses the ABNF problem in #120?",
          "createdAt": "2020-06-11T02:43:25Z",
          "updatedAt": "2020-06-11T02:43:25Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "It appears to.",
          "createdAt": "2020-06-11T08:05:43Z",
          "updatedAt": "2020-06-11T08:05:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ0ODM0",
          "commit": {
            "abbreviatedOid": "6e0e097"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Might be good for someone who deeply understands this ABNF definition to review more deeply.",
          "createdAt": "2020-06-11T02:08:08Z",
          "updatedAt": "2020-06-11T02:08:08Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTc3MjA4",
          "commit": {
            "abbreviatedOid": "6e0e097"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Merged following @marka63's review",
          "createdAt": "2020-06-11T14:37:23Z",
          "updatedAt": "2020-06-11T14:37:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 159,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NTQyNjc1",
      "title": "Clarify transport proxy behavior",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/159",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #147",
      "createdAt": "2020-05-31T00:46:32Z",
      "updatedAt": "2020-06-11T02:05:30Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "dc68db9bef708d22bb1ebd3bc6df40ca44c30d6c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-proxy",
      "headRefOid": "c32458b34ffcb8330a19ec053b890cdb9ff2384c",
      "closedAt": "2020-06-11T02:05:30Z",
      "mergedAt": "2020-06-11T02:05:29Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "27bf3549b27475b4f67d7ff7d79bec6b50da9d32"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTQ0MDEz",
          "commit": {
            "abbreviatedOid": "c32458b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T02:05:22Z",
          "updatedAt": "2020-06-11T02:05:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI1NzAxNDEy",
      "title": "Adjust CamelCase names",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/160",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This (purely editorial) change replaces the unambiguous but\r\nidiosyncratic CamelCase terms with capitalized standard terms.\r\nIt also removes some duplicated language and changes \"form\" to \"mode\",\r\nsince there is really only one SVCB wire format.\r\n\r\nRelevant issues: #99, #82",
      "createdAt": "2020-06-01T01:06:18Z",
      "updatedAt": "2020-07-13T17:12:11Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "ba6fef7b3ad0de83b12d6b2135cb5c16293a8b55",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-names",
      "headRefOid": "761fddaba42daa1ec31056583729f97690b4a974",
      "closedAt": "2020-07-13T17:12:11Z",
      "mergedAt": "2020-07-13T17:12:11Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "9a84da196629ad0e9a42f987c90c040f7170f2a8"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR is firmly in bikeshed territory, and has no particular deadline, so it's a lower priority than any substantive PRs.",
          "createdAt": "2020-06-01T01:08:01Z",
          "updatedAt": "2020-06-01T01:08:01Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sold yet.  It's an interesting idea, but I think there is value in using the camelcase names for unambiguous references to fields and forms.  Common terms have more chances for confusion and ambiguity.  This may be a style thing.  I'd be more in-favor of just simplifying some of the camelcase terms that are overly long.",
          "createdAt": "2020-06-11T02:03:53Z",
          "updatedAt": "2020-06-11T02:03:53Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @enygren that the more common names seem a bit too generic, and liable for confusion when referenced out of context. I'd prefer to keep with the existing style.",
          "createdAt": "2020-06-22T20:37:16Z",
          "updatedAt": "2020-06-22T20:37:16Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I've changed this PR to match the names discussed in #82, so the initial description comment is no longer accurate.",
          "createdAt": "2020-07-07T03:27:48Z",
          "updatedAt": "2020-07-07T03:27:48Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQzNTA0",
          "commit": {
            "abbreviatedOid": "a98b5a7"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is generally looking good.  My primary concern is whether we should use\r\nSvcParamKey/SvcParamValue (including using those in the ABNF) rather than key/value as normal English words.  The former is less ambiguous especially as both key and value have potential for confusion depending on the context they're used in.",
          "createdAt": "2020-07-12T03:43:26Z",
          "updatedAt": "2020-07-12T03:51:30Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n3. SvcParams (optional): A list of key=value pairs\r\n   describing the alternative endpoint at\r\n   TargetName (only used in ServiceMode and otherwise ignored). \r\n   Described in {{svcparams}}.\r\n```",
              "createdAt": "2020-07-12T03:43:26Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 640,
              "body": "```suggestion\r\nFollowing of HTTPS AliasMode RRs and CNAME aliases is unchanged from SVCB.\r\n```",
              "createdAt": "2020-07-12T03:49:39Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTU5MTg1",
          "commit": {
            "abbreviatedOid": "5dab608"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-13T03:24:08Z",
          "updatedAt": "2020-07-13T03:24:08Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "While repetitive with what is below, this does provide important background context.  Should we see if we can include this even if we condense this down some?  Or just leave this as-is?",
              "createdAt": "2020-07-13T03:24:08Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTU5NTY0",
          "commit": {
            "abbreviatedOid": "5dab608"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Almost there!",
          "createdAt": "2020-07-13T03:25:55Z",
          "updatedAt": "2020-07-13T03:40:14Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "```suggestion\r\nValues are in a format specific to the SvcParamKey.\r\n```",
              "createdAt": "2020-07-13T03:25:55Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 108,
              "body": "Why did we drop the \"The presentation format for SvcFieldValue is a whitespace-separated list of key=value pairs\" ?  Having a textual description is helpful?\r\n\r\n",
              "createdAt": "2020-07-13T03:27:32Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 109,
              "body": "```suggestion\r\nThe presentation format for SvcParams is a whitespace-separated\r\nlist of parameters which are either SvcParamKey=value pairs or \r\nstandalone SvcParamKey parameters.\r\nWhen the value is omitted, or both the value and\r\n```",
              "createdAt": "2020-07-13T03:29:20Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 261,
              "body": "This is somewhat confusing in the new text as AliasMode can be an alias to a AAAA or A record.",
              "createdAt": "2020-07-13T03:33:59Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 621,
              "body": "```suggestion\r\n* Number: SvcParamKey wire format numeric identifier (range 0-65535)\r\n```",
              "createdAt": "2020-07-13T03:38:08Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 622,
              "body": "```suggestion\r\n* Name: Service ParamKey presentation name\r\n```",
              "createdAt": "2020-07-13T03:38:42Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 627,
              "body": "```suggestion\r\nSvcParamKey entries to be added to this namespace\r\n```",
              "createdAt": "2020-07-13T03:39:25Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTY1NTUw",
          "commit": {
            "abbreviatedOid": "5dab608"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-13T03:52:01Z",
          "updatedAt": "2020-07-13T04:04:30Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "OK, restored",
              "createdAt": "2020-07-13T03:52:02Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 109,
              "body": "I've incorporated this adjustment at line 262 to avoid repetition.",
              "createdAt": "2020-07-13T03:56:54Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 261,
              "body": "The old text arguably has the same problem.  Changed to \"AliasMode records only apply to queries for the specific RR type.\".",
              "createdAt": "2020-07-13T03:59:52Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            },
            {
              "originalPosition": 622,
              "body": "Committed as \"SvcParamKey presentation name\"",
              "createdAt": "2020-07-13T04:04:26Z",
              "updatedAt": "2020-07-13T04:15:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDQyNjE0",
          "commit": {
            "abbreviatedOid": "761fdda"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T17:12:03Z",
          "updatedAt": "2020-07-13T17:12:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMyODAyOTUy",
      "title": "Clarify need for SNI",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/161",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #92 \r\n\r\n(text derived from rfc7838 and rfc7540 which have a similar requirement)",
      "createdAt": "2020-06-11T02:36:57Z",
      "updatedAt": "2020-06-11T03:30:40Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c22b30623f664504283ca5094ccb83d1f1d77c94",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-sni",
      "headRefOid": "b24ef37471b2906081d1d19eca79e1d975a2be70",
      "closedAt": "2020-06-11T03:30:39Z",
      "mergedAt": "2020-06-11T03:30:39Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "b36fcc1b1198252d9214fb16a60c6b44ecc4df4c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTU3OTY3",
          "commit": {
            "abbreviatedOid": "d262a88"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-11T02:52:44Z",
          "updatedAt": "2020-06-11T02:52:45Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nNote that the TLS SNI (and also the HTTP \"Host\" or \":authority\") will indicate \r\nthe origin, not the SvcDomainName.\r\n```",
              "createdAt": "2020-06-11T02:52:44Z",
              "updatedAt": "2020-06-11T02:56:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTU5Njkx",
          "commit": {
            "abbreviatedOid": "b24ef37"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T02:58:43Z",
          "updatedAt": "2020-06-11T02:58:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMyODA2NTU0",
      "title": "Different IANA policies for different SvcParamKey ranges",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/162",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #154",
      "createdAt": "2020-06-11T02:50:26Z",
      "updatedAt": "2020-06-11T02:55:45Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c22b30623f664504283ca5094ccb83d1f1d77c94",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-iana-ranges",
      "headRefOid": "abc4f6f1128e3c39c1de9c3ddbbff053d5b7538a",
      "closedAt": "2020-06-11T02:55:45Z",
      "mergedAt": "2020-06-11T02:55:45Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "c1dcfcc0fe75febd76926ed410c164f2b5137954"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTU4NzY0",
          "commit": {
            "abbreviatedOid": "abc4f6f"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-11T02:55:36Z",
          "updatedAt": "2020-06-11T02:55:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMyODEyODgy",
      "title": "SVCB-Used HTTP header",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/163",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "future draft"
      ],
      "body": "Fixes #107 \r\nMay want working group discussion in dnsop and/or httpbis",
      "createdAt": "2020-06-11T03:15:39Z",
      "updatedAt": "2020-07-09T21:15:35Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c1dcfcc0fe75febd76926ed410c164f2b5137954",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-svcb-used",
      "headRefOid": "740389a633ff6a16daceb9653048f4ebf16cef4d",
      "closedAt": "2020-07-09T21:15:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I would choose one option for the behavior, and leave it at MAY.  I also think we probably don't want to do this unless we can convince people that it's not a privacy risk at all.",
          "createdAt": "2020-06-11T03:58:00Z",
          "updatedAt": "2020-06-11T03:58:00Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "After giving this some more thought, I think there is enough complexity here that we shouldn't delay this draft while we figure it out.  For example, it might make sense to say that the record ID is a 16-bit value indicated by a SvcParamKey (`record-id=12345`), and that `record-id` and `port` must not appear together.  That would (arguably) make this unambiguously privacy-positive: it reduces the exposed entropy without increasing the total entropy.\r\n\r\nI'm not sure that formulation would fly, but we should take our time and get this right.",
          "createdAt": "2020-06-11T18:09:31Z",
          "updatedAt": "2020-06-11T18:09:31Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposing to defer this to a future draft.  It may make sense to do this as part of Alt-Svc-bis",
          "createdAt": "2020-07-09T21:15:35Z",
          "updatedAt": "2020-07-09T21:15:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 164,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMyODE2NTEy",
      "title": "disable-https-upgrade SvcParamKey",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/164",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "future draft"
      ],
      "body": "Fixes #100 \r\nWill want working group discussion before merging.\r\n(End resolution may be to reject this.)",
      "createdAt": "2020-06-11T03:28:59Z",
      "updatedAt": "2020-07-10T17:25:01Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c1dcfcc0fe75febd76926ed410c164f2b5137954",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-disable-https-upgrade",
      "headRefOid": "084ab4f4a9782a3c2f51f2fcde30e1e6658f44e1",
      "closedAt": "2020-07-10T17:25:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "> How strongly is there a need for such a key? It seems a bit odd to define the key and then strongly discourage it.\r\n\r\nI agree: it's odd, at best.  The argument in favor is: imagine 10 million domains are CNAMEd to cdn.example.net, and 1% of them don't support HTTPS.  Currently, that means example.net can't deploy ECH for the other 99%.  Instead, they have to create cdn2.example.net, with HTTPSSVC, and convince them all to update their CNAMEs.\r\n\r\nI'm not sure how to feel about this problem.\r\n\r\n> If deployments need something like this in the future, I\u2019d prefer to see it as an extension.\r\n\r\nUnfortunately, this can't easily be done as a future extension, because, in the situation where it's needed, it only works if all clients support it.  Since clients ignore unrecognized SvcParamKeys, that means older clients would continue to enforce HSTS, thus breaking all the non-HTTPS domains.",
          "createdAt": "2020-06-11T19:10:44Z",
          "updatedAt": "2020-06-11T19:10:44Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see the incentive of getting everything on a given CNAME supporting TLS at the same time as a positive thing. Isn't it still possible in a deployment to choose to separate out CNAMEs differently if you need only some to support ECH? That way, the burden of disabling uniform encryption is placed upon the server DNS deployment, not on the clients that now need to write codepaths to pass up ECH keys but also consider that the connection may not support TLS.\r\n\r\nIt feels like we should make things easy to be secure, but not optimize for cases that are insecure and should long-term be fixed.",
          "createdAt": "2020-06-11T19:49:18Z",
          "updatedAt": "2020-06-11T19:49:18Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "\r\n> I agree: it's odd, at best. The argument in favor is: imagine 10 million domains are CNAMEd to cdn.example.net, and 1% of them don't support HTTPS. Currently, that means example.net can't deploy ECH for the other 99%. Instead, they have to create cdn2.example.net, with HTTPSSVC, and convince them all to update their CNAMEs.\r\n\r\nBut don't the 99% then lose the upgrade behavior? I'd call that much worse than forcing the last 1% to upgrade (or for them to switch to cdn2.example.net to keep working).\r\n\r\nOverall, I'm not a fan of disabling the upgrade, even with the newer \"compromise\" of only supporting it with ECH.  It's overall a good thing if HTTPSSVC and ECH force more HTTPS usage, and it seems a reasonable requirement in 2020.  The ECH-only part just adds an unnecessary (and kinda weird) complication that I'd really rather not support.",
          "createdAt": "2020-06-11T20:39:57Z",
          "updatedAt": "2020-06-11T20:39:57Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "This comes down to the ability to make a risk/reward business case for enabling ECH for existing shared domains.  With this capability there may be a chance to make a business case from a risk/effort trade-off.  Without this capability I don't see those large shared domains ever getting ECH enabled.   ie, who is going to care enough and push hard enough to force taking the risk of breaking sites or risk making customers unhappy?  I could see CDNs with \"free tiers\" just enabling ECH for shared domains, but the risk/reward and business drivers may not exist yet in the commercial space.\r\n\r\nIt may be a reasonable decision to decide not to do this from a complexity perspective, but with the understanding that we should not then expect default ECH enablement for existing sites in some of the environments that would most benefit.",
          "createdAt": "2020-06-11T21:32:14Z",
          "updatedAt": "2020-06-11T21:32:14Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Getting HTTPSSVC on those domains is still a benefit for load balancing, HTTP/3 deployment, and the HTTPS upgrade, no? And any risks around ECH itself would be there regardless.\r\n\r\nThis would make sense if moving to another CNAME to weather the HTTPS upgrade was the limiting factor against a hosting provider offering ECH by default. Is that really the case here?",
          "createdAt": "2020-06-11T21:38:40Z",
          "updatedAt": "2020-06-11T21:38:40Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "It's not just an issue of moving CNAMEs.  The issue is that some \"bulk\" CDN configurations have a mixture of HTTP-only, HTTPS-only, and HTTP+HTTPS mixed hostnames.  There's not always a clear differentiator between these, so enabling HSTS-style behavior must be opt-in which then precludes enabling ECH in anything other than an opt-in manner.",
          "createdAt": "2020-06-11T21:47:28Z",
          "updatedAt": "2020-06-11T21:47:28Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 to using the proposal in #166 to address this as an extension.",
          "createdAt": "2020-06-17T22:11:59Z",
          "updatedAt": "2020-06-17T22:11:59Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does that (or this PR, for that matter) actually disable the upgrade? #156 says you redirect to HTTPS on the mere presence of the HTTPS record, without following alias forms or anything.",
          "createdAt": "2020-06-17T22:25:43Z",
          "updatedAt": "2020-06-17T22:25:43Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Presumably, a client that has to discard the entire RR would not interpret it as being \"present\"?\r\n",
          "createdAt": "2020-06-17T22:55:51Z",
          "updatedAt": "2020-06-17T22:55:51Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If it needs to follow an alias form to find the critical extension, it won't notice.",
          "createdAt": "2020-06-18T01:44:02Z",
          "updatedAt": "2020-06-18T01:44:02Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Presumably at that point  (if it just followed the Alias) and found the effectively-empty HTTPS RRset and A/AAAA records then it would just use the A/AAAA records.\r\n",
          "createdAt": "2020-06-18T02:15:45Z",
          "updatedAt": "2020-06-18T02:15:45Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "If we had support for mandatory=, then that would allow clients to not implement disable-https-upgrade but for servers to specify that records are only available to clients implementing support which might make it safe to include here?",
          "createdAt": "2020-06-18T02:18:23Z",
          "updatedAt": "2020-06-18T02:18:23Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The behavior is that it *doesn't* follow the alias form records. That the second DNS query might hit A/AAAA records and miss the service form is exactly why the redirect should fire without following.",
          "createdAt": "2020-06-18T02:36:45Z",
          "updatedAt": "2020-06-18T02:36:45Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "disable-https-upgrade can't be present on an Alias form record.\r\nIf you want to use Alias form you have to be ok with the upgrade to HTTPS.",
          "createdAt": "2020-06-18T02:50:45Z",
          "updatedAt": "2020-06-18T02:50:45Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We need to put together DNS Records that can be used to validate correct/incorrect behavior. ",
          "createdAt": "2020-06-18T02:54:22Z",
          "updatedAt": "2020-06-18T02:54:22Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah okay, I think I misunderstood you. Yeah, if the expectation is that alias form precludes disabling the upgrade, #156 is consistent with all this.\r\n\r\nThough I still maintain that, as it's 2020, this is silly. :-)",
          "createdAt": "2020-06-18T02:56:29Z",
          "updatedAt": "2020-06-18T02:56:29Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Now that we have \"mandatory\" (#166), I think we should postpone this design to a separate document.",
          "createdAt": "2020-07-06T15:09:48Z",
          "updatedAt": "2020-07-06T15:09:48Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Deferring to a potential future draft based on need.",
          "createdAt": "2020-07-10T17:25:01Z",
          "updatedAt": "2020-07-10T17:25:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTg1MzE4",
          "commit": {
            "abbreviatedOid": "aa287bd"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "How strongly is there a need for such a key? It seems a bit odd to define the key and then strongly discourage it. If anything, it should be marked as SHOULD NOT use or support, which seems tenuous.\n\nIf deployments need something like this in the future, I\u2019d prefer to see it as an extension. ",
          "createdAt": "2020-06-11T04:32:10Z",
          "updatedAt": "2020-06-11T04:34:37Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Typo: tennt",
              "createdAt": "2020-06-11T04:32:11Z",
              "updatedAt": "2020-06-18T02:55:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 165,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMzMjU5MzQ2",
      "title": "Update changelog",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/165",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-11T18:27:20Z",
      "updatedAt": "2020-06-12T02:18:38Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "4bc31b26ae28241145aa9a9512fda90b762ced97",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-changelog",
      "headRefOid": "93c22271b434af2ef8d1232d0638e98524aef145",
      "closedAt": "2020-06-12T02:18:38Z",
      "mergedAt": "2020-06-12T02:18:38Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "3cded7241830630f92ffa1039b5a9efcb6bea75d"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I'll add that.\n\nOn Thu, Jun 11, 2020, 5:44 PM Erik Nygren <notifications@github.com> wrote:\n\n> *@enygren* commented on this pull request.\n>\n> Do we want to add the alignment with the ESNI draft and the switch from\n> esniconfig to echconfig ? Otherwise looks fine (but I haven't fully\n> scrubbed the diffs)\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/MikeBishop/dns-alt-svc/pull/165#pullrequestreview-429311661>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABO3SL6JST6Q5YW7ORRGQTRWFF2JANCNFSM4N3U4HQA>\n> .\n>\n",
          "createdAt": "2020-06-11T22:55:33Z",
          "updatedAt": "2020-06-11T22:55:33Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzExNjYx",
          "commit": {
            "abbreviatedOid": "c9b67d4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Do we want to add the alignment with the ESNI draft and the switch from esniconfig to echconfig ?  Otherwise looks fine (but I haven't fully scrubbed the diffs)",
          "createdAt": "2020-06-11T21:43:50Z",
          "updatedAt": "2020-06-11T21:43:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 169,
      "id": "MDExOlB1bGxSZXF1ZXN0NDMzODQ4MDUz",
      "title": "Rename HTTPSSVC to HTTPS RR",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/169",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #80 \r\n* Rename HTTPSSVC RR to HTTPS RR     \r\n* Rename \"an SVCB\" to \"a SVCB\"     \r\n* Removed \"design considerations and open issues\" section and some other \"to be removed\" text\r\n* Rename draft to draft-ietf-dnsop-svcb-https\r\n",
      "createdAt": "2020-06-12T19:24:38Z",
      "updatedAt": "2020-06-12T20:12:26Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "3cded7241830630f92ffa1039b5a9efcb6bea75d",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-rename-httpssvc",
      "headRefOid": "b21ac595478036aecfd00e80d3dbc0d0fa1d86ba",
      "closedAt": "2020-06-12T20:12:26Z",
      "mergedAt": "2020-06-12T20:12:25Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "ff5cc8de4c1aacf13e5dedd29b5de0e5522d2145"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDEwOTA5",
          "commit": {
            "abbreviatedOid": "b21ac59"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-12T20:12:17Z",
          "updatedAt": "2020-06-12T20:12:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0MjEyNTE5",
      "title": "Attrleaf is actually RFC8552",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/170",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updated to reflect that Attrleaf draft is actually RFC8552\r\n\r\nI \"think\" I did this correctly - i'm more mmark than kramdown.\r\n",
      "createdAt": "2020-06-14T22:38:10Z",
      "updatedAt": "2020-06-22T17:29:22Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "ff5cc8de4c1aacf13e5dedd29b5de0e5522d2145",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "master",
      "headRefOid": "babb166386358ea54d051cdeb3a3131b05eeda64",
      "closedAt": "2020-06-18T00:32:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will close this as I need to deal with all the CI stuff ",
          "createdAt": "2020-06-18T00:32:08Z",
          "updatedAt": "2020-06-18T00:32:08Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "I'm happy to help with any toolchain issues, if you're still stuck.",
          "createdAt": "2020-06-22T17:29:21Z",
          "updatedAt": "2020-06-22T17:29:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 173,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1NDgzMzM5",
      "title": "s/master/primary/",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/173",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #172",
      "createdAt": "2020-06-16T21:46:12Z",
      "updatedAt": "2020-06-16T22:00:04Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "ff5cc8de4c1aacf13e5dedd29b5de0e5522d2145",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-master-to-primary",
      "headRefOid": "58da5d1c52b46354503c4f305337191f9466a627",
      "closedAt": "2020-06-16T21:59:58Z",
      "mergedAt": "2020-06-16T21:59:58Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "f3e4433b39d4d66147acb149639c25dc8b5a0a1e"
      },
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you! I was on my to doing a pull request but you are too good to me\r\n",
          "createdAt": "2020-06-16T21:50:16Z",
          "updatedAt": "2020-06-16T21:50:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 174,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2MTY1NTQy",
      "title": "minor fix of ABNF",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/174",
      "state": "MERGED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-18T00:46:11Z",
      "updatedAt": "2020-06-23T12:24:53Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "f3e4433b39d4d66147acb149639c25dc8b5a0a1e",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "tjw-fix-abnf",
      "headRefOid": "85042d8aaa8f61251f6461e878338023236781a3",
      "closedAt": "2020-06-18T01:28:34Z",
      "mergedAt": "2020-06-18T01:28:34Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "c73b8e7c89ca2c9e5f7111e71bf1a06245af86d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODc5ODA2",
          "commit": {
            "abbreviatedOid": "85042d8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-18T01:28:25Z",
          "updatedAt": "2020-06-18T01:28:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2MTg4MjMz",
      "title": "Switch NOT REQUIRED to non-2119 language",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/175",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #171",
      "createdAt": "2020-06-18T02:22:13Z",
      "updatedAt": "2020-06-22T18:41:32Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c73b8e7c89ca2c9e5f7111e71bf1a06245af86d3",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-not-required",
      "headRefOid": "6726e47cd3dc8bb659bd294d2557917cc6b0bf1c",
      "closedAt": "2020-06-22T18:41:31Z",
      "mergedAt": "2020-06-22T18:41:31Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "5d00e17e45df8d39fa6b733d037c9281aaa9a06c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTgyMTQy",
          "commit": {
            "abbreviatedOid": "6726e47"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T18:41:27Z",
          "updatedAt": "2020-06-22T18:41:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 176,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2MTkwNzg1",
      "title": "Clarify HTTPS RR definition",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/176",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial attempt to address feedback from @moonshiner by clarifying the HTTPS record definition.",
      "createdAt": "2020-06-18T02:31:55Z",
      "updatedAt": "2020-07-09T20:18:42Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c73b8e7c89ca2c9e5f7111e71bf1a06245af86d3",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-clarify-https-rr",
      "headRefOid": "5d0beaac705a03c7117dc9afb797fea935f9d569",
      "closedAt": "2020-07-09T20:18:42Z",
      "mergedAt": "2020-07-09T20:18:42Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "08a5c8ac0e37848318fa9dc4929b4ee5d85d4e75"
      },
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This works. ",
          "createdAt": "2020-06-18T02:53:06Z",
          "updatedAt": "2020-06-18T02:53:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTgxODUy",
          "commit": {
            "abbreviatedOid": "5a83215"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T18:40:58Z",
          "updatedAt": "2020-06-22T18:41:04Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "We defined the term \"SVCB-compatible\" for this purpose in the terminology section.  I'd prefer to maintain consistency across the document if possible, e.g.\r\n```suggestion\r\nOther SVCB-compatible resource record types\r\n```",
              "createdAt": "2020-06-22T18:40:58Z",
              "updatedAt": "2020-07-09T20:17:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTM4NTY3",
          "commit": {
            "abbreviatedOid": "5d0beaa"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-09T20:18:13Z",
          "updatedAt": "2020-07-09T20:18:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM2MjA3MjU1",
      "title": "updated doc references",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/178",
      "state": "CLOSED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue 177",
      "createdAt": "2020-06-18T03:36:10Z",
      "updatedAt": "2020-06-24T17:27:16Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "c73b8e7c89ca2c9e5f7111e71bf1a06245af86d3",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "tjw-ref-updates",
      "headRefOid": "25deb76f5369aec344000c8294e3f7ebba3db5c6",
      "closedAt": "2020-06-24T16:29:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "the testing did not approve of draft-tls-esni-07, so removed the -07 for now",
          "createdAt": "2020-06-18T03:39:34Z",
          "updatedAt": "2020-06-18T03:39:34Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks like this is blocked due to collision with #179 ",
          "createdAt": "2020-06-22T18:36:00Z",
          "updatedAt": "2020-06-22T18:36:00Z"
        },
        {
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "body": "Actually, I think it's addressed by a combination of #179 and some others I found and have a PR for.",
          "createdAt": "2020-06-24T16:29:06Z",
          "updatedAt": "2020-06-24T16:29:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 179,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4MTA0Nzc5",
      "title": "Fix up references",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/179",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #177, plus a few things I found along the way.",
      "createdAt": "2020-06-22T18:19:50Z",
      "updatedAt": "2020-06-22T18:35:11Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0c53419523164c6822ed3b9c078e5e7db2bbe3ab",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "references",
      "headRefOid": "29793f8d73ca5153afc2a864dcf0ede9e54a6818",
      "closedAt": "2020-06-22T18:35:11Z",
      "mergedAt": "2020-06-22T18:35:10Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "1cf5f200375fd73b25582f13accd84bbb75b7595"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTc4MTU2",
          "commit": {
            "abbreviatedOid": "29793f8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T18:35:05Z",
          "updatedAt": "2020-06-22T18:35:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 197,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4NTM4NTgw",
      "title": "added RRType requests in IANA Considerations",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/197",
      "state": "MERGED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Make specific IANA requests in the IANA Considerations section",
      "createdAt": "2020-06-23T12:30:10Z",
      "updatedAt": "2020-07-10T17:06:27Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9a3311b91969b2aabb83f444a6fa74e9d640fcd0",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "tjw-iana-section",
      "headRefOid": "e1ab2a4e17eff50bca13aa483fb675d5b7f1f17a",
      "closedAt": "2020-07-10T17:06:27Z",
      "mergedAt": "2020-07-10T17:06:27Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "137242b8365fc2084a930ab6008240af8bddfe36"
      },
      "comments": [
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I updated this with the IANA Values that have been assigned.  \r\n\r\n",
          "createdAt": "2020-06-30T19:44:30Z",
          "updatedAt": "2020-06-30T19:44:30Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "This looks good but maybe we should hold off on it until after WGLC, just in case there are any last-minute changes?",
          "createdAt": "2020-07-10T01:13:15Z",
          "updatedAt": "2020-07-10T01:13:15Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bemasc the allocations are already made, so we may as well mention the values, right?",
          "createdAt": "2020-07-10T01:51:47Z",
          "updatedAt": "2020-07-10T01:51:47Z"
        },
        {
          "author": "moonshiner",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We should mention the values as they are set by IANA. ",
          "createdAt": "2020-07-10T03:47:23Z",
          "updatedAt": "2020-07-10T03:47:23Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODQ3MTg5",
          "commit": {
            "abbreviatedOid": "87f4414"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-24T17:12:46Z",
          "updatedAt": "2020-06-24T17:12:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 198,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4NTUxMDAx",
      "title": "added colons to clean up the text",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/198",
      "state": "MERGED",
      "author": "moonshiner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This should cover all the missing colons mentioned \r\n\r\nhttps://github.com/MikeBishop/dns-alt-svc/issues/186\r\n",
      "createdAt": "2020-06-23T12:53:21Z",
      "updatedAt": "2020-06-28T17:10:23Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "5d00e17e45df8d39fa6b733d037c9281aaa9a06c",
      "headRepository": "moonshiner/dns-alt-svc",
      "headRefName": "tjw-add-colons",
      "headRefOid": "631091e4707c7bc60f4a033360655068fcd8f540",
      "closedAt": "2020-06-28T17:10:23Z",
      "mergedAt": "2020-06-28T17:10:23Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "9a3311b91969b2aabb83f444a6fa74e9d640fcd0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzk3NDg1",
          "commit": {
            "abbreviatedOid": "631091e"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-28T17:10:17Z",
          "updatedAt": "2020-06-28T17:10:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 199,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4OTQ1NzI0",
      "title": "Incorporate comments from implementer review",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/199",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We got some tweaks from a server implementer review\r\n* Everything additional should go in Additional\r\n* Authoritatives should include DNSSEC for the in-bailiwick followup records\r\n* Harmonize #recursive-behavior with #incomplete-responses",
      "createdAt": "2020-06-24T03:58:53Z",
      "updatedAt": "2020-07-11T16:27:38Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "5d00e17e45df8d39fa6b733d037c9281aaa9a06c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-implementer-review",
      "headRefOid": "3629dac5cf768b6d7285e35c7958edb0207e5841",
      "closedAt": "2020-07-11T16:27:38Z",
      "mergedAt": "2020-07-11T16:27:38Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "23fd6011d3f47c061055d3f805a908797b9661c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzU5MzY4",
          "commit": {
            "abbreviatedOid": "a177de9"
          },
          "author": "wtoorop",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T15:26:00Z",
          "updatedAt": "2020-06-24T15:26:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Including useful records in the additional section, is called additional section processing in RFC1035.\r\nWhen comparing SVCB with MX and SRV, note that MX and SRV may not refer to an alias. This is documented in https://tools.ietf.org/html/rfc2181#section-10.3 and in https://tools.ietf.org/html/rfc2782 on page 4, quoting: \"The name MUST NOT be an alias\".",
              "createdAt": "2020-06-24T15:26:01Z",
              "updatedAt": "2020-07-09T21:28:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzYwMzEx",
          "commit": {
            "abbreviatedOid": "a177de9"
          },
          "author": "wtoorop",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T15:27:01Z",
          "updatedAt": "2020-06-24T15:27:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I suggest to remove the text in parenthesis.",
              "createdAt": "2020-06-24T15:27:01Z",
              "updatedAt": "2020-07-09T21:28:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2Nzc0MjI5",
          "commit": {
            "abbreviatedOid": "a177de9"
          },
          "author": "wtoorop",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T15:42:21Z",
          "updatedAt": "2020-06-24T15:42:22Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "So, comparing this to SRV serving by Unbound: Unbound will include useful RR's in the additional section (i.e. address records for the SRV targets) when they can be found in cache.\r\nThe current text states that ``\"resolve\" means the resolver's ordinary recursive resolution procedure'' rather firmly (verbatim on line 637 actually), but this ignores the modus operandi of providing helpful records from cache (for which you can be certain that it will help improve performance; opposed to doing additional recursive resolution).\r\nGetting the RRs for the additional from cache also plays along nicely with the authoritative providing the A, AAAA and SVCB records which it has in-bailiwick in the additional section.",
              "createdAt": "2020-06-24T15:42:22Z",
              "updatedAt": "2020-07-09T21:28:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTgxODg3",
          "commit": {
            "abbreviatedOid": "3629dac"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-09T21:28:43Z",
          "updatedAt": "2020-07-09T21:28:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "OK, removed.  CNAMEs within the bailiwick would be a strange configuration anyway.",
              "createdAt": "2020-07-09T21:28:43Z",
              "updatedAt": "2020-07-09T21:28:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTgyODcx",
          "commit": {
            "abbreviatedOid": "3629dac"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-09T21:30:30Z",
          "updatedAt": "2020-07-09T21:30:31Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "That behavior is compatible with the text as-is, as discussed in \"Generating and using incomplete responses\".  However, I have adjusted the text here in an attempt to reduce confusion about the motivation and requirements.",
              "createdAt": "2020-07-09T21:30:31Z",
              "updatedAt": "2020-07-09T21:30:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODEzMzc5",
          "commit": {
            "abbreviatedOid": "3629dac"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-11T16:27:32Z",
          "updatedAt": "2020-07-11T16:27:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 200,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM5MzE3ODYw",
      "title": "Fix more references",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/200",
      "state": "MERGED",
      "author": "MikeBishop",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-24T16:29:41Z",
      "updatedAt": "2020-06-24T17:10:24Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "5d00e17e45df8d39fa6b733d037c9281aaa9a06c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "references",
      "headRefOid": "94690bf429d8cd4df7ba2e9fc9e24c658c788bfd",
      "closedAt": "2020-06-24T17:10:24Z",
      "mergedAt": "2020-06-24T17:10:24Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "3d1b580ed11645e889e55bc5e276dbab383414c8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODQ1MTg4",
          "commit": {
            "abbreviatedOid": "94690bf"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-24T17:10:03Z",
          "updatedAt": "2020-06-24T17:10:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 201,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMzM2MTI1",
      "title": "Adjust advice on populating the client's ALPN set",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/201",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #194",
      "createdAt": "2020-06-26T01:37:36Z",
      "updatedAt": "2020-07-11T17:46:59Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9a3311b91969b2aabb83f444a6fa74e9d640fcd0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-better",
      "headRefOid": "6cfd415a0e9a31b89206b62050b9fbdd77a935da",
      "closedAt": "2020-07-11T17:46:59Z",
      "mergedAt": "2020-07-11T17:46:59Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "0ea348a7fcc88ccd183c601a50a22eecf160d9ec"
      },
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we should say *something*. Otherwise the analogy to Alt-Svc, which prescribed the wrong thing, may cause implementers to do the wrong thing. (The wrong thing being considered compliant by confused clients results in deployment implications for a server trying to use SVCB.) But, given the point is to disavow that and get these Alt-Svc-like mechanisms out of the business of messing with ALPN as much as possible, I'm good with something shorter and lighter on details.\r\n\r\nThough that suggestion might be a little *too* light? It's arguably not *quite* a hint because an `h3` SVCB record will (at least for now) result in different ALPN advertisement than an `h2` record due to different sets of ALPNs being \"compatible\". If we don't want to go down the rabbithole of defining that just yet, maybe something like:\r\n\r\n> Note a client may not be willing to negotiate all protocols over all connections, and would advertise ALPN protocols accordingly. For example, an HTTP client using an `h3` record for a QUIC connection would not advertise `http/1.1` or `h2`. However, when using an `h2` record for a TCP connection, it may advertise both `http/1.1` and `h2`, and accept either protocol from the server.\r\n\r\nWDYT?",
          "createdAt": "2020-07-10T04:30:28Z",
          "updatedAt": "2020-07-10T04:31:32Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Are we comfortable with what is here and ready to merge it, or are changes still desired?\r\n(It is looking fairly reasonable to me.)",
          "createdAt": "2020-07-11T16:34:55Z",
          "updatedAt": "2020-07-11T16:34:55Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to merge this as-is.  It may be overly verbose, but we seem to have rough consensus that it is correct, and perhaps we can shorten it later.\r\n\r\nI want to be cautious about removing text here because I think there is a real risk of implementors getting it wrong in various ways, and previous drafts have resulted in differing interpretations.",
          "createdAt": "2020-07-11T17:46:50Z",
          "updatedAt": "2020-07-11T17:46:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDg3NjMz",
          "commit": {
            "abbreviatedOid": "73cd4ee"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks! One quick question below.",
          "createdAt": "2020-07-01T18:02:03Z",
          "updatedAt": "2020-07-01T18:02:42Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I'm not quite following this sentence (old and new version). Is it saying the same thing as the SHOULD above or something else?",
              "createdAt": "2020-07-01T18:02:03Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTQ5NTA4",
          "commit": {
            "abbreviatedOid": "73cd4ee"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T19:43:44Z",
          "updatedAt": "2020-07-01T19:43:45Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "It's kind of the inverse.  There are really two requirements:\r\n* If you use an ALPN from the list, you SHOULD accompany it with any other ALPN you would like to do on that transport, whether or not it's in the list.\r\n* You MUST only form one ClientHello per transport in total, so if you like two ALPNs from the list, they have to go in the same ClientHello (if that is possible).\r\n\r\nThe first requirement defends against attackers on the DNS path, and the second defends against attackers on the network path.\r\n\r\nThat said, these requirements are effectively kind of redundant, so we could possibly simplify this text.  Suggestions welcome.",
              "createdAt": "2020-07-01T19:43:44Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTU3ODE4",
          "commit": {
            "abbreviatedOid": "73cd4ee"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T19:58:02Z",
          "updatedAt": "2020-07-01T19:58:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Ah. I guess my interpretation was that, if `ClientHelloFromSVCB(proto=h2)` and `ClientHelloFromSVCB(proto=http/1.1)` both result in the same ClientHello (based on the rule that you include all of them), that's fine whether I connect to them serially or in parallel or whatever.\r\n\r\nWhat does consolidating mean if, say, I see SVCB records for h2 and http/1.1 but other properties, like ECH keys or addresses, are different? I figured the model would be that you pick which one(s) you want, and send out ClientHellos for them. If you decided you wanted to race the http/1.1 and h2 records, they'll end up sending the same ALPN. If you decided you wanted to race an h3 one in there, it will be different. When picking them, you probably do need to be aware of the correspondence, but I think the impact is less security and more making your connection strategy coherent.",
              "createdAt": "2020-07-01T19:58:02Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjg4NzMy",
          "commit": {
            "abbreviatedOid": "ffe88cd"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T01:18:08Z",
          "updatedAt": "2020-07-02T01:18:09Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "OK, evidently the previous text was not clear enough.  I've reorganized it; hopefully its less ambiguous now.",
              "createdAt": "2020-07-02T01:18:08Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjkxNTEz",
          "commit": {
            "abbreviatedOid": "ffe88cd"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T01:27:49Z",
          "updatedAt": "2020-07-02T01:27:49Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "FWIW, I find \"downgrade attacks within a transport\" somewhat confusing. Could we add an example?",
              "createdAt": "2020-07-02T01:27:49Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjk1MjM5",
          "commit": {
            "abbreviatedOid": "6adefff"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T01:40:31Z",
          "updatedAt": "2020-07-02T01:40:32Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "OK, I replaced that language with a more explicit definition.",
              "createdAt": "2020-07-02T01:40:31Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjk1NzE2",
          "commit": {
            "abbreviatedOid": "6adefff"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T01:42:11Z",
          "updatedAt": "2020-07-02T01:42:11Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Much clearer -- thanks!",
              "createdAt": "2020-07-02T01:42:11Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODE4NDk4",
          "commit": {
            "abbreviatedOid": "6adefff"
          },
          "author": "davidben",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-02T15:48:34Z",
          "updatedAt": "2020-07-02T15:55:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Nitpick: Not sure I've seen these called \"IDs\" before. RFC7301 says \"protocol\" or \"protocol name\". RFC8446 says \"ALPN protocol\". RFC7838 says \"ALPN protocol name\" with a few instances of \"ALPN protocol\".",
              "createdAt": "2020-07-02T15:48:34Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            },
            {
              "originalPosition": 12,
              "body": "Might want to mention in this example that this client supports [\"http/1.1\", \"h2\", \"h3\"]. If the client supports \"h4\" which also goes over QUIC, the example would be different.",
              "createdAt": "2020-07-02T15:50:03Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTQ1MjAy",
          "commit": {
            "abbreviatedOid": "6adefff"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-09T20:28:37Z",
          "updatedAt": "2020-07-09T20:28:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "\"Supported IDs\" seems to be ambiguous here.  Needs clarification that this is \"supported by the client\".",
              "createdAt": "2020-07-09T20:28:37Z",
              "updatedAt": "2020-07-10T01:37:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDcwMTY4",
          "commit": {
            "abbreviatedOid": "6cfd415"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T01:38:44Z",
          "updatedAt": "2020-07-10T01:38:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I've reworked the terminology to be more precise, and use \"Identification Sequence\", \"protocol name\", and \"protocol\" as appropriate.",
              "createdAt": "2020-07-10T01:38:44Z",
              "updatedAt": "2020-07-10T01:38:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDcwMTk1",
          "commit": {
            "abbreviatedOid": "6cfd415"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T01:38:50Z",
          "updatedAt": "2020-07-10T01:38:51Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Done",
              "createdAt": "2020-07-10T01:38:50Z",
              "updatedAt": "2020-07-10T01:38:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDcwMjI5",
          "commit": {
            "abbreviatedOid": "6cfd415"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T01:38:58Z",
          "updatedAt": "2020-07-10T01:38:58Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done",
              "createdAt": "2020-07-10T01:38:58Z",
              "updatedAt": "2020-07-10T01:38:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDczNTI1",
          "commit": {
            "abbreviatedOid": "6cfd415"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T01:51:14Z",
          "updatedAt": "2020-07-10T01:51:14Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "FWIW, these steps are exactly what I'm implementing in our client already, so this seems to be the most practical approach.",
              "createdAt": "2020-07-10T01:51:14Z",
              "updatedAt": "2020-07-10T01:51:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MTAyMjM3",
          "commit": {
            "abbreviatedOid": "6cfd415"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Why so many words when this could be entirely silent on the subject instead?\r\n\r\nOr, if you feel the need to say something, say:\r\n\r\n> In order to prevent downgrade attacks, clients need to ensure that all ALPN values that it might be willing to use are advertised.  Information in SVCB only provides hints about supported protocols.  An authenticated connection to a server is the only reliable way in which clients can determine what protocols are supported by that server.\r\n\r\nNote the absence of normative language.  RFC 7301 has everything necessary in that area.",
          "createdAt": "2020-07-10T03:39:32Z",
          "updatedAt": "2020-07-10T03:39:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMzY4OTA4",
      "title": "Rework ABNF for clarity and simpler implementation",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/202",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #185, #192",
      "createdAt": "2020-06-26T04:05:32Z",
      "updatedAt": "2020-07-13T20:11:12Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "73b89134ed6ac7dbbd427b3e36fb3d56f2c41b14",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-escape",
      "headRefOid": "b323165bc84ff1e4e6e7d3c38623b21ece17c4df",
      "closedAt": "2020-07-13T20:11:12Z",
      "mergedAt": "2020-07-13T20:11:12Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "b9693794693edcdd6eeb75b5fb4a4322730e8e58"
      },
      "comments": [
        {
          "author": "lcampbel",
          "authorAssociation": "NONE",
          "body": "I think these changes do make the text clearer. But there are two different ways to implement a parser for this. The suggested approach is essentially to have an alternate character-string parser that (1) splits on unescaped commas, and (2) returns an array of strings rather than a string. I think an equally appealing approach is to first use a character-string parser that always returns a string and ignores backslash escapes other than \\\". All other uses (such as TXT records) would unescape the returned string; the alpn parser would first split the returned string on unescaped commas, then unescape each component string. I believe these two approaches are functionally identical but I find the latter a bit cleaner.",
          "createdAt": "2020-07-01T17:50:14Z",
          "updatedAt": "2020-07-01T17:50:14Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@lcampbel Thanks for the review.  I think that would indeed be a fine way to implement, but describing that procedure in ABNF seems pretty complicated, especially due to the many ambiguities of RFC 1035.  (I think it would be great if someone would write a followup to 1035 that pins down the precise zone file format rules, but this draft is already further down that road than I would like.)",
          "createdAt": "2020-07-02T02:15:09Z",
          "updatedAt": "2020-07-02T02:15:09Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDEyOTIz",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T04:56:13Z",
          "updatedAt": "2020-06-26T04:56:14Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "The double quotes are part of the second alpn-id. so this should read.\r\n\r\nThis would be decoded as three `alpn-id`s: 'example1', '\"weird, why?\"', and\r\n'example2'.\r\n ",
              "createdAt": "2020-06-26T04:56:13Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDE3NTk0",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T05:13:26Z",
          "updatedAt": "2020-06-26T05:13:27Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Why doesn't this just say \"unescaped comma\"?  \\044 really does not buy anything over \"\\\\,\" when parsing.   So is '\\\\,' now also a separator or is it a syntax error?",
              "createdAt": "2020-06-26T05:13:26Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjY4NzAy",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T12:52:41Z",
          "updatedAt": "2020-06-26T12:52:42Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "In this PR, this example is first parsed to a sequence of three `char-string`s: `example1`, `\"weird\\044 why?\"`, and `example2`.  Then the character-string decoding algorithm is applied to each `char-string`, yielding `example1`, `weird, why?`, and `example2`.  This is because double-quotes are optional in `char-string`.\r\n\r\nMy goal here is to make the parsing algorithm easy to implement, so please suggest changes.  I proposed this formulation to minimize the amount of new parsing code required (reuse the same decoding algorithm), while making sure that all `alpn-id`s are representable, including those that contain commas and spaces. ",
              "createdAt": "2020-06-26T12:52:41Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDIxMDg3",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T16:10:13Z",
          "updatedAt": "2020-06-26T16:10:13Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "The proposed algorithm here is \"character-string decode, split on commas, character-string decode again\".  Therefore:\r\n* `alpn=ex1,ex2\\,ex3` is `ex1`, `ex2`, and  `ex3`, because the first-pass decoding unescapes the entire value\r\n* `alpn=ex1,ex2\\\\,ex3` is presumably a syntax error, because `ex2\\` is not a valid character-string, because `\\` is supposed to escape something but there is nothing to escape.\r\n* `alpn=ex1,ex2\\\\\\\\,ex3` is `ex1`, `ex2\\`, and `ex3`",
              "createdAt": "2020-06-26T16:10:13Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjA4OTA4",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T21:35:08Z",
          "updatedAt": "2020-06-26T21:35:08Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "If you do this then \"foo\\044bar\" becomes \"foo,bar\"  which becomes \"foo\" and \"bar\".   Following your method you would have to have \"foo\\\\\\\\044bar\" which becomes \"foo\\044bar\" which becomes \"foo,bar\".   And to get a alpn-id that is \"foo\\044bar\" I would need to enter \"foo\\\\\\\\\\\\\\\\044bar\"  (4 backslashes) instead of \"foo\\\\\\\\044bar\" (2 backslashes).\r\n\r\nAll this for not extending the existing character string parser to know if comma is a special or not.  'if (comma_processing && c == ',' && !escaped) end-of-alpn-id;\". ",
              "createdAt": "2020-06-26T21:35:08Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjEwOTE2",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T21:39:58Z",
          "updatedAt": "2020-06-26T21:39:59Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "Detecting escaped commas is dead easy.  GO LOOK AT HOW BIND DOES IT.  All this just makes it harder for the person entering the data.  ",
              "createdAt": "2020-06-26T21:39:58Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjIzNzU4",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-26T22:13:09Z",
          "updatedAt": "2020-06-26T22:13:10Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "Also the point of using quoted strings is to turn off special processing to get the full token at places that would otherwise terminate the token.   Once you have the full token you don't need to drop them a second time.",
              "createdAt": "2020-06-26T22:13:10Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjUxMDkz",
          "commit": {
            "abbreviatedOid": "aab400b"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-27T00:05:34Z",
          "updatedAt": "2020-06-27T00:05:34Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "And so you don't have to search around in the repository to find it. \r\n\r\nAt this point the double quotes have been processed.  The token still contains all the escapes.\r\n\r\n```\r\n+static isc_result_t\r\n+alpn_fromtxt(isc_textregion_t *source, isc_buffer_t *target) {\r\n+       isc_textregion_t source0 = *source;\r\n+       do {\r\n+               RETERR(commatxt_fromtext(&source0, true, target));\r\n+       } while (source0.length != 0);\r\n+       return (ISC_R_SUCCESS);\r\n+}\r\n```\r\n\r\n```\r\n@@ -1390,7 +1432,8 @@ name_length(const dns_name_t *name) {\r\n }\r\n \r\n static isc_result_t\r\n-txt_totext(isc_region_t *source, bool quote, isc_buffer_t *target) {\r\n+commatxt_totext(isc_region_t *source, bool quote, bool comma,\r\n+               isc_buffer_t *target) {\r\n        unsigned int tl;\r\n        unsigned int n;\r\n        unsigned char *sp;\r\n@@ -1435,10 +1478,12 @@ txt_totext(isc_region_t *source, bool quote, isc_buffer_t *target) {\r\n                /*\r\n                 * Escape double quote and backslash.  If we are not\r\n                 * enclosing the string in double quotes also escape\r\n-                * at sign and semicolon.\r\n+                * at sign and semicolon unless comma is set.  If\r\n+                * comma is set then escape commas.\r\n                 */\r\n-               if (*sp == 0x22 || *sp == 0x5c ||\r\n-                   (!quote && (*sp == 0x40 || *sp == 0x3b))) {\r\n+               if (*sp == 0x22 || *sp == 0x5c || (comma && *sp == 0x2c) ||\r\n+                   (!comma && !quote && (*sp == 0x40 || *sp == 0x3b)))\r\n+               {\r\n                        if (tl < 2) {\r\n                                return (ISC_R_NOSPACE);\r\n                        }\r\n@@ -1465,9 +1510,14 @@ txt_totext(isc_region_t *source, bool quote, isc_buffer_t *target) {\r\n }\r\n \r\n static isc_result_t\r\n-txt_fromtext(isc_textregion_t *source, isc_buffer_t *target) {\r\n+txt_totext(isc_region_t *source, bool quote, isc_buffer_t *target) {\r\n+       return (commatxt_totext(source, quote, false, target));\r\n+}\r\n+\r\n+static isc_result_t\r\n+commatxt_fromtext(isc_textregion_t *source, bool comma, isc_buffer_t *target) {\r\n        isc_region_t tregion;\r\n-       bool escape;\r\n+       bool escape, seen_comma = false;\r\n        unsigned int n, nrem;\r\n        char *s;\r\n        unsigned char *t;\r\n@@ -1496,6 +1546,10 @@ txt_fromtext(isc_textregion_t *source, isc_buffer_t *target) {\r\n        }\r\n        while (n-- != 0) {\r\n                c = (*s++) & 0xff;\r\n+               if (comma && !escape && c == ',') {\r\n+                       seen_comma = true;\r\n+                       break;\r\n+               }\r\n                if (escape && (d = decvalue((char)c)) != -1) {\r\n                        c = d;\r\n                        if (n == 0) {\r\n@@ -1534,11 +1588,32 @@ txt_fromtext(isc_textregion_t *source, isc_buffer_t *target) {\r\n        if (escape) {\r\n                return (DNS_R_SYNTAX);\r\n        }\r\n+       if (comma) {\r\n+               /*\r\n+                * Disallow empty ALPN at start or in the middle.\r\n+                */\r\n+               if (s == source->base || (seen_comma && s == source->base + 1))\r\n+               {\r\n+                       return (DNS_R_SYNTAX);\r\n+               }\r\n+               isc_textregion_consume(source, s - source->base);\r\n+               /*\r\n+                * Disallow empty ALPN at end.\r\n+                */\r\n+               if (seen_comma && source->length == 0) {\r\n+                       return (DNS_R_SYNTAX);\r\n+               }\r\n+       }\r\n        *tregion.base = (unsigned char)(t - tregion.base - 1);\r\n        isc_buffer_add(target, *tregion.base + 1);\r\n        return (ISC_R_SUCCESS);\r\n }\r\n\r\n +static isc_result_t\r\n+txt_fromtext(isc_textregion_t *source, isc_buffer_t *target) {\r\n+       return (commatxt_fromtext(source, false, target));\r\n+}\r\n+\r\n static isc_result_t\r\n txt_fromwire(isc_buffer_t *source, isc_buffer_t *target) {\r\n        unsigned int n;\r\n```",
              "createdAt": "2020-06-27T00:05:34Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzI4NjQ4",
          "commit": {
            "abbreviatedOid": "9307a30"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-27T22:31:06Z",
          "updatedAt": "2020-06-27T22:31:07Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "OK, I've updated the PR to reflect this approach.  Please review.",
              "createdAt": "2020-06-27T22:31:06Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTQyMzI5",
          "commit": {
            "abbreviatedOid": "9307a30"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-29T22:21:50Z",
          "updatedAt": "2020-06-29T22:21:50Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "I would say that they are key value pairs.  If the definition of a value consists of a list (i.e. ipv4hints, ipv6hints, alpn) the list elements are separated by a unescaped \",\".  To add a literal comma to an element in a list, the comma must be escaped.   At the moment you have everything defined to be a list including the generic form which clearly is not a list.",
              "createdAt": "2020-06-29T22:21:50Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDg3Njc3",
          "commit": {
            "abbreviatedOid": "b05042c"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T01:23:51Z",
          "updatedAt": "2020-07-01T01:23:52Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "OK, I've changed the text to reflect this idea.",
              "createdAt": "2020-07-01T01:23:51Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDkyMjM5",
          "commit": {
            "abbreviatedOid": "b05042c"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T01:39:35Z",
          "updatedAt": "2020-07-01T01:39:35Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "s/splitting on commas/splitting on unescaped commas/",
              "createdAt": "2020-07-01T01:39:35Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDkzMjE5",
          "commit": {
            "abbreviatedOid": "b05042c"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T01:43:07Z",
          "updatedAt": "2020-07-01T01:43:07Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "It would be useful to never have to apply escape processing to port so append.  \"No escape processing should be applied to the port value.\"",
              "createdAt": "2020-07-01T01:43:07Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDkzNTY5",
          "commit": {
            "abbreviatedOid": "b05042c"
          },
          "author": "marka63",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T01:44:23Z",
          "updatedAt": "2020-07-01T01:44:23Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Similarly disallow escape processing for ipv4hints and ipv6hints.",
              "createdAt": "2020-07-01T01:44:23Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTIyMjM4",
          "commit": {
            "abbreviatedOid": "f1b7e42"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T14:28:18Z",
          "updatedAt": "2020-07-01T14:28:18Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Done",
              "createdAt": "2020-07-01T14:28:18Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTIyMjcy",
          "commit": {
            "abbreviatedOid": "f1b7e42"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T14:28:19Z",
          "updatedAt": "2020-07-01T14:28:20Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Done",
              "createdAt": "2020-07-01T14:28:20Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTIyNTE0",
          "commit": {
            "abbreviatedOid": "f1b7e42"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T14:28:35Z",
          "updatedAt": "2020-07-01T14:28:36Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Done",
              "createdAt": "2020-07-01T14:28:35Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDkwNzQ4",
          "commit": {
            "abbreviatedOid": "9fa40a2"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comments above.",
          "createdAt": "2020-07-13T18:19:23Z",
          "updatedAt": "2020-07-13T19:02:21Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Do we want to describe char-string a little more here?  \r\n(ie, say how it relates to  {{!RFC1035}} character-string, even if the full definition is in the appendix?)  ",
              "createdAt": "2020-07-13T18:19:23Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 18,
              "body": "Move this background context up to the introduction to {{svcb}} ?\r\n\r\n\"SVCB RRs are extensible by SvcParams which is a list of tuples consisting of a SvcParamKey with an optional SvcParamValue. Each SvcParamKey has a presentation string which maps to a registered number. Values are in a format specific to the SvcParamKey.  Their definition should specify both their presentation format and wire encoding (e.g., domain names, binary data, or numeric values).  The initial SvcParamKeys and formats are defined in {{keys}}.\"\r\n",
              "createdAt": "2020-07-13T18:24:08Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 36,
              "body": "Should we split out and define SvcParamValue ?\r\n\r\n```suggestion\r\n    SvcParam    = SvcParamKey [\"=\" SvcParamValue]\r\n    SvcParamValue = char-string\r\n```\r\n",
              "createdAt": "2020-07-13T18:31:49Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nThe definition of each key indicates that SvcParamValue is either \r\nempty, single-valued, or multi-valued.  To parse a single-valued SvcParam, the parser applies the\r\n```",
              "createdAt": "2020-07-13T18:34:14Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nthe wire-format encoding.  To parse a multi-valued SvcParam, the parser applies\r\n```",
              "createdAt": "2020-07-13T18:34:32Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 64,
              "body": "Do we want to be more consistent on when we mean a SvcParamKey\r\nvs SvcParam?  We use \"key\" here in a few places in a way that is potentially\r\nambiguous and it might be better to tighten that up minimize the use\r\nof bare \"key\".  At least with value vs SvcParamValue they do mean different things.",
              "createdAt": "2020-07-13T18:35:24Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 82,
              "body": "```suggestion\r\n\"alpn\" is a multi-valued SvcParamKey.  Each decoded value in the \"alpn\" value list\r\n```",
              "createdAt": "2020-07-13T18:39:58Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 138,
              "body": "Is there a weird mismatch here with other value encodings?  Is there a reason presentation format for this isn't char-string escaped.  Do we want to at least call this out?  (ie, that base64 is used here for more condensed encoding and that no escaping is needed since it falls into non-special?)",
              "createdAt": "2020-07-13T18:46:49Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 184,
              "body": "Should this be \"\\\\\\\\,\" ?",
              "createdAt": "2020-07-13T18:48:29Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 184,
              "body": "(presumably the \\\\\\\\ is for markdown, not the doc?)",
              "createdAt": "2020-07-13T18:49:24Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 171,
              "body": "It took me a few times reading this to really understand it.  Not sure ways to clarify?\r\nCorner cases:\r\n* What about \\\\44 ?  (encoded comma)\r\n* DQUOTE\r\nPerhaps have an example which shows how these interact?\r\nFor example, that:\r\n\"part1,part2\",\"part3\" \r\nstill gets decoded as all three values?\r\nAnd that \"part1\\\\44part2,part3\" gets decoded as two values?",
              "createdAt": "2020-07-13T19:01:49Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTU0MjUy",
          "commit": {
            "abbreviatedOid": "7719f04"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-13T19:53:41Z",
          "updatedAt": "2020-07-13T19:57:27Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Done (with slight modifications)",
              "createdAt": "2020-07-13T19:53:41Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 138,
              "body": "I added an explanation.  (I think the real reason is that we don't expect TLS stacks to gain support for producing DNS zone file escape codes.)  I also added the escape restriction.",
              "createdAt": "2020-07-13T19:54:26Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 171,
              "body": "OK, clarified relationship with \\044 and quoting.\r\n\r\n> \"part1,part2\",\"part3\"\r\n\r\nThis is not a valid `char-string` so it's excluded.\r\n\r\nI admit that this description isn't perfect, but there is no clear syntax definition for zone files so I don't think we should aim for extreme precision.",
              "createdAt": "2020-07-13T19:56:37Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            },
            {
              "originalPosition": 184,
              "body": "I think this is a difference between github-markdown and the flavor we're using.  In our flavor, \"\\\" doesn't need to be escaped inside a verbatim block (four space indent).",
              "createdAt": "2020-07-13T19:57:16Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTU3OTc1",
          "commit": {
            "abbreviatedOid": "7719f04"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-13T19:59:19Z",
          "updatedAt": "2020-07-13T19:59:19Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "OK, I've tried to do this more consistently.",
              "createdAt": "2020-07-13T19:59:19Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTYzMzQ0",
          "commit": {
            "abbreviatedOid": "7719f04"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-07-13T20:07:35Z",
          "updatedAt": "2020-07-13T20:08:48Z",
          "comments": [
            {
              "originalPosition": 201,
              "body": "Make plural:\r\n```suggestion\r\nFor example, consider these `char-string` SvcParamValues:\r\n```",
              "createdAt": "2020-07-13T20:07:35Z",
              "updatedAt": "2020-07-13T20:10:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 204,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQxMDk4Mzg2",
      "title": "Remove use of \"origin\" for non-HTTP schemes",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/204",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The use of \"origin\" for non-HTTP schemes, and the use of \"origin server\"\r\nto mean only the normal server, were generating confusion.  This PR\r\naligns terminology with the URI specification and limits the use of\r\n\"origin\" to HTTP.\r\n\r\nFixes #183",
      "createdAt": "2020-06-28T18:51:58Z",
      "updatedAt": "2020-07-13T19:52:33Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "73b89134ed6ac7dbbd427b3e36fb3d56f2c41b14",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-origin",
      "headRefOid": "8fca57b07ed16b65bc06f7376988ca32de80eefd",
      "closedAt": "2020-07-13T19:52:33Z",
      "mergedAt": "2020-07-13T19:52:33Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "47dc70b77d0db048de81bb7ded8a3dfadd19d23c"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson Does this address your concern related to \"origin server\"?",
          "createdAt": "2020-06-28T22:11:23Z",
          "updatedAt": "2020-06-28T22:11:23Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "This is looking good to me, but I'll try and re-read it again later today.\r\nI think it would be good for @MikeBishop to review this one as well.",
          "createdAt": "2020-07-11T16:20:50Z",
          "updatedAt": "2020-07-11T16:20:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTM4MjQw",
          "commit": {
            "abbreviatedOid": "a3f8b14"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-07-10T16:30:49Z",
          "updatedAt": "2020-07-10T17:22:42Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nto network services, such as for HTTPS URLs.  SVCB records\r\nallow a service to be provided from multiple alternative endpoints, \r\neach with associated parameters (such as transport protocol\r\n```\r\n\r\nDo we want to define \"service\" and \"endpoint\" explicitly here? Being consistent seems good, but it may even be worth adding a terminology section?  We should also scrub through to see if there are other places we should use \"endpoint\". ",
              "createdAt": "2020-07-10T16:30:49Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 29,
              "body": "Is this really an \"endpoint\"?  Do we want to distinguish \"endpoints\"  (eg, ServiceMode RRs) from AliasMode which aren't really endpoints?  (For that matter, should \"ServiceMode\" be renamed as \"EndpointMode\"?  That might be its own issue.)",
              "createdAt": "2020-07-10T16:33:12Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 100,
              "body": "We should mention for HTTPS records that this is the same as the {{!RFC6454}} origin?",
              "createdAt": "2020-07-10T16:49:04Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 101,
              "body": "Is \"authority address\" defined in an RFC?  It's confusing as \"address\" is too close to A/AAAA record addresses.  Perhaps \"fully qualified authority\"?",
              "createdAt": "2020-07-10T16:53:13Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 94,
              "body": "Should we continue to have a term for the endpoint that would be used for an authority in the absence of a SVCB record (or HTTPS Alt-Svc)?   Perhaps specify that the \"fully qualified authority\" (or whetever we call it) gets used as an implicit endpoint or \"default endpoint\"?",
              "createdAt": "2020-07-10T16:56:02Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n* Provides alternative endpoints that are authoritative for the service,\r\n```",
              "createdAt": "2020-07-10T16:57:36Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nparameters associated with each of these alternative endpoints.\r\n```",
              "createdAt": "2020-07-10T16:58:58Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\n* An \"alternative endpoint\" is a hostname, port number, and other associated\r\n  instructions to the client on how to reach an instance of service.\r\n```",
              "createdAt": "2020-07-10T17:00:01Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 97,
              "body": "Do we want to keep this illustrative example but reword it?  I think having an example here would help.",
              "createdAt": "2020-07-10T17:01:05Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 81,
              "body": "Add \"service name\"?  (The hostname within the authority.)",
              "createdAt": "2020-07-10T17:02:41Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 154,
              "body": "```suggestion\r\nA SVCB-aware client resolves a service with hostname $HOST by attempting\r\n```",
              "createdAt": "2020-07-10T17:03:27Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 157,
              "body": "```suggestion\r\nto determine endpoint (the preferred SvcFieldValue and IP addresses for its service),\r\nusing the following procedure:\r\n```",
              "createdAt": "2020-07-10T17:05:43Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 186,
              "body": "Should it connect to the authority address or $HOST_QNAME?  The latter implies that the AliasForm SVCB record should be ignored if ServiceForm SVCB records were present and didn't work.",
              "createdAt": "2020-07-10T17:13:38Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 186,
              "body": "(This is an interesting question which may want to be its own issue for discussion.)",
              "createdAt": "2020-07-10T17:14:06Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 190,
              "body": "```suggestion\r\n5. If a SVCB record for $SVCB_QNAME does not exist, the received AAAA and/or A\r\n   records from $HOST_QNAME are the preferred IP addresses \r\n   and there is no SvcFieldValue.\r\n```",
              "createdAt": "2020-07-10T17:15:03Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 161,
              "body": "```suggestion\r\n1. Let $SVCB_QNAME be $HOST, plus appropriate prefixes for the scheme\r\n   (see {{svcb-names}}).  Let $HOST_QNAME be $HOST.\r\n```\r\n\r\n\r\n\r\nSeparate out $SVCB_HOST so we don't mutate $HOST in step 3?\r\n",
              "createdAt": "2020-07-10T17:16:04Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 163,
              "body": "```suggestion\r\n2. Issue parallel AAAA/A queries for $HOST_QNAME and a SVCB query for $SVCB_QNAME.\r\n```",
              "createdAt": "2020-07-10T17:16:45Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\n   clients MUST set $HOST_QNAME and $SVCB_QNAME to SvcDomainName (without\r\n```",
              "createdAt": "2020-07-10T17:17:06Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 186,
              "body": "```suggestion\r\n   If none of the options succeed, the client SHOULD connect to $HOST_QNAME directly.\r\n   If that fails, the client SHOULD fall back to $HOST.\r\n```\r\n(SHOULD or MAY for the final fall back to $HOST?)",
              "createdAt": "2020-07-10T17:19:28Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 101,
              "body": "Given how we use this, either \"default endpoint\" or \"implicit endpoint\" might be better.",
              "createdAt": "2020-07-10T17:22:32Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjcyNjkz",
          "commit": {
            "abbreviatedOid": "13d2ad1"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T20:08:09Z",
          "updatedAt": "2020-07-10T20:08:09Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "How about \"authority endpoint\"?",
              "createdAt": "2020-07-10T20:08:09Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzA0Njkw",
          "commit": {
            "abbreviatedOid": "db52d3a"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T21:14:48Z",
          "updatedAt": "2020-07-10T21:14:49Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "That's better.",
              "createdAt": "2020-07-10T21:14:48Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzA0OTg4",
          "commit": {
            "abbreviatedOid": "db52d3a"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-10T21:15:26Z",
          "updatedAt": "2020-07-10T21:15:27Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "It sounds like \"authority endpoint\"?",
              "createdAt": "2020-07-10T21:15:27Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjgwNjEz",
          "commit": {
            "abbreviatedOid": "ed6ce1b"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "> (SHOULD or MAY for the final fall back to $HOST?)\r\n\r\nI changed this to MAY, and incorporated it for both AliasForm and ServiceForm.  This seems to simplify the logic.\r\n\r\nI also made a number of changes throughout the document for consistency with these changes.",
          "createdAt": "2020-07-10T20:24:38Z",
          "updatedAt": "2020-07-10T21:54:45Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "I think this is covered by the sentence above equation \"service\" and \"origin\".",
              "createdAt": "2020-07-10T20:24:38Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 94,
              "body": "I think this is covered by \"authority endpoint\".  EDIT: You got there first.",
              "createdAt": "2020-07-10T20:24:51Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 29,
              "body": "This is just an example, so it seems at least possible that there is an endpoint somewhere at svc.example.net to which the owner wants to delegate.\r\n\r\nI think \"EndpointMode\" or \"BindingMode\" would be an improvement, but let's not change that here.",
              "createdAt": "2020-07-10T20:25:57Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 100,
              "body": "OK, done.",
              "createdAt": "2020-07-10T20:27:03Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 81,
              "body": "Done",
              "createdAt": "2020-07-10T20:29:11Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTQzNTEx",
          "commit": {
            "abbreviatedOid": "d53f1e7"
          },
          "author": "MikeBishop",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T19:36:51Z",
          "updatedAt": "2020-07-13T19:46:36Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nto network services, such as for HTTPS origins.  SVCB records\r\n```\r\nNot text changed by this PR, but I'd probably talk about the HTTPS origin as one of the services being described, rather than the URL.  In fact, this is explicitly stated further down.",
              "createdAt": "2020-07-13T19:36:51Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            },
            {
              "originalPosition": 39,
              "body": "While this doesn't need to be addressed before merging, I'm not certain that the concept of \"authoritative\" is the same in all possible protocols, particularly ones where the scope of a \"service\" might vary.  We might want to consider whether that's a term we want to keep as well.",
              "createdAt": "2020-07-13T19:45:00Z",
              "updatedAt": "2020-07-13T19:50:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTUzNDY1",
          "commit": {
            "abbreviatedOid": "8fca57b"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T19:52:25Z",
          "updatedAt": "2020-07-13T19:52:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQyNDA2MzE5",
      "title": "Define a \"mandatory\" SvcParamKey",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/205",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #166",
      "createdAt": "2020-07-01T02:46:45Z",
      "updatedAt": "2020-07-03T02:54:46Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "9a3311b91969b2aabb83f444a6fa74e9d640fcd0",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-mandatory",
      "headRefOid": "8a237bc05213d139c538af4eb02952ad0d1fabf1",
      "closedAt": "2020-07-03T02:54:46Z",
      "mergedAt": "2020-07-03T02:54:46Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "7ae1ce79b8501f6d35e3dafbcc70c10b7fccbe40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTEzMTU2",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T02:53:56Z",
          "updatedAt": "2020-07-01T02:53:56Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Overriding or adding to the default set?  The later seems more usable?",
              "createdAt": "2020-07-01T02:53:56Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTEzNzE4",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T02:56:02Z",
          "updatedAt": "2020-07-01T02:56:02Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Is there a reason to switch between the words \"essential\" and \"mandatory\"?  Using both is somewhat distracting.",
              "createdAt": "2020-07-01T02:56:02Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTE1MTUy",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T03:01:29Z",
          "updatedAt": "2020-07-01T03:01:29Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Should explicitly state that if the set of compatible ServiceForm HTTPS RRs is empty (such as due to all requiring a mandatory key not supported) that clients MUST NOT apply the HSTS-like behavior?  (It's implicit here, but may be worth calling out outright.)",
              "createdAt": "2020-07-01T03:01:29Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTE1NTEz",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T03:02:46Z",
          "updatedAt": "2020-07-01T03:02:46Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Did we want to give it ID 0 ?  (I liked the idea of having it first.)  I guess we can't make it 1 because we don't want to move alpn? ",
              "createdAt": "2020-07-01T03:02:46Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTE1ODcy",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T03:04:06Z",
          "updatedAt": "2020-07-01T03:04:06Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I'd add a note here that if no ServiceForm RRs in the RRset are compatible then the client must treat the RRset as empty.",
              "createdAt": "2020-07-01T03:04:06Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTIxNjY0",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T03:26:05Z",
          "updatedAt": "2020-07-01T03:26:06Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I\u2019d prefer to stick with \u201cmandatory\u201d and \u201cdefault mandatory set\u201d.  Agreed that the mix is a bit confusing. ",
              "createdAt": "2020-07-01T03:26:05Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTIyMDE5",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T03:27:24Z",
          "updatedAt": "2020-07-01T03:27:25Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I\u2019d rather us not move alpn if that\u2019s okay :)\r\n\r\nAny reason not to give this 0? It is a meta-key, so making it 0 seems elegant. ",
              "createdAt": "2020-07-01T03:27:24Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTMzMDA3",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T04:11:03Z",
          "updatedAt": "2020-07-01T04:11:03Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "We'd previously discussed leaving 0 unassigned so that APIs could use it to mean something like \"null\".  If we don't think that's actually useful then I'm OK with making this 0.\r\n\r\nEDIT: I think the use case would be for a function that parses a key name and returns the uint16 code.  In some programming languages, it might be convenient to be able to return 0 if the name couldn't be parsed.  Naturally, there are also many other possible solutions.",
              "createdAt": "2020-07-01T04:11:03Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTMzNzg2",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T04:14:03Z",
          "updatedAt": "2020-07-01T04:14:03Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I chose this wording because \"mandatory\", in my view, is extremely confusing: \"mandatory\" sounds like domain owners are required to publish or use the \"mandatory\" keys, and clients are expected to enforce that they are present (neither of which is true).  These keys aren't \"mandatory\"; they're \"mandatory-to-understand-if-present\".  \"Non-ignorable\".\r\n\r\nIf you can think of a clearer way to express this I would appreciate a suggestion!",
              "createdAt": "2020-07-01T04:14:03Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTM0MTc2",
          "commit": {
            "abbreviatedOid": "83f89c4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-01T04:15:35Z",
          "updatedAt": "2020-07-01T04:15:35Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Overriding seems more powerful, since it allows making default-essential keys optional.  Given that this feature should be very rare, I figured usability was not too important.\r\n\r\nThen again, maybe clients have to have an understanding of all the default-essential keys for a scheme anyway, so I guess we can just make it additive.",
              "createdAt": "2020-07-01T04:15:35Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzExOTk0",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:39:32Z",
          "updatedAt": "2020-07-02T02:39:33Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Changed: I made it additional instead.",
              "createdAt": "2020-07-02T02:39:33Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzEyMTIy",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:39:58Z",
          "updatedAt": "2020-07-02T02:39:59Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I changed this to \"mandatory\"/\"automatically mandatory\".",
              "createdAt": "2020-07-02T02:39:58Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzEyMTcy",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:40:08Z",
          "updatedAt": "2020-07-02T02:40:08Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Done",
              "createdAt": "2020-07-02T02:40:08Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzEyNDQ4",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:41:04Z",
          "updatedAt": "2020-07-02T02:41:04Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I changed \"mandatory\" to ID 0 and made key65535 (a.k.a. -1) explicitly reserved as \"invalid key\".",
              "createdAt": "2020-07-02T02:41:04Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzEyNjM3",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:41:45Z",
          "updatedAt": "2020-07-02T02:41:45Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think that is already mandated by each section on client behavior, but I added a non-normative note to this effect.",
              "createdAt": "2020-07-02T02:41:45Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzE1MTk4",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:50:21Z",
          "updatedAt": "2020-07-02T02:50:21Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Are \"automatically mandatory\" ones allowed to appear?  Is this \"MUST NOT appear more than once\" needed as a contraint for Presentation Format?\r\n(May \"automatically mandatory\" entries appear in the wire format list?)",
              "createdAt": "2020-07-02T02:50:21Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzE1NTcw",
          "commit": {
            "abbreviatedOid": "44fc195"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-02T02:51:35Z",
          "updatedAt": "2020-07-02T02:51:36Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Perhaps reframe as:\r\n\r\n\"This SvcParamKey is always automatically mandatory.  Automatically mandatory entries MUST NOT appear in the value list.\"\r\n\r\n(Unless we want to allow them to appear as doing so is idempotent?)",
              "createdAt": "2020-07-02T02:51:36Z",
              "updatedAt": "2020-07-03T02:03:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTA2MzYw",
          "commit": {
            "abbreviatedOid": "8a237bc"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-03T02:05:24Z",
          "updatedAt": "2020-07-03T02:05:24Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "> Are \"automatically mandatory\" ones allowed to appear?\r\n\r\nI updated the text to make this a \"SHOULD NOT\".\r\n\r\n> Is this \"MUST NOT appear more than once\" needed as a contraint for Presentation Format?\r\n\r\nNo, but there's no use in having duplicates, and it's easy for the zone file parser to detect.",
              "createdAt": "2020-07-03T02:05:24Z",
              "updatedAt": "2020-07-03T02:05:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTA2Njg4",
          "commit": {
            "abbreviatedOid": "8a237bc"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-03T02:06:51Z",
          "updatedAt": "2020-07-03T02:06:51Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I don't want to make this \"MUST NOT\", because zone file parsers can't detect it (they are not scheme-aware), and I would like to avoid introducing syntax errors that are caught by clients but not by the zone file parser.",
              "createdAt": "2020-07-03T02:06:51Z",
              "updatedAt": "2020-07-03T02:06:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTE3OTEw",
          "commit": {
            "abbreviatedOid": "8a237bc"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-03T02:54:39Z",
          "updatedAt": "2020-07-03T02:54:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 207,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ1NzE4MTQy",
      "title": "Recommend against DNAME-after-SVCB",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/207",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #206",
      "createdAt": "2020-07-07T22:12:36Z",
      "updatedAt": "2020-07-13T03:45:35Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "7ae1ce79b8501f6d35e3dafbcc70c10b7fccbe40",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-dname",
      "headRefOid": "2f9dd7d2084e60313e36dd3b068964832074af68",
      "closedAt": "2020-07-13T03:45:35Z",
      "mergedAt": "2020-07-13T03:45:35Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "6d310b378ba4273694a71bfcb42f4c4bd8218e35"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@marka63, does this work?",
          "createdAt": "2020-07-07T22:12:58Z",
          "updatedAt": "2020-07-07T22:12:58Z"
        },
        {
          "author": "marka63",
          "authorAssociation": "NONE",
          "body": "yes, that should be fine",
          "createdAt": "2020-07-07T22:52:42Z",
          "updatedAt": "2020-07-07T22:52:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTYzOTkx",
          "commit": {
            "abbreviatedOid": "2f9dd7d"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T03:45:30Z",
          "updatedAt": "2020-07-13T03:45:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 208,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3MDgxMDg1",
      "title": "Note on why priority is 16 bits",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/208",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves issue #184",
      "createdAt": "2020-07-09T20:37:02Z",
      "updatedAt": "2020-07-10T17:23:28Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "08a5c8ac0e37848318fa9dc4929b4ee5d85d4e75",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-why-16-bits",
      "headRefOid": "68480d8be5803ac69dfc3ba439be05f144ae9edf",
      "closedAt": "2020-07-10T17:23:28Z",
      "mergedAt": "2020-07-10T17:23:28Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "191b811735df6aef995593444bf7d07df8d73496"
      },
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "(Note this uses an alternate CamelCase name as proposed elsewhere.)",
          "createdAt": "2020-07-09T20:38:20Z",
          "updatedAt": "2020-07-09T20:38:20Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTg2NjE3",
          "commit": {
            "abbreviatedOid": "68480d8"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-09T21:37:40Z",
          "updatedAt": "2020-07-09T21:37:40Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDczODIz",
          "commit": {
            "abbreviatedOid": "68480d8"
          },
          "author": "tfpauly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-10T01:52:15Z",
          "updatedAt": "2020-07-10T01:52:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 209,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTQyNDA3",
      "title": "Improve description of AliasForm",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/209",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #187, #188",
      "createdAt": "2020-07-09T23:26:04Z",
      "updatedAt": "2020-07-14T03:40:34Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "08a5c8ac0e37848318fa9dc4929b4ee5d85d4e75",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-alias",
      "headRefOid": "b8b95c57412360fd443354048252f68df09d5588",
      "closedAt": "2020-07-13T03:45:01Z",
      "mergedAt": "2020-07-13T03:45:00Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "3474aa7f38ac13e953ba02486f7793e29bf0049d"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this guidance could become obsolete if recursive resolvers are\nuniversally upgraded to follow SVCB aliases.  That day seems likely to be a\nlong way off, but we can certainly adjust the wording here.\n\nOn Mon, Jul 13, 2020, 11:01 PM Martin Thomson <notifications@github.com>\nwrote:\n\n> *@martinthomson* commented on this pull request.\n> ------------------------------\n>\n> In draft-ietf-dnsop-svcb-https.md\n> <https://github.com/MikeBishop/dns-alt-svc/pull/209#discussion_r454057512>\n> :\n>\n> > +requiring a corresponding change to example.com.  Note that if\n> +foosvc.example.net promises to always publish a SVCB record, this AliasForm\n> +record can be replaced by a CNAME, which would likely improve performance.\n>\n> Isn't this only true until resolvers start automatically following\n> AliasForm references?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/MikeBishop/dns-alt-svc/pull/209#pullrequestreview-447737760>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABO3SPM7S7ERVKB7LUYHJLR3PC7LANCNFSM4OWCCCJA>\n> .\n>\n",
          "createdAt": "2020-07-14T03:12:21Z",
          "updatedAt": "2020-07-14T03:12:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You might be willing to make a move sooner than when every resolver collapses the indirection.",
          "createdAt": "2020-07-14T03:40:34Z",
          "updatedAt": "2020-07-14T03:40:34Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTI4NTM4",
          "commit": {
            "abbreviatedOid": "e0fab0f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This one still has some pending comments...",
          "createdAt": "2020-07-10T16:15:52Z",
          "updatedAt": "2020-07-12T03:40:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "did we want to use a word other than \"origin\" here?",
              "createdAt": "2020-07-10T16:15:52Z",
              "updatedAt": "2020-07-12T12:35:20Z"
            },
            {
              "originalPosition": 25,
              "body": "The \"wanted to point requests to\" took me a few times to read. \r\n\r\n```suggestion\r\nFor example, the operator of foo://example.com:8080 could\r\npoint requests to a service operating at foosvc.example.net\r\nby publishing:\r\n```",
              "createdAt": "2020-07-10T16:20:20Z",
              "updatedAt": "2020-07-12T12:35:20Z"
            },
            {
              "originalPosition": 32,
              "body": "Inconsistent on use of \".\" in names and it makes this harder to read.\r\n```suggestion\r\nfoosvc.example.net promises to always publish a SVCB record, this AliasForm\r\n```",
              "createdAt": "2020-07-10T16:21:41Z",
              "updatedAt": "2020-07-12T12:35:20Z"
            },
            {
              "originalPosition": 6,
              "body": "Per #204 perhaps use \"service\" instead?\r\n\r\n```suggestion\r\nWhen SvcRecordType is AliasForm, the SVCB record aliases a service to a\r\n```",
              "createdAt": "2020-07-10T16:24:27Z",
              "updatedAt": "2020-07-12T12:35:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODc0NjY2",
          "commit": {
            "abbreviatedOid": "b72d581"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-12T12:34:46Z",
          "updatedAt": "2020-07-12T12:34:46Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Done",
              "createdAt": "2020-07-12T12:34:46Z",
              "updatedAt": "2020-07-12T12:35:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTYzODY1",
          "commit": {
            "abbreviatedOid": "b8b95c5"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T03:44:55Z",
          "updatedAt": "2020-07-13T03:44:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzM3NzYw",
          "commit": {
            "abbreviatedOid": "b8b95c5"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-14T02:18:18Z",
          "updatedAt": "2020-07-14T03:00:56Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Isn't this only true until resolvers start automatically following AliasForm references?",
              "createdAt": "2020-07-14T02:18:18Z",
              "updatedAt": "2020-07-14T03:00:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 210,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTY4MTg1",
      "title": "Relax normative language around downgrade attacks",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/210",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #191",
      "createdAt": "2020-07-10T01:10:50Z",
      "updatedAt": "2020-07-10T16:14:59Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "08a5c8ac0e37848318fa9dc4929b4ee5d85d4e75",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-security",
      "headRefOid": "77bd598a7a2f44b8d5d488fdcea32c852f87dfc6",
      "closedAt": "2020-07-10T16:14:59Z",
      "mergedAt": "2020-07-10T16:14:59Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "e95db73e3087891fdb1e30246aa1ceadfadcd8de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTI3Nzcz",
          "commit": {
            "abbreviatedOid": "77bd598"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Seems fine.  Only potential area for future improvement might be to clarify in the Security Considerations that attacks may be indistinguishable from network or software issues (to rationalize the SHOULD vs MUST), but that is also covered to some degree above and could get wordy.",
          "createdAt": "2020-07-10T16:14:43Z",
          "updatedAt": "2020-07-10T16:14:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 212,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3Njc2MTc1",
      "title": "Alias to \".\" means repudiation",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/212",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change also adjusts the advice about the use of \".\".\r\n\r\nFixes #203",
      "createdAt": "2020-07-10T23:01:27Z",
      "updatedAt": "2020-07-12T03:38:28Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "191b811735df6aef995593444bf7d07df8d73496",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-dot",
      "headRefOid": "da7826c737673b1bf882242e12be054dcdb71060",
      "closedAt": "2020-07-12T03:38:28Z",
      "mergedAt": "2020-07-12T03:38:27Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "63bf92d957cb28de9918d077253f822f84393acd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODExNjA4",
          "commit": {
            "abbreviatedOid": "ffef662"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "See comments above.  If we're going to recommend using origin hostname\r\n(which was added here and should probably be called out explicitly) we need\r\nthe safety warning.\r\n\r\nWe should also add a security consideration that untrusted recursive resolvers\r\nmight return AliasForm \".\" records as a way to block clients from accessing \r\nparticular protocols, but in a way that is more fine-grained than is possible\r\nwith NXDOMAINs injection today.",
          "createdAt": "2020-07-11T15:59:07Z",
          "updatedAt": "2020-07-11T16:14:11Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n## Special handling of \".\" {#dot} in SvcDomainName\r\n```",
              "createdAt": "2020-07-11T15:59:07Z",
              "updatedAt": "2020-07-11T17:26:56Z"
            },
            {
              "originalPosition": 70,
              "body": "```suggestion\r\ndomain owners SHOULD minimize the use of AliasForm records, and choose\r\nSvcDomainName to be a domain for which the client will have already issued\r\naddress queries (see {{client-behavior}}), such as by using \".\" as the SvcDomainName for ServiceForm records.  The simplest SVCB configuration\r\nwould be a single ServiceForm SVCB record whose SvcDomainName is the origin hostname.  (Note that using the origin hostname as the SvcDomainName can be problematic when using {{!ECH}} \r\n({{svcparamkeys-echconfig}}) and switching between different\r\nendpoints as clients may get IP addresses for one endpoint\r\nand {{svcparamkeys-echconfig}} for a different endpoint.)\r\n```\r\n\r\nI'm not sure if the note should be moved elsewhere, but it's an important warning for explaining why using the simplest form may not be preferable.",
              "createdAt": "2020-07-11T16:10:35Z",
              "updatedAt": "2020-07-11T17:26:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODE1OTI3",
          "commit": {
            "abbreviatedOid": "fd967ee"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "> We should also add a security consideration that untrusted recursive resolvers\r\n> might return AliasForm \".\" records as a way to block clients from accessing\r\n> particular protocols, but in a way that is more fine-grained than is possible\r\n> with NXDOMAINs injection today.\r\n\r\nDone",
          "createdAt": "2020-07-11T17:09:11Z",
          "updatedAt": "2020-07-11T17:28:54Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Rather than describe a simple configuration and then advise against it, I changed this section to have an explicit example that we would actually recommend, using a layer of indirection as intended.",
              "createdAt": "2020-07-11T17:09:11Z",
              "updatedAt": "2020-07-11T17:28:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQzMzAz",
          "commit": {
            "abbreviatedOid": "da7826c"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-12T03:37:25Z",
          "updatedAt": "2020-07-12T03:37:25Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQzMzQ1",
          "commit": {
            "abbreviatedOid": "da7826c"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-12T03:38:21Z",
          "updatedAt": "2020-07-12T03:38:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 214,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODA2NzMw",
      "title": "Expand description of proxy configuration",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/214",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #190",
      "createdAt": "2020-07-11T19:21:31Z",
      "updatedAt": "2020-07-12T03:19:47Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0ea348a7fcc88ccd183c601a50a22eecf160d9ec",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-intent",
      "headRefOid": "09128a0e120c5fa58a9c605d0a948d87135b4eaa",
      "closedAt": "2020-07-12T03:19:47Z",
      "mergedAt": "2020-07-12T03:19:47Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "15331da92a3d94d16a414091e9c883d801ea3b04"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQyNzEw",
          "commit": {
            "abbreviatedOid": "09128a0"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-12T03:19:30Z",
          "updatedAt": "2020-07-12T03:19:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 215,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODA3MTc1",
      "title": "Add reference to HSTS on first use",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/215",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #181",
      "createdAt": "2020-07-11T19:25:49Z",
      "updatedAt": "2020-07-13T17:26:31Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "ba6fef7b3ad0de83b12d6b2135cb5c16293a8b55",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-hstsref",
      "headRefOid": "d953395fd7f3a187498a66537f48fb34945946a2",
      "closedAt": "2020-07-13T17:26:31Z",
      "mergedAt": "2020-07-13T17:26:31Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "73b89134ed6ac7dbbd427b3e36fb3d56f2c41b14"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQyNjc3",
          "commit": {
            "abbreviatedOid": "58f1d81"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-12T03:18:18Z",
          "updatedAt": "2020-07-13T17:26:23Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Why wouldn't we mention the DNS RR TTL aspect?  This seems to be very confusing to people given the semi-permanency of HSTS.",
              "createdAt": "2020-07-12T03:18:18Z",
              "updatedAt": "2020-07-13T17:26:23Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n* Provide a HSTS-like (but DNS TTL limited) indication {{!HSTS=RFC6797}} signaling\r\n  that the HTTPS scheme should\r\n```\r\nAnother wording might be to call it \"temporary\"?  Or is the real difference that HSTS lifetimes may be much longer than typical DNS TTLs?",
              "createdAt": "2020-07-13T17:17:13Z",
              "updatedAt": "2020-07-13T17:26:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 216,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODA4MTcx",
      "title": "Simplify description of SRV/HTTP status",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/216",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This also removes duplicate statements about CNAME at apex.\r\n\r\nFixes #180",
      "createdAt": "2020-07-11T19:36:08Z",
      "updatedAt": "2020-07-13T03:18:37Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0ea348a7fcc88ccd183c601a50a22eecf160d9ec",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-srv",
      "headRefOid": "8efc3d4514a8c381bb138d9c5567f1958c0e9ccd",
      "closedAt": "2020-07-13T03:18:37Z",
      "mergedAt": "2020-07-13T03:18:37Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "603fd7339e39e7b8911db17b8a1f8cb9b117d715"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODQyNjI5",
          "commit": {
            "abbreviatedOid": "e920d6f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-07-12T03:16:34Z",
          "updatedAt": "2020-07-12T03:16:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I actually think this context (can't have a CNAME and NS RR at the zone apex) is helpful as this is one of the driving factors.  SRV is just one of the mechanisms that could do this.   Perhaps still include \"..., such as allowing service delegation for a zone apex name where CNAMEs aren't allowed, ...\" ?",
              "createdAt": "2020-07-12T03:16:34Z",
              "updatedAt": "2020-07-12T12:30:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODc0NDA4",
          "commit": {
            "abbreviatedOid": "8efc3d4"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-12T12:31:17Z",
          "updatedAt": "2020-07-12T12:31:17Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "OK.  Rather than duplicate the statement about CNAME-at-apex, I added a pointer back to the CNAME-at-apex bullet point.",
              "createdAt": "2020-07-12T12:31:17Z",
              "updatedAt": "2020-07-12T12:31:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTU3OTAz",
          "commit": {
            "abbreviatedOid": "8efc3d4"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T03:18:29Z",
          "updatedAt": "2020-07-13T03:18:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 217,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODE5NTkw",
      "title": "Don't use references as names",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/217",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "With this change, references are either parentheticals or nouns that\r\nname the referenced document.\r\n\r\nFixes #195",
      "createdAt": "2020-07-11T21:33:01Z",
      "updatedAt": "2020-07-13T04:06:19Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0ea348a7fcc88ccd183c601a50a22eecf160d9ec",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-ref",
      "headRefOid": "ba4502fe320022f6b53a32cc0cd689a1d63e088a",
      "closedAt": "2020-07-13T04:05:59Z",
      "mergedAt": "2020-07-13T04:05:59Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "ba6fef7b3ad0de83b12d6b2135cb5c16293a8b55"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, merged. I promise I didn't do anything interesting.",
          "createdAt": "2020-07-13T04:06:19Z",
          "updatedAt": "2020-07-13T04:06:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2OTU3NjY5",
          "commit": {
            "abbreviatedOid": "ba4502f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks fine but I won't have a chance to do a code-review level review of this (ie, to validate all the output as sane).  But probably fine to just merge and review later?",
          "createdAt": "2020-07-13T03:17:24Z",
          "updatedAt": "2020-07-13T03:17:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 218,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDQ5MTg3",
      "title": "Update RR type numbers in text",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/218",
      "state": "CLOSED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update assigned rrtypes in a place we missed before",
      "createdAt": "2020-07-13T19:36:52Z",
      "updatedAt": "2020-07-13T19:56:49Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "47dc70b77d0db048de81bb7ded8a3dfadd19d23c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-rrtype-one-more-place",
      "headRefOid": "ff9a1ef23b512094e6418ddae8cec3345ed2bcad",
      "closedAt": "2020-07-13T19:56:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed elsewhere...",
          "createdAt": "2020-07-13T19:56:46Z",
          "updatedAt": "2020-07-13T19:56:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 219,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDY0OTg0",
      "title": "Update changelog",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/219",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-07-13T20:13:25Z",
      "updatedAt": "2020-07-13T20:23:18Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "b9693794693edcdd6eeb75b5fb4a4322730e8e58",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-changelog",
      "headRefOid": "ceb8d05d7ea3a51c332c55bf7c3266d18f9b8c7d",
      "closedAt": "2020-07-13T20:23:18Z",
      "mergedAt": "2020-07-13T20:23:18Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "0eeb68300611d512f97527724dbc5a79a393da5c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTczNDcw",
          "commit": {
            "abbreviatedOid": "ceb8d05"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-13T20:23:09Z",
          "updatedAt": "2020-07-13T20:23:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 220,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDY4NTMx",
      "title": "Use non-normative language in intro",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/220",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #182",
      "createdAt": "2020-07-13T20:20:46Z",
      "updatedAt": "2020-07-13T20:22:43Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "b9693794693edcdd6eeb75b5fb4a4322730e8e58",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-non-normative-in-intro",
      "headRefOid": "981cbe47ddf21267110c6bd805371ef9c255d64e",
      "closedAt": "2020-07-13T20:22:42Z",
      "mergedAt": "2020-07-13T20:22:42Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "1f63188a940714db51f6adf1bc0bac7e6fe5af59"
      },
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": ":+1: ",
          "createdAt": "2020-07-13T20:22:38Z",
          "updatedAt": "2020-07-13T20:22:38Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 223,
      "id": "MDExOlB1bGxSZXF1ZXN0NDUwNzA5NDg2",
      "title": " mandatory also needs MUST NOT for escape processing.",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/223",
      "state": "MERGED",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes issue #222",
      "createdAt": "2020-07-17T02:59:29Z",
      "updatedAt": "2020-07-17T03:11:15Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0eeb68300611d512f97527724dbc5a79a393da5c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-mandatory-no-escape",
      "headRefOid": "f52e2a70b101d3da0a9dad1655249b7752bb5cbf",
      "closedAt": "2020-07-17T03:11:15Z",
      "mergedAt": "2020-07-17T03:11:14Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "ff8c572d75f7fb70ba7d0428e1459f3994b74c86"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzQ1NjY4",
          "commit": {
            "abbreviatedOid": "f52e2a7"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-17T03:11:08Z",
          "updatedAt": "2020-07-17T03:11:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 224,
      "id": "MDExOlB1bGxSZXF1ZXN0NDUwNzEzNDM3",
      "title": "Recursives and handling loops",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/224",
      "state": "OPEN",
      "author": "enygren",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #221 \r\n\r\nChange the \"TargetName of AliasMode SHOULD NOT equal owner name\" (vs MUST NOT).\r\n\r\nClarify that recursives MUST have reasonable loop prevention.",
      "createdAt": "2020-07-17T03:06:37Z",
      "updatedAt": "2020-07-17T03:15:30Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "0eeb68300611d512f97527724dbc5a79a393da5c",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "enygren-loop-safety",
      "headRefOid": "3f507eddca1f893c20b974ca8487b6a59fe10cde",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzQ2NzIw",
          "commit": {
            "abbreviatedOid": "3f507ed"
          },
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-07-17T03:15:30Z",
          "updatedAt": "2020-07-17T03:15:30Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "The AliasForm section already says \"To avoid unbounded alias chains, clients and recursive resolvers MUST impose a limit on the total number of SVCB aliases they will follow\".  I don't understand whether this requirement is equivalent or not.",
              "createdAt": "2020-07-17T03:15:30Z",
              "updatedAt": "2020-07-17T03:15:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 226,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1MzIwMTAy",
      "title": "Update svcb-implementations.md",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/226",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Describe iOS/macOS client support.",
      "createdAt": "2020-07-22T19:48:15Z",
      "updatedAt": "2020-07-22T20:08:12Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "45773e33342d45aa862ae4a9832eb44ceb0508a9",
      "headRepository": "tfpauly/dns-alt-svc",
      "headRefName": "patch-1",
      "headRefOid": "a1d909375f1c461c7a83ec33658bafb468ff7cf4",
      "closedAt": "2020-07-22T20:08:12Z",
      "mergedAt": "2020-07-22T20:08:12Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "78ae89c07071efca05046f2d3ab0b76f77fc3db3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjQ2MzAy",
          "commit": {
            "abbreviatedOid": "a1d9093"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-22T20:08:06Z",
          "updatedAt": "2020-07-22T20:08:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1NjUzMTA4",
      "title": "Add more implementations",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/227",
      "state": "MERGED",
      "author": "ghedo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-07-23T11:45:53Z",
      "updatedAt": "2020-07-23T14:15:18Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "78ae89c07071efca05046f2d3ab0b76f77fc3db3",
      "headRepository": "ghedo/dns-alt-svc",
      "headRefName": "cloudflare",
      "headRefOid": "cbda85fda20bd83178bdc8ed851fdb133e4fc024",
      "closedAt": "2020-07-23T14:15:18Z",
      "mergedAt": "2020-07-23T14:15:18Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "859c68f04d78c1da0763d631f8630a200aacdca1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 228,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU1NzU0MTky",
      "title": "Missed one SvcDomainName -> TargetName",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/228",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-07-23T14:35:09Z",
      "updatedAt": "2020-07-23T20:26:59Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "859c68f04d78c1da0763d631f8630a200aacdca1",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-targetname",
      "headRefOid": "de2ab8f1314ea5932f28f33ea674b3514126137c",
      "closedAt": "2020-07-23T20:26:59Z",
      "mergedAt": "2020-07-23T20:26:59Z",
      "mergedBy": "enygren",
      "mergeCommit": {
        "oid": "06bb472563d642cbe8a5c8f5d7e77d8a63b9092a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDcwMzM2",
          "commit": {
            "abbreviatedOid": "de2ab8f"
          },
          "author": "enygren",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-23T20:26:54Z",
          "updatedAt": "2020-07-23T20:26:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU4MDM1OTA2",
      "title": "Proposal: Skip the default port prefix",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/230",
      "state": "OPEN",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This changes the definition of \"Port Prefix Naming\" to only include the\r\n_port prefix if a non-default port is specified.  None of the examples\r\nexercise this case, and the HTTPS RR overrides it, so this only matters\r\nfor future protocol mappings that choose to follow this advice.",
      "createdAt": "2020-07-28T20:25:44Z",
      "updatedAt": "2020-07-28T20:25:44Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "bd3bd0b9e3aad9e51dbe6911f4d451cb24af5bbe",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-noport",
      "headRefOid": "334db890a8ef0ed1007c741898e0c758e831b783",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 231,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU4MDM3NDEx",
      "title": "Explain \"SVCB\" at the top",
      "url": "https://github.com/MikeBishop/dns-alt-svc/pull/231",
      "state": "OPEN",
      "author": "bemasc",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #229",
      "createdAt": "2020-07-28T20:28:56Z",
      "updatedAt": "2020-07-28T20:31:02Z",
      "baseRepository": "MikeBishop/dns-alt-svc",
      "baseRefName": "master",
      "baseRefOid": "bd3bd0b9e3aad9e51dbe6911f4d451cb24af5bbe",
      "headRepository": "MikeBishop/dns-alt-svc",
      "headRefName": "bemasc-svcb",
      "headRefOid": "c27b3b4297f723d8671869bbbd99eade01242817",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "COLLABORATOR",
          "body": "@cbartle891 Is this better?",
          "createdAt": "2020-07-28T20:29:25Z",
          "updatedAt": "2020-07-28T20:29:25Z"
        },
        {
          "author": "cbartle891",
          "authorAssociation": "NONE",
          "body": "Yes, thank you!",
          "createdAt": "2020-07-28T20:31:02Z",
          "updatedAt": "2020-07-28T20:31:02Z"
        }
      ],
      "reviews": []
    }
  ]
}